// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace substrait {
constexpr Type_Boolean::Type_Boolean(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_BooleanDefaultTypeInternal {
  constexpr Type_BooleanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_BooleanDefaultTypeInternal() {}
  union {
    Type_Boolean _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_BooleanDefaultTypeInternal _Type_Boolean_default_instance_;
constexpr Type_I8::Type_I8(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_I8DefaultTypeInternal {
  constexpr Type_I8DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_I8DefaultTypeInternal() {}
  union {
    Type_I8 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_I8DefaultTypeInternal _Type_I8_default_instance_;
constexpr Type_I16::Type_I16(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_I16DefaultTypeInternal {
  constexpr Type_I16DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_I16DefaultTypeInternal() {}
  union {
    Type_I16 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_I16DefaultTypeInternal _Type_I16_default_instance_;
constexpr Type_I32::Type_I32(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_I32DefaultTypeInternal {
  constexpr Type_I32DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_I32DefaultTypeInternal() {}
  union {
    Type_I32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_I32DefaultTypeInternal _Type_I32_default_instance_;
constexpr Type_I64::Type_I64(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_I64DefaultTypeInternal {
  constexpr Type_I64DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_I64DefaultTypeInternal() {}
  union {
    Type_I64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_I64DefaultTypeInternal _Type_I64_default_instance_;
constexpr Type_FP32::Type_FP32(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_FP32DefaultTypeInternal {
  constexpr Type_FP32DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_FP32DefaultTypeInternal() {}
  union {
    Type_FP32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_FP32DefaultTypeInternal _Type_FP32_default_instance_;
constexpr Type_FP64::Type_FP64(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_FP64DefaultTypeInternal {
  constexpr Type_FP64DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_FP64DefaultTypeInternal() {}
  union {
    Type_FP64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_FP64DefaultTypeInternal _Type_FP64_default_instance_;
constexpr Type_String::Type_String(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_StringDefaultTypeInternal {
  constexpr Type_StringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_StringDefaultTypeInternal() {}
  union {
    Type_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_StringDefaultTypeInternal _Type_String_default_instance_;
constexpr Type_Binary::Type_Binary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_BinaryDefaultTypeInternal {
  constexpr Type_BinaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_BinaryDefaultTypeInternal() {}
  union {
    Type_Binary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_BinaryDefaultTypeInternal _Type_Binary_default_instance_;
constexpr Type_Timestamp::Type_Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_TimestampDefaultTypeInternal {
  constexpr Type_TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_TimestampDefaultTypeInternal() {}
  union {
    Type_Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_TimestampDefaultTypeInternal _Type_Timestamp_default_instance_;
constexpr Type_Date::Type_Date(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_DateDefaultTypeInternal {
  constexpr Type_DateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_DateDefaultTypeInternal() {}
  union {
    Type_Date _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_DateDefaultTypeInternal _Type_Date_default_instance_;
constexpr Type_Time::Type_Time(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_TimeDefaultTypeInternal {
  constexpr Type_TimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_TimeDefaultTypeInternal() {}
  union {
    Type_Time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_TimeDefaultTypeInternal _Type_Time_default_instance_;
constexpr Type_TimestampTZ::Type_TimestampTZ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_TimestampTZDefaultTypeInternal {
  constexpr Type_TimestampTZDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_TimestampTZDefaultTypeInternal() {}
  union {
    Type_TimestampTZ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_TimestampTZDefaultTypeInternal _Type_TimestampTZ_default_instance_;
constexpr Type_IntervalYear::Type_IntervalYear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_IntervalYearDefaultTypeInternal {
  constexpr Type_IntervalYearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_IntervalYearDefaultTypeInternal() {}
  union {
    Type_IntervalYear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_IntervalYearDefaultTypeInternal _Type_IntervalYear_default_instance_;
constexpr Type_IntervalDay::Type_IntervalDay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_IntervalDayDefaultTypeInternal {
  constexpr Type_IntervalDayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_IntervalDayDefaultTypeInternal() {}
  union {
    Type_IntervalDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_IntervalDayDefaultTypeInternal _Type_IntervalDay_default_instance_;
constexpr Type_UUID::Type_UUID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , nullability_(0)
{}
struct Type_UUIDDefaultTypeInternal {
  constexpr Type_UUIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_UUIDDefaultTypeInternal() {}
  union {
    Type_UUID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_UUIDDefaultTypeInternal _Type_UUID_default_instance_;
constexpr Type_FixedChar::Type_FixedChar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , length_(0)
  , nullability_(0)
{}
struct Type_FixedCharDefaultTypeInternal {
  constexpr Type_FixedCharDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_FixedCharDefaultTypeInternal() {}
  union {
    Type_FixedChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_FixedCharDefaultTypeInternal _Type_FixedChar_default_instance_;
constexpr Type_VarChar::Type_VarChar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , length_(0)
  , nullability_(0)
{}
struct Type_VarCharDefaultTypeInternal {
  constexpr Type_VarCharDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_VarCharDefaultTypeInternal() {}
  union {
    Type_VarChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_VarCharDefaultTypeInternal _Type_VarChar_default_instance_;
constexpr Type_FixedBinary::Type_FixedBinary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , length_(0)
  , nullability_(0)
{}
struct Type_FixedBinaryDefaultTypeInternal {
  constexpr Type_FixedBinaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_FixedBinaryDefaultTypeInternal() {}
  union {
    Type_FixedBinary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_FixedBinaryDefaultTypeInternal _Type_FixedBinary_default_instance_;
constexpr Type_Decimal::Type_Decimal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variation_(nullptr)
  , scale_(0)
  , precision_(0)
  , nullability_(0)
{}
struct Type_DecimalDefaultTypeInternal {
  constexpr Type_DecimalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_DecimalDefaultTypeInternal() {}
  union {
    Type_Decimal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_DecimalDefaultTypeInternal _Type_Decimal_default_instance_;
constexpr Type_Struct::Type_Struct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , variation_(nullptr)
  , nullability_(0)
{}
struct Type_StructDefaultTypeInternal {
  constexpr Type_StructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_StructDefaultTypeInternal() {}
  union {
    Type_Struct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_StructDefaultTypeInternal _Type_Struct_default_instance_;
constexpr Type_NamedStruct::Type_NamedStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , struct__(nullptr){}
struct Type_NamedStructDefaultTypeInternal {
  constexpr Type_NamedStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_NamedStructDefaultTypeInternal() {}
  union {
    Type_NamedStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_NamedStructDefaultTypeInternal _Type_NamedStruct_default_instance_;
constexpr Type_List::Type_List(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(nullptr)
  , variation_(nullptr)
  , nullability_(0)
{}
struct Type_ListDefaultTypeInternal {
  constexpr Type_ListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_ListDefaultTypeInternal() {}
  union {
    Type_List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_ListDefaultTypeInternal _Type_List_default_instance_;
constexpr Type_Map::Type_Map(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , value_(nullptr)
  , variation_(nullptr)
  , nullability_(0)
{}
struct Type_MapDefaultTypeInternal {
  constexpr Type_MapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_MapDefaultTypeInternal() {}
  union {
    Type_Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_MapDefaultTypeInternal _Type_Map_default_instance_;
constexpr Type_Variation::Type_Variation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_(0){}
struct Type_VariationDefaultTypeInternal {
  constexpr Type_VariationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Type_VariationDefaultTypeInternal() {}
  union {
    Type_Variation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Type_VariationDefaultTypeInternal _Type_Variation_default_instance_;
constexpr Type::Type(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TypeDefaultTypeInternal {
  constexpr TypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeDefaultTypeInternal() {}
  union {
    Type _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeDefaultTypeInternal _Type_default_instance_;
}  // namespace substrait
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_type_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_type_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_type_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_type_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Boolean, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Boolean, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I8, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I8, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I16, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I16, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I32, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I32, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I64, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_I64, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP32, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP32, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP64, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FP64, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_String, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_String, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Binary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Binary, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Binary, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Timestamp, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Timestamp, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Date, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Date, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Time, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Time, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_TimestampTZ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_TimestampTZ, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_TimestampTZ, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalYear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalYear, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalYear, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalDay, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_IntervalDay, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_UUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_UUID, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_UUID, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedChar, length_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedChar, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedChar, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_VarChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_VarChar, length_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_VarChar, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_VarChar, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedBinary, length_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedBinary, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_FixedBinary, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Decimal, scale_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Decimal, precision_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Decimal, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Decimal, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Struct, types_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Struct, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Struct, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_NamedStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_NamedStruct, names_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_NamedStruct, struct__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_List, type_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_List, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_List, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Map, key_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Map, value_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Map, variation_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Map, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Variation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Variation, organization_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type_Variation, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Type, kind_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::substrait::Type_Boolean)},
  { 7, -1, sizeof(::io::substrait::Type_I8)},
  { 14, -1, sizeof(::io::substrait::Type_I16)},
  { 21, -1, sizeof(::io::substrait::Type_I32)},
  { 28, -1, sizeof(::io::substrait::Type_I64)},
  { 35, -1, sizeof(::io::substrait::Type_FP32)},
  { 42, -1, sizeof(::io::substrait::Type_FP64)},
  { 49, -1, sizeof(::io::substrait::Type_String)},
  { 56, -1, sizeof(::io::substrait::Type_Binary)},
  { 63, -1, sizeof(::io::substrait::Type_Timestamp)},
  { 70, -1, sizeof(::io::substrait::Type_Date)},
  { 77, -1, sizeof(::io::substrait::Type_Time)},
  { 84, -1, sizeof(::io::substrait::Type_TimestampTZ)},
  { 91, -1, sizeof(::io::substrait::Type_IntervalYear)},
  { 98, -1, sizeof(::io::substrait::Type_IntervalDay)},
  { 105, -1, sizeof(::io::substrait::Type_UUID)},
  { 112, -1, sizeof(::io::substrait::Type_FixedChar)},
  { 120, -1, sizeof(::io::substrait::Type_VarChar)},
  { 128, -1, sizeof(::io::substrait::Type_FixedBinary)},
  { 136, -1, sizeof(::io::substrait::Type_Decimal)},
  { 145, -1, sizeof(::io::substrait::Type_Struct)},
  { 153, -1, sizeof(::io::substrait::Type_NamedStruct)},
  { 160, -1, sizeof(::io::substrait::Type_List)},
  { 168, -1, sizeof(::io::substrait::Type_Map)},
  { 177, -1, sizeof(::io::substrait::Type_Variation)},
  { 184, -1, sizeof(::io::substrait::Type)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Boolean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_I8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_I16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_I32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_I64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_FP32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_FP64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Binary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_TimestampTZ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_IntervalYear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_IntervalDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_UUID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_FixedChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_VarChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_FixedBinary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_NamedStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_Variation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Type_default_instance_),
};

const char descriptor_table_protodef_type_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntype.proto\022\014io.substrait\032\020extensions.p"
  "roto\"\360\037\n\004Type\022*\n\004bool\030\001 \001(\0132\032.io.substra"
  "it.Type.BooleanH\000\022#\n\002i8\030\002 \001(\0132\025.io.subst"
  "rait.Type.I8H\000\022%\n\003i16\030\003 \001(\0132\026.io.substra"
  "it.Type.I16H\000\022%\n\003i32\030\005 \001(\0132\026.io.substrai"
  "t.Type.I32H\000\022%\n\003i64\030\007 \001(\0132\026.io.substrait"
  ".Type.I64H\000\022\'\n\004fp32\030\n \001(\0132\027.io.substrait"
  ".Type.FP32H\000\022\'\n\004fp64\030\013 \001(\0132\027.io.substrai"
  "t.Type.FP64H\000\022+\n\006string\030\014 \001(\0132\031.io.subst"
  "rait.Type.StringH\000\022+\n\006binary\030\r \001(\0132\031.io."
  "substrait.Type.BinaryH\000\0221\n\ttimestamp\030\016 \001"
  "(\0132\034.io.substrait.Type.TimestampH\000\022\'\n\004da"
  "te\030\020 \001(\0132\027.io.substrait.Type.DateH\000\022\'\n\004t"
  "ime\030\021 \001(\0132\027.io.substrait.Type.TimeH\000\0228\n\r"
  "interval_year\030\023 \001(\0132\037.io.substrait.Type."
  "IntervalYearH\000\0226\n\014interval_day\030\024 \001(\0132\036.i"
  "o.substrait.Type.IntervalDayH\000\0226\n\014timest"
  "amp_tz\030\035 \001(\0132\036.io.substrait.Type.Timesta"
  "mpTZH\000\022\'\n\004uuid\030  \001(\0132\027.io.substrait.Type"
  ".UUIDH\000\0222\n\nfixed_char\030\025 \001(\0132\034.io.substra"
  "it.Type.FixedCharH\000\022-\n\007varchar\030\026 \001(\0132\032.i"
  "o.substrait.Type.VarCharH\000\0226\n\014fixed_bina"
  "ry\030\027 \001(\0132\036.io.substrait.Type.FixedBinary"
  "H\000\022-\n\007decimal\030\030 \001(\0132\032.io.substrait.Type."
  "DecimalH\000\022+\n\006struct\030\031 \001(\0132\031.io.substrait"
  ".Type.StructH\000\022\'\n\004list\030\033 \001(\0132\027.io.substr"
  "ait.Type.ListH\000\022%\n\003map\030\034 \001(\0132\026.io.substr"
  "ait.Type.MapH\000\0227\n\014user_defined\030\037 \001(\0132\037.i"
  "o.substrait.Extensions.TypeIdH\000\032o\n\007Boole"
  "an\022/\n\tvariation\030\001 \001(\0132\034.io.substrait.Typ"
  "e.Variation\0223\n\013nullability\030\002 \001(\0162\036.io.su"
  "bstrait.Type.Nullability\032j\n\002I8\022/\n\tvariat"
  "ion\030\001 \001(\0132\034.io.substrait.Type.Variation\022"
  "3\n\013nullability\030\002 \001(\0162\036.io.substrait.Type"
  ".Nullability\032k\n\003I16\022/\n\tvariation\030\001 \001(\0132\034"
  ".io.substrait.Type.Variation\0223\n\013nullabil"
  "ity\030\002 \001(\0162\036.io.substrait.Type.Nullabilit"
  "y\032k\n\003I32\022/\n\tvariation\030\001 \001(\0132\034.io.substra"
  "it.Type.Variation\0223\n\013nullability\030\002 \001(\0162\036"
  ".io.substrait.Type.Nullability\032k\n\003I64\022/\n"
  "\tvariation\030\001 \001(\0132\034.io.substrait.Type.Var"
  "iation\0223\n\013nullability\030\002 \001(\0162\036.io.substra"
  "it.Type.Nullability\032l\n\004FP32\022/\n\tvariation"
  "\030\001 \001(\0132\034.io.substrait.Type.Variation\0223\n\013"
  "nullability\030\002 \001(\0162\036.io.substrait.Type.Nu"
  "llability\032l\n\004FP64\022/\n\tvariation\030\001 \001(\0132\034.i"
  "o.substrait.Type.Variation\0223\n\013nullabilit"
  "y\030\002 \001(\0162\036.io.substrait.Type.Nullability\032"
  "n\n\006String\022/\n\tvariation\030\001 \001(\0132\034.io.substr"
  "ait.Type.Variation\0223\n\013nullability\030\002 \001(\0162"
  "\036.io.substrait.Type.Nullability\032n\n\006Binar"
  "y\022/\n\tvariation\030\001 \001(\0132\034.io.substrait.Type"
  ".Variation\0223\n\013nullability\030\002 \001(\0162\036.io.sub"
  "strait.Type.Nullability\032q\n\tTimestamp\022/\n\t"
  "variation\030\001 \001(\0132\034.io.substrait.Type.Vari"
  "ation\0223\n\013nullability\030\002 \001(\0162\036.io.substrai"
  "t.Type.Nullability\032l\n\004Date\022/\n\tvariation\030"
  "\001 \001(\0132\034.io.substrait.Type.Variation\0223\n\013n"
  "ullability\030\002 \001(\0162\036.io.substrait.Type.Nul"
  "lability\032l\n\004Time\022/\n\tvariation\030\001 \001(\0132\034.io"
  ".substrait.Type.Variation\0223\n\013nullability"
  "\030\002 \001(\0162\036.io.substrait.Type.Nullability\032s"
  "\n\013TimestampTZ\022/\n\tvariation\030\001 \001(\0132\034.io.su"
  "bstrait.Type.Variation\0223\n\013nullability\030\002 "
  "\001(\0162\036.io.substrait.Type.Nullability\032t\n\014I"
  "ntervalYear\022/\n\tvariation\030\001 \001(\0132\034.io.subs"
  "trait.Type.Variation\0223\n\013nullability\030\002 \001("
  "\0162\036.io.substrait.Type.Nullability\032s\n\013Int"
  "ervalDay\022/\n\tvariation\030\001 \001(\0132\034.io.substra"
  "it.Type.Variation\0223\n\013nullability\030\002 \001(\0162\036"
  ".io.substrait.Type.Nullability\032l\n\004UUID\022/"
  "\n\tvariation\030\001 \001(\0132\034.io.substrait.Type.Va"
  "riation\0223\n\013nullability\030\002 \001(\0162\036.io.substr"
  "ait.Type.Nullability\032\201\001\n\tFixedChar\022\016\n\006le"
  "ngth\030\001 \001(\005\022/\n\tvariation\030\002 \001(\0132\034.io.subst"
  "rait.Type.Variation\0223\n\013nullability\030\003 \001(\016"
  "2\036.io.substrait.Type.Nullability\032\177\n\007VarC"
  "har\022\016\n\006length\030\001 \001(\005\022/\n\tvariation\030\002 \001(\0132\034"
  ".io.substrait.Type.Variation\0223\n\013nullabil"
  "ity\030\003 \001(\0162\036.io.substrait.Type.Nullabilit"
  "y\032\203\001\n\013FixedBinary\022\016\n\006length\030\001 \001(\005\022/\n\tvar"
  "iation\030\002 \001(\0132\034.io.substrait.Type.Variati"
  "on\0223\n\013nullability\030\003 \001(\0162\036.io.substrait.T"
  "ype.Nullability\032\221\001\n\007Decimal\022\r\n\005scale\030\001 \001"
  "(\005\022\021\n\tprecision\030\002 \001(\005\022/\n\tvariation\030\003 \001(\013"
  "2\034.io.substrait.Type.Variation\0223\n\013nullab"
  "ility\030\004 \001(\0162\036.io.substrait.Type.Nullabil"
  "ity\032\221\001\n\006Struct\022!\n\005types\030\001 \003(\0132\022.io.subst"
  "rait.Type\022/\n\tvariation\030\002 \001(\0132\034.io.substr"
  "ait.Type.Variation\0223\n\013nullability\030\003 \001(\0162"
  "\036.io.substrait.Type.Nullability\032G\n\013Named"
  "Struct\022\r\n\005names\030\001 \003(\t\022)\n\006struct\030\002 \001(\0132\031."
  "io.substrait.Type.Struct\032\216\001\n\004List\022 \n\004typ"
  "e\030\001 \001(\0132\022.io.substrait.Type\022/\n\tvariation"
  "\030\002 \001(\0132\034.io.substrait.Type.Variation\0223\n\013"
  "nullability\030\003 \001(\0162\036.io.substrait.Type.Nu"
  "llability\032\257\001\n\003Map\022\037\n\003key\030\001 \001(\0132\022.io.subs"
  "trait.Type\022!\n\005value\030\002 \001(\0132\022.io.substrait"
  ".Type\022/\n\tvariation\030\003 \001(\0132\034.io.substrait."
  "Type.Variation\0223\n\013nullability\030\004 \001(\0162\036.io"
  ".substrait.Type.Nullability\032/\n\tVariation"
  "\022\024\n\014organization\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\")\n\013"
  "Nullability\022\014\n\010NULLABLE\020\000\022\014\n\010REQUIRED\020\001B"
  "\006\n\004kindB\027P\001\252\002\022Substrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_type_2eproto_deps[1] = {
  &::descriptor_table_extensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_type_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_type_2eproto = {
  false, false, 4160, descriptor_table_protodef_type_2eproto, "type.proto", 
  &descriptor_table_type_2eproto_once, descriptor_table_type_2eproto_deps, 1, 26,
  schemas, file_default_instances, TableStruct_type_2eproto::offsets,
  file_level_metadata_type_2eproto, file_level_enum_descriptors_type_2eproto, file_level_service_descriptors_type_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_type_2eproto_getter() {
  return &descriptor_table_type_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_type_2eproto(&descriptor_table_type_2eproto);
namespace io {
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_Nullability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_type_2eproto);
  return file_level_enum_descriptors_type_2eproto[0];
}
bool Type_Nullability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Type_Nullability Type::NULLABLE;
constexpr Type_Nullability Type::REQUIRED;
constexpr Type_Nullability Type::Nullability_MIN;
constexpr Type_Nullability Type::Nullability_MAX;
constexpr int Type::Nullability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Type_Boolean::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Boolean* msg);
};

const ::io::substrait::Type_Variation&
Type_Boolean::_Internal::variation(const Type_Boolean* msg) {
  return *msg->variation_;
}
Type_Boolean::Type_Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Boolean)
}
Type_Boolean::Type_Boolean(const Type_Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Boolean)
}

void Type_Boolean::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Boolean::~Type_Boolean() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Boolean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Boolean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Boolean::ArenaDtor(void* object) {
  Type_Boolean* _this = reinterpret_cast< Type_Boolean* >(object);
  (void)_this;
}
void Type_Boolean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Boolean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Boolean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Boolean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Boolean)
  return target;
}

size_t Type_Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Boolean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Boolean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Boolean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Boolean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Boolean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Boolean)
    MergeFrom(*source);
  }
}

void Type_Boolean::MergeFrom(const Type_Boolean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Boolean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Boolean::CopyFrom(const Type_Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Boolean::IsInitialized() const {
  return true;
}

void Type_Boolean::InternalSwap(Type_Boolean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Boolean, nullability_)
      + sizeof(Type_Boolean::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Boolean, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Boolean::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[0]);
}

// ===================================================================

class Type_I8::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_I8* msg);
};

const ::io::substrait::Type_Variation&
Type_I8::_Internal::variation(const Type_I8* msg) {
  return *msg->variation_;
}
Type_I8::Type_I8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.I8)
}
Type_I8::Type_I8(const Type_I8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.I8)
}

void Type_I8::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_I8::~Type_I8() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.I8)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I8::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_I8::ArenaDtor(void* object) {
  Type_I8* _this = reinterpret_cast< Type_I8* >(object);
  (void)_this;
}
void Type_I8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_I8::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.I8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.I8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.I8)
  return target;
}

size_t Type_I8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.I8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.I8)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.I8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.I8)
    MergeFrom(*source);
  }
}

void Type_I8::MergeFrom(const Type_I8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.I8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.I8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I8::CopyFrom(const Type_I8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.I8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I8::IsInitialized() const {
  return true;
}

void Type_I8::InternalSwap(Type_I8* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I8, nullability_)
      + sizeof(Type_I8::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I8, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I8::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[1]);
}

// ===================================================================

class Type_I16::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_I16* msg);
};

const ::io::substrait::Type_Variation&
Type_I16::_Internal::variation(const Type_I16* msg) {
  return *msg->variation_;
}
Type_I16::Type_I16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.I16)
}
Type_I16::Type_I16(const Type_I16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.I16)
}

void Type_I16::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_I16::~Type_I16() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.I16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_I16::ArenaDtor(void* object) {
  Type_I16* _this = reinterpret_cast< Type_I16* >(object);
  (void)_this;
}
void Type_I16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_I16::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.I16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.I16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.I16)
  return target;
}

size_t Type_I16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.I16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.I16)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.I16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.I16)
    MergeFrom(*source);
  }
}

void Type_I16::MergeFrom(const Type_I16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.I16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.I16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I16::CopyFrom(const Type_I16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.I16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I16::IsInitialized() const {
  return true;
}

void Type_I16::InternalSwap(Type_I16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I16, nullability_)
      + sizeof(Type_I16::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I16, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I16::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[2]);
}

// ===================================================================

class Type_I32::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_I32* msg);
};

const ::io::substrait::Type_Variation&
Type_I32::_Internal::variation(const Type_I32* msg) {
  return *msg->variation_;
}
Type_I32::Type_I32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.I32)
}
Type_I32::Type_I32(const Type_I32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.I32)
}

void Type_I32::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_I32::~Type_I32() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.I32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_I32::ArenaDtor(void* object) {
  Type_I32* _this = reinterpret_cast< Type_I32* >(object);
  (void)_this;
}
void Type_I32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_I32::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.I32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.I32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.I32)
  return target;
}

size_t Type_I32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.I32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.I32)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.I32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.I32)
    MergeFrom(*source);
  }
}

void Type_I32::MergeFrom(const Type_I32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.I32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I32::CopyFrom(const Type_I32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I32::IsInitialized() const {
  return true;
}

void Type_I32::InternalSwap(Type_I32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I32, nullability_)
      + sizeof(Type_I32::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I32, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I32::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[3]);
}

// ===================================================================

class Type_I64::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_I64* msg);
};

const ::io::substrait::Type_Variation&
Type_I64::_Internal::variation(const Type_I64* msg) {
  return *msg->variation_;
}
Type_I64::Type_I64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.I64)
}
Type_I64::Type_I64(const Type_I64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.I64)
}

void Type_I64::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_I64::~Type_I64() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.I64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_I64::ArenaDtor(void* object) {
  Type_I64* _this = reinterpret_cast< Type_I64* >(object);
  (void)_this;
}
void Type_I64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_I64::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.I64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.I64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.I64)
  return target;
}

size_t Type_I64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.I64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.I64)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.I64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.I64)
    MergeFrom(*source);
  }
}

void Type_I64::MergeFrom(const Type_I64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.I64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I64::CopyFrom(const Type_I64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I64::IsInitialized() const {
  return true;
}

void Type_I64::InternalSwap(Type_I64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I64, nullability_)
      + sizeof(Type_I64::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I64, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I64::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[4]);
}

// ===================================================================

class Type_FP32::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_FP32* msg);
};

const ::io::substrait::Type_Variation&
Type_FP32::_Internal::variation(const Type_FP32* msg) {
  return *msg->variation_;
}
Type_FP32::Type_FP32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.FP32)
}
Type_FP32::Type_FP32(const Type_FP32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.FP32)
}

void Type_FP32::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_FP32::~Type_FP32() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.FP32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FP32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_FP32::ArenaDtor(void* object) {
  Type_FP32* _this = reinterpret_cast< Type_FP32* >(object);
  (void)_this;
}
void Type_FP32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FP32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_FP32::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.FP32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FP32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.FP32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.FP32)
  return target;
}

size_t Type_FP32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.FP32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FP32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.FP32)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FP32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FP32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.FP32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.FP32)
    MergeFrom(*source);
  }
}

void Type_FP32::MergeFrom(const Type_FP32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.FP32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FP32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.FP32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FP32::CopyFrom(const Type_FP32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.FP32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP32::IsInitialized() const {
  return true;
}

void Type_FP32::InternalSwap(Type_FP32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP32, nullability_)
      + sizeof(Type_FP32::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP32, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP32::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[5]);
}

// ===================================================================

class Type_FP64::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_FP64* msg);
};

const ::io::substrait::Type_Variation&
Type_FP64::_Internal::variation(const Type_FP64* msg) {
  return *msg->variation_;
}
Type_FP64::Type_FP64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.FP64)
}
Type_FP64::Type_FP64(const Type_FP64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.FP64)
}

void Type_FP64::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_FP64::~Type_FP64() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.FP64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FP64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_FP64::ArenaDtor(void* object) {
  Type_FP64* _this = reinterpret_cast< Type_FP64* >(object);
  (void)_this;
}
void Type_FP64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FP64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_FP64::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.FP64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FP64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.FP64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.FP64)
  return target;
}

size_t Type_FP64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.FP64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FP64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.FP64)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FP64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FP64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.FP64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.FP64)
    MergeFrom(*source);
  }
}

void Type_FP64::MergeFrom(const Type_FP64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.FP64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FP64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.FP64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FP64::CopyFrom(const Type_FP64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.FP64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP64::IsInitialized() const {
  return true;
}

void Type_FP64::InternalSwap(Type_FP64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP64, nullability_)
      + sizeof(Type_FP64::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP64, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP64::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[6]);
}

// ===================================================================

class Type_String::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_String* msg);
};

const ::io::substrait::Type_Variation&
Type_String::_Internal::variation(const Type_String* msg) {
  return *msg->variation_;
}
Type_String::Type_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.String)
}
Type_String::Type_String(const Type_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.String)
}

void Type_String::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_String::~Type_String() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.String)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_String::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_String::ArenaDtor(void* object) {
  Type_String* _this = reinterpret_cast< Type_String* >(object);
  (void)_this;
}
void Type_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_String::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.String)
  return target;
}

size_t Type_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.String)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.String)
    MergeFrom(*source);
  }
}

void Type_String::MergeFrom(const Type_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_String::CopyFrom(const Type_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_String::IsInitialized() const {
  return true;
}

void Type_String::InternalSwap(Type_String* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_String, nullability_)
      + sizeof(Type_String::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_String, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_String::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[7]);
}

// ===================================================================

class Type_Binary::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Binary* msg);
};

const ::io::substrait::Type_Variation&
Type_Binary::_Internal::variation(const Type_Binary* msg) {
  return *msg->variation_;
}
Type_Binary::Type_Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Binary)
}
Type_Binary::Type_Binary(const Type_Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Binary)
}

void Type_Binary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Binary::~Type_Binary() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Binary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Binary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Binary::ArenaDtor(void* object) {
  Type_Binary* _this = reinterpret_cast< Type_Binary* >(object);
  (void)_this;
}
void Type_Binary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Binary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Binary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Binary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Binary)
  return target;
}

size_t Type_Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Binary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Binary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Binary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Binary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Binary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Binary)
    MergeFrom(*source);
  }
}

void Type_Binary::MergeFrom(const Type_Binary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Binary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Binary::CopyFrom(const Type_Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Binary::IsInitialized() const {
  return true;
}

void Type_Binary::InternalSwap(Type_Binary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Binary, nullability_)
      + sizeof(Type_Binary::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Binary, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Binary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[8]);
}

// ===================================================================

class Type_Timestamp::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Timestamp* msg);
};

const ::io::substrait::Type_Variation&
Type_Timestamp::_Internal::variation(const Type_Timestamp* msg) {
  return *msg->variation_;
}
Type_Timestamp::Type_Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Timestamp)
}
Type_Timestamp::Type_Timestamp(const Type_Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Timestamp)
}

void Type_Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Timestamp::~Type_Timestamp() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Timestamp::ArenaDtor(void* object) {
  Type_Timestamp* _this = reinterpret_cast< Type_Timestamp* >(object);
  (void)_this;
}
void Type_Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Timestamp)
  return target;
}

size_t Type_Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Timestamp)
    MergeFrom(*source);
  }
}

void Type_Timestamp::MergeFrom(const Type_Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Timestamp::CopyFrom(const Type_Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Timestamp::IsInitialized() const {
  return true;
}

void Type_Timestamp::InternalSwap(Type_Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Timestamp, nullability_)
      + sizeof(Type_Timestamp::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Timestamp, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Timestamp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[9]);
}

// ===================================================================

class Type_Date::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Date* msg);
};

const ::io::substrait::Type_Variation&
Type_Date::_Internal::variation(const Type_Date* msg) {
  return *msg->variation_;
}
Type_Date::Type_Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Date)
}
Type_Date::Type_Date(const Type_Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Date)
}

void Type_Date::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Date::~Type_Date() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Date::ArenaDtor(void* object) {
  Type_Date* _this = reinterpret_cast< Type_Date* >(object);
  (void)_this;
}
void Type_Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Date::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Date)
  return target;
}

size_t Type_Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Date)
    MergeFrom(*source);
  }
}

void Type_Date::MergeFrom(const Type_Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Date::CopyFrom(const Type_Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Date::IsInitialized() const {
  return true;
}

void Type_Date::InternalSwap(Type_Date* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Date, nullability_)
      + sizeof(Type_Date::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Date, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Date::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[10]);
}

// ===================================================================

class Type_Time::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Time* msg);
};

const ::io::substrait::Type_Variation&
Type_Time::_Internal::variation(const Type_Time* msg) {
  return *msg->variation_;
}
Type_Time::Type_Time(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Time)
}
Type_Time::Type_Time(const Type_Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Time)
}

void Type_Time::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Time::~Type_Time() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Time)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Time::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Time::ArenaDtor(void* object) {
  Type_Time* _this = reinterpret_cast< Type_Time* >(object);
  (void)_this;
}
void Type_Time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Time)
  return target;
}

size_t Type_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Time::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Time* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Time)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Time)
    MergeFrom(*source);
  }
}

void Type_Time::MergeFrom(const Type_Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Time::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Time::CopyFrom(const Type_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Time::IsInitialized() const {
  return true;
}

void Type_Time::InternalSwap(Type_Time* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Time, nullability_)
      + sizeof(Type_Time::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Time, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Time::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[11]);
}

// ===================================================================

class Type_TimestampTZ::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_TimestampTZ* msg);
};

const ::io::substrait::Type_Variation&
Type_TimestampTZ::_Internal::variation(const Type_TimestampTZ* msg) {
  return *msg->variation_;
}
Type_TimestampTZ::Type_TimestampTZ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.TimestampTZ)
}
Type_TimestampTZ::Type_TimestampTZ(const Type_TimestampTZ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.TimestampTZ)
}

void Type_TimestampTZ::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_TimestampTZ::~Type_TimestampTZ() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.TimestampTZ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_TimestampTZ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_TimestampTZ::ArenaDtor(void* object) {
  Type_TimestampTZ* _this = reinterpret_cast< Type_TimestampTZ* >(object);
  (void)_this;
}
void Type_TimestampTZ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_TimestampTZ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_TimestampTZ::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.TimestampTZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_TimestampTZ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_TimestampTZ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.TimestampTZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.TimestampTZ)
  return target;
}

size_t Type_TimestampTZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.TimestampTZ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_TimestampTZ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.TimestampTZ)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_TimestampTZ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_TimestampTZ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.TimestampTZ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.TimestampTZ)
    MergeFrom(*source);
  }
}

void Type_TimestampTZ::MergeFrom(const Type_TimestampTZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.TimestampTZ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_TimestampTZ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.TimestampTZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_TimestampTZ::CopyFrom(const Type_TimestampTZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.TimestampTZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_TimestampTZ::IsInitialized() const {
  return true;
}

void Type_TimestampTZ::InternalSwap(Type_TimestampTZ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, nullability_)
      + sizeof(Type_TimestampTZ::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_TimestampTZ::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[12]);
}

// ===================================================================

class Type_IntervalYear::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_IntervalYear* msg);
};

const ::io::substrait::Type_Variation&
Type_IntervalYear::_Internal::variation(const Type_IntervalYear* msg) {
  return *msg->variation_;
}
Type_IntervalYear::Type_IntervalYear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.IntervalYear)
}
Type_IntervalYear::Type_IntervalYear(const Type_IntervalYear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.IntervalYear)
}

void Type_IntervalYear::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_IntervalYear::~Type_IntervalYear() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.IntervalYear)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_IntervalYear::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_IntervalYear::ArenaDtor(void* object) {
  Type_IntervalYear* _this = reinterpret_cast< Type_IntervalYear* >(object);
  (void)_this;
}
void Type_IntervalYear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_IntervalYear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_IntervalYear::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.IntervalYear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalYear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_IntervalYear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.IntervalYear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.IntervalYear)
  return target;
}

size_t Type_IntervalYear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.IntervalYear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_IntervalYear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.IntervalYear)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_IntervalYear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_IntervalYear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.IntervalYear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.IntervalYear)
    MergeFrom(*source);
  }
}

void Type_IntervalYear::MergeFrom(const Type_IntervalYear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.IntervalYear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_IntervalYear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.IntervalYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_IntervalYear::CopyFrom(const Type_IntervalYear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.IntervalYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalYear::IsInitialized() const {
  return true;
}

void Type_IntervalYear::InternalSwap(Type_IntervalYear* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalYear, nullability_)
      + sizeof(Type_IntervalYear::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalYear, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalYear::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[13]);
}

// ===================================================================

class Type_IntervalDay::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_IntervalDay* msg);
};

const ::io::substrait::Type_Variation&
Type_IntervalDay::_Internal::variation(const Type_IntervalDay* msg) {
  return *msg->variation_;
}
Type_IntervalDay::Type_IntervalDay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.IntervalDay)
}
Type_IntervalDay::Type_IntervalDay(const Type_IntervalDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.IntervalDay)
}

void Type_IntervalDay::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_IntervalDay::~Type_IntervalDay() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.IntervalDay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_IntervalDay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_IntervalDay::ArenaDtor(void* object) {
  Type_IntervalDay* _this = reinterpret_cast< Type_IntervalDay* >(object);
  (void)_this;
}
void Type_IntervalDay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_IntervalDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_IntervalDay::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.IntervalDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_IntervalDay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.IntervalDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.IntervalDay)
  return target;
}

size_t Type_IntervalDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.IntervalDay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_IntervalDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.IntervalDay)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_IntervalDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_IntervalDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.IntervalDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.IntervalDay)
    MergeFrom(*source);
  }
}

void Type_IntervalDay::MergeFrom(const Type_IntervalDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.IntervalDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_IntervalDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.IntervalDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_IntervalDay::CopyFrom(const Type_IntervalDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.IntervalDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalDay::IsInitialized() const {
  return true;
}

void Type_IntervalDay::InternalSwap(Type_IntervalDay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalDay, nullability_)
      + sizeof(Type_IntervalDay::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalDay, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalDay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[14]);
}

// ===================================================================

class Type_UUID::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_UUID* msg);
};

const ::io::substrait::Type_Variation&
Type_UUID::_Internal::variation(const Type_UUID* msg) {
  return *msg->variation_;
}
Type_UUID::Type_UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.UUID)
}
Type_UUID::Type_UUID(const Type_UUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.UUID)
}

void Type_UUID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_UUID::~Type_UUID() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.UUID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_UUID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_UUID::ArenaDtor(void* object) {
  Type_UUID* _this = reinterpret_cast< Type_UUID* >(object);
  (void)_this;
}
void Type_UUID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_UUID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_UUID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Variation variation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_UUID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.UUID)
  return target;
}

size_t Type_UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.UUID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 1;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_UUID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_UUID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_UUID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.UUID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.UUID)
    MergeFrom(*source);
  }
}

void Type_UUID::MergeFrom(const Type_UUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_UUID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_UUID::CopyFrom(const Type_UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_UUID::IsInitialized() const {
  return true;
}

void Type_UUID::InternalSwap(Type_UUID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_UUID, nullability_)
      + sizeof(Type_UUID::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_UUID, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_UUID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[15]);
}

// ===================================================================

class Type_FixedChar::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_FixedChar* msg);
};

const ::io::substrait::Type_Variation&
Type_FixedChar::_Internal::variation(const Type_FixedChar* msg) {
  return *msg->variation_;
}
Type_FixedChar::Type_FixedChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.FixedChar)
}
Type_FixedChar::Type_FixedChar(const Type_FixedChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.FixedChar)
}

void Type_FixedChar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_FixedChar::~Type_FixedChar() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.FixedChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FixedChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_FixedChar::ArenaDtor(void* object) {
  Type_FixedChar* _this = reinterpret_cast< Type_FixedChar* >(object);
  (void)_this;
}
void Type_FixedChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FixedChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_FixedChar::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.FixedChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FixedChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.FixedChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.FixedChar)
  return target;
}

size_t Type_FixedChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.FixedChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FixedChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.FixedChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FixedChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FixedChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.FixedChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.FixedChar)
    MergeFrom(*source);
  }
}

void Type_FixedChar::MergeFrom(const Type_FixedChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.FixedChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FixedChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.FixedChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FixedChar::CopyFrom(const Type_FixedChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.FixedChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedChar::IsInitialized() const {
  return true;
}

void Type_FixedChar::InternalSwap(Type_FixedChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedChar, nullability_)
      + sizeof(Type_FixedChar::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedChar, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedChar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[16]);
}

// ===================================================================

class Type_VarChar::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_VarChar* msg);
};

const ::io::substrait::Type_Variation&
Type_VarChar::_Internal::variation(const Type_VarChar* msg) {
  return *msg->variation_;
}
Type_VarChar::Type_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.VarChar)
}
Type_VarChar::Type_VarChar(const Type_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.VarChar)
}

void Type_VarChar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_VarChar::~Type_VarChar() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.VarChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_VarChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_VarChar::ArenaDtor(void* object) {
  Type_VarChar* _this = reinterpret_cast< Type_VarChar* >(object);
  (void)_this;
}
void Type_VarChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_VarChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_VarChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_VarChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.VarChar)
  return target;
}

size_t Type_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.VarChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_VarChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_VarChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_VarChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.VarChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.VarChar)
    MergeFrom(*source);
  }
}

void Type_VarChar::MergeFrom(const Type_VarChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_VarChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_VarChar::CopyFrom(const Type_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_VarChar::IsInitialized() const {
  return true;
}

void Type_VarChar::InternalSwap(Type_VarChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_VarChar, nullability_)
      + sizeof(Type_VarChar::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_VarChar, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_VarChar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[17]);
}

// ===================================================================

class Type_FixedBinary::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_FixedBinary* msg);
};

const ::io::substrait::Type_Variation&
Type_FixedBinary::_Internal::variation(const Type_FixedBinary* msg) {
  return *msg->variation_;
}
Type_FixedBinary::Type_FixedBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.FixedBinary)
}
Type_FixedBinary::Type_FixedBinary(const Type_FixedBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.FixedBinary)
}

void Type_FixedBinary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_FixedBinary::~Type_FixedBinary() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.FixedBinary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FixedBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_FixedBinary::ArenaDtor(void* object) {
  Type_FixedBinary* _this = reinterpret_cast< Type_FixedBinary* >(object);
  (void)_this;
}
void Type_FixedBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FixedBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_FixedBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.FixedBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FixedBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.FixedBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.FixedBinary)
  return target;
}

size_t Type_FixedBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.FixedBinary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FixedBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.FixedBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FixedBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FixedBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.FixedBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.FixedBinary)
    MergeFrom(*source);
  }
}

void Type_FixedBinary::MergeFrom(const Type_FixedBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.FixedBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FixedBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.FixedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FixedBinary::CopyFrom(const Type_FixedBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.FixedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedBinary::IsInitialized() const {
  return true;
}

void Type_FixedBinary::InternalSwap(Type_FixedBinary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedBinary, nullability_)
      + sizeof(Type_FixedBinary::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedBinary, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedBinary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[18]);
}

// ===================================================================

class Type_Decimal::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Decimal* msg);
};

const ::io::substrait::Type_Variation&
Type_Decimal::_Internal::variation(const Type_Decimal* msg) {
  return *msg->variation_;
}
Type_Decimal::Type_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Decimal)
}
Type_Decimal::Type_Decimal(const Type_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Decimal)
}

void Type_Decimal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Decimal::~Type_Decimal() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Decimal::ArenaDtor(void* object) {
  Type_Decimal* _this = reinterpret_cast< Type_Decimal* >(object);
  (void)_this;
}
void Type_Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scale(), target);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // .io.substrait.Type.Variation variation = 3;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Decimal)
  return target;
}

size_t Type_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type.Variation variation = 3;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // int32 scale = 1;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scale());
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  // .io.substrait.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Decimal)
    MergeFrom(*source);
  }
}

void Type_Decimal::MergeFrom(const Type_Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Decimal::CopyFrom(const Type_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Decimal::IsInitialized() const {
  return true;
}

void Type_Decimal::InternalSwap(Type_Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Decimal, nullability_)
      + sizeof(Type_Decimal::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Decimal, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Decimal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[19]);
}

// ===================================================================

class Type_Struct::_Internal {
 public:
  static const ::io::substrait::Type_Variation& variation(const Type_Struct* msg);
};

const ::io::substrait::Type_Variation&
Type_Struct::_Internal::variation(const Type_Struct* msg) {
  return *msg->variation_;
}
Type_Struct::Type_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Struct)
}
Type_Struct::Type_Struct(const Type_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Struct)
}

void Type_Struct::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&variation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&variation_)) + sizeof(nullability_));
}

Type_Struct::~Type_Struct() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Struct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete variation_;
}

void Type_Struct::ArenaDtor(void* object) {
  Type_Struct* _this = reinterpret_cast< Type_Struct* >(object);
  (void)_this;
}
void Type_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Type types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Struct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Type types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_types(i), target, stream);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Struct)
  return target;
}

size_t Type_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Struct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Type types = 1;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Struct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Struct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Struct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Struct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Struct)
    MergeFrom(*source);
  }
}

void Type_Struct::MergeFrom(const Type_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Struct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Struct::CopyFrom(const Type_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Struct::IsInitialized() const {
  return true;
}

void Type_Struct::InternalSwap(Type_Struct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Struct, nullability_)
      + sizeof(Type_Struct::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Struct, variation_)>(
          reinterpret_cast<char*>(&variation_),
          reinterpret_cast<char*>(&other->variation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Struct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[20]);
}

// ===================================================================

class Type_NamedStruct::_Internal {
 public:
  static const ::io::substrait::Type_Struct& struct_(const Type_NamedStruct* msg);
};

const ::io::substrait::Type_Struct&
Type_NamedStruct::_Internal::struct_(const Type_NamedStruct* msg) {
  return *msg->struct__;
}
Type_NamedStruct::Type_NamedStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.NamedStruct)
}
Type_NamedStruct::Type_NamedStruct(const Type_NamedStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_struct_()) {
    struct__ = new ::io::substrait::Type_Struct(*from.struct__);
  } else {
    struct__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.NamedStruct)
}

void Type_NamedStruct::SharedCtor() {
struct__ = nullptr;
}

Type_NamedStruct::~Type_NamedStruct() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.NamedStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_NamedStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete struct__;
}

void Type_NamedStruct::ArenaDtor(void* object) {
  Type_NamedStruct* _this = reinterpret_cast< Type_NamedStruct* >(object);
  (void)_this;
}
void Type_NamedStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_NamedStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_NamedStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.NamedStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_NamedStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Type.NamedStruct.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Struct struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_NamedStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.NamedStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Type.NamedStruct.names");
    target = stream->WriteString(1, s, target);
  }

  // .io.substrait.Type.Struct struct = 2;
  if (this->has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::struct_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.NamedStruct)
  return target;
}

size_t Type_NamedStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.NamedStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .io.substrait.Type.Struct struct = 2;
  if (this->has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_NamedStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.NamedStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_NamedStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_NamedStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.NamedStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.NamedStruct)
    MergeFrom(*source);
  }
}

void Type_NamedStruct::MergeFrom(const Type_NamedStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.NamedStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_struct_()) {
    _internal_mutable_struct_()->::io::substrait::Type_Struct::MergeFrom(from._internal_struct_());
  }
}

void Type_NamedStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.NamedStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_NamedStruct::CopyFrom(const Type_NamedStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.NamedStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_NamedStruct::IsInitialized() const {
  return true;
}

void Type_NamedStruct::InternalSwap(Type_NamedStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(struct__, other->struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_NamedStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[21]);
}

// ===================================================================

class Type_List::_Internal {
 public:
  static const ::io::substrait::Type& type(const Type_List* msg);
  static const ::io::substrait::Type_Variation& variation(const Type_List* msg);
};

const ::io::substrait::Type&
Type_List::_Internal::type(const Type_List* msg) {
  return *msg->type_;
}
const ::io::substrait::Type_Variation&
Type_List::_Internal::variation(const Type_List* msg) {
  return *msg->variation_;
}
Type_List::Type_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.List)
}
Type_List::Type_List(const Type_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::io::substrait::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.List)
}

void Type_List::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_)) + sizeof(nullability_));
}

Type_List::~Type_List() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete variation_;
}

void Type_List::ArenaDtor(void* object) {
  Type_List* _this = reinterpret_cast< Type_List* >(object);
  (void)_this;
}
void Type_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_List::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type type = 1;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.List)
  return target;
}

size_t Type_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .io.substrait.Type.Variation variation = 2;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.List)
    MergeFrom(*source);
  }
}

void Type_List::MergeFrom(const Type_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::io::substrait::Type::MergeFrom(from._internal_type());
  }
  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_List::CopyFrom(const Type_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_List::IsInitialized() const {
  return true;
}

void Type_List::InternalSwap(Type_List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_List, nullability_)
      + sizeof(Type_List::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_List, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_List::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[22]);
}

// ===================================================================

class Type_Map::_Internal {
 public:
  static const ::io::substrait::Type& key(const Type_Map* msg);
  static const ::io::substrait::Type& value(const Type_Map* msg);
  static const ::io::substrait::Type_Variation& variation(const Type_Map* msg);
};

const ::io::substrait::Type&
Type_Map::_Internal::key(const Type_Map* msg) {
  return *msg->key_;
}
const ::io::substrait::Type&
Type_Map::_Internal::value(const Type_Map* msg) {
  return *msg->value_;
}
const ::io::substrait::Type_Variation&
Type_Map::_Internal::variation(const Type_Map* msg) {
  return *msg->variation_;
}
Type_Map::Type_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Map)
}
Type_Map::Type_Map(const Type_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::io::substrait::Type(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::io::substrait::Type(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_variation()) {
    variation_ = new ::io::substrait::Type_Variation(*from.variation_);
  } else {
    variation_ = nullptr;
  }
  nullability_ = from.nullability_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Map)
}

void Type_Map::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&key_)) + sizeof(nullability_));
}

Type_Map::~Type_Map() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete variation_;
}

void Type_Map::ArenaDtor(void* object) {
  Type_Map* _this = reinterpret_cast< Type_Map* >(object);
  (void)_this;
}
void Type_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArena() == nullptr && variation_ != nullptr) {
    delete variation_;
  }
  variation_ = nullptr;
  nullability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Variation variation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Nullability nullability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::io::substrait::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .io.substrait.Type value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // .io.substrait.Type.Variation variation = 3;
  if (this->has_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::variation(this), target, stream);
  }

  // .io.substrait.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Map)
  return target;
}

size_t Type_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .io.substrait.Type value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .io.substrait.Type.Variation variation = 3;
  if (this->has_variation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variation_);
  }

  // .io.substrait.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Map)
    MergeFrom(*source);
  }
}

void Type_Map::MergeFrom(const Type_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::io::substrait::Type::MergeFrom(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::io::substrait::Type::MergeFrom(from._internal_value());
  }
  if (from.has_variation()) {
    _internal_mutable_variation()->::io::substrait::Type_Variation::MergeFrom(from._internal_variation());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Map::CopyFrom(const Type_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Map::IsInitialized() const {
  return true;
}

void Type_Map::InternalSwap(Type_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Map, nullability_)
      + sizeof(Type_Map::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Map, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Map::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[23]);
}

// ===================================================================

class Type_Variation::_Internal {
 public:
};

Type_Variation::Type_Variation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type.Variation)
}
Type_Variation::Type_Variation(const Type_Variation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  organization_ = from.organization_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type.Variation)
}

void Type_Variation::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_ = 0;
}

Type_Variation::~Type_Variation() {
  // @@protoc_insertion_point(destructor:io.substrait.Type.Variation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Variation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Type_Variation::ArenaDtor(void* object) {
  Type_Variation* _this = reinterpret_cast< Type_Variation* >(object);
  (void)_this;
}
void Type_Variation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Variation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type_Variation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type.Variation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  organization_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Variation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 organization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Type.Variation.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Variation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type.Variation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 organization = 1;
  if (this->organization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_organization(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Type.Variation.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type.Variation)
  return target;
}

size_t Type_Variation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type.Variation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 organization = 1;
  if (this->organization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_organization());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Variation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type.Variation)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Variation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Variation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type.Variation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type.Variation)
    MergeFrom(*source);
  }
}

void Type_Variation::MergeFrom(const Type_Variation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type.Variation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.organization() != 0) {
    _internal_set_organization(from._internal_organization());
  }
}

void Type_Variation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type.Variation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Variation::CopyFrom(const Type_Variation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type.Variation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Variation::IsInitialized() const {
  return true;
}

void Type_Variation::InternalSwap(Type_Variation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(organization_, other->organization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Variation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[24]);
}

// ===================================================================

class Type::_Internal {
 public:
  static const ::io::substrait::Type_Boolean& bool_(const Type* msg);
  static const ::io::substrait::Type_I8& i8(const Type* msg);
  static const ::io::substrait::Type_I16& i16(const Type* msg);
  static const ::io::substrait::Type_I32& i32(const Type* msg);
  static const ::io::substrait::Type_I64& i64(const Type* msg);
  static const ::io::substrait::Type_FP32& fp32(const Type* msg);
  static const ::io::substrait::Type_FP64& fp64(const Type* msg);
  static const ::io::substrait::Type_String& string(const Type* msg);
  static const ::io::substrait::Type_Binary& binary(const Type* msg);
  static const ::io::substrait::Type_Timestamp& timestamp(const Type* msg);
  static const ::io::substrait::Type_Date& date(const Type* msg);
  static const ::io::substrait::Type_Time& time(const Type* msg);
  static const ::io::substrait::Type_IntervalYear& interval_year(const Type* msg);
  static const ::io::substrait::Type_IntervalDay& interval_day(const Type* msg);
  static const ::io::substrait::Type_TimestampTZ& timestamp_tz(const Type* msg);
  static const ::io::substrait::Type_UUID& uuid(const Type* msg);
  static const ::io::substrait::Type_FixedChar& fixed_char(const Type* msg);
  static const ::io::substrait::Type_VarChar& varchar(const Type* msg);
  static const ::io::substrait::Type_FixedBinary& fixed_binary(const Type* msg);
  static const ::io::substrait::Type_Decimal& decimal(const Type* msg);
  static const ::io::substrait::Type_Struct& struct_(const Type* msg);
  static const ::io::substrait::Type_List& list(const Type* msg);
  static const ::io::substrait::Type_Map& map(const Type* msg);
  static const ::io::substrait::Extensions_TypeId& user_defined(const Type* msg);
};

const ::io::substrait::Type_Boolean&
Type::_Internal::bool_(const Type* msg) {
  return *msg->kind_.bool__;
}
const ::io::substrait::Type_I8&
Type::_Internal::i8(const Type* msg) {
  return *msg->kind_.i8_;
}
const ::io::substrait::Type_I16&
Type::_Internal::i16(const Type* msg) {
  return *msg->kind_.i16_;
}
const ::io::substrait::Type_I32&
Type::_Internal::i32(const Type* msg) {
  return *msg->kind_.i32_;
}
const ::io::substrait::Type_I64&
Type::_Internal::i64(const Type* msg) {
  return *msg->kind_.i64_;
}
const ::io::substrait::Type_FP32&
Type::_Internal::fp32(const Type* msg) {
  return *msg->kind_.fp32_;
}
const ::io::substrait::Type_FP64&
Type::_Internal::fp64(const Type* msg) {
  return *msg->kind_.fp64_;
}
const ::io::substrait::Type_String&
Type::_Internal::string(const Type* msg) {
  return *msg->kind_.string_;
}
const ::io::substrait::Type_Binary&
Type::_Internal::binary(const Type* msg) {
  return *msg->kind_.binary_;
}
const ::io::substrait::Type_Timestamp&
Type::_Internal::timestamp(const Type* msg) {
  return *msg->kind_.timestamp_;
}
const ::io::substrait::Type_Date&
Type::_Internal::date(const Type* msg) {
  return *msg->kind_.date_;
}
const ::io::substrait::Type_Time&
Type::_Internal::time(const Type* msg) {
  return *msg->kind_.time_;
}
const ::io::substrait::Type_IntervalYear&
Type::_Internal::interval_year(const Type* msg) {
  return *msg->kind_.interval_year_;
}
const ::io::substrait::Type_IntervalDay&
Type::_Internal::interval_day(const Type* msg) {
  return *msg->kind_.interval_day_;
}
const ::io::substrait::Type_TimestampTZ&
Type::_Internal::timestamp_tz(const Type* msg) {
  return *msg->kind_.timestamp_tz_;
}
const ::io::substrait::Type_UUID&
Type::_Internal::uuid(const Type* msg) {
  return *msg->kind_.uuid_;
}
const ::io::substrait::Type_FixedChar&
Type::_Internal::fixed_char(const Type* msg) {
  return *msg->kind_.fixed_char_;
}
const ::io::substrait::Type_VarChar&
Type::_Internal::varchar(const Type* msg) {
  return *msg->kind_.varchar_;
}
const ::io::substrait::Type_FixedBinary&
Type::_Internal::fixed_binary(const Type* msg) {
  return *msg->kind_.fixed_binary_;
}
const ::io::substrait::Type_Decimal&
Type::_Internal::decimal(const Type* msg) {
  return *msg->kind_.decimal_;
}
const ::io::substrait::Type_Struct&
Type::_Internal::struct_(const Type* msg) {
  return *msg->kind_.struct__;
}
const ::io::substrait::Type_List&
Type::_Internal::list(const Type* msg) {
  return *msg->kind_.list_;
}
const ::io::substrait::Type_Map&
Type::_Internal::map(const Type* msg) {
  return *msg->kind_.map_;
}
const ::io::substrait::Extensions_TypeId&
Type::_Internal::user_defined(const Type* msg) {
  return *msg->kind_.user_defined_;
}
void Type::set_allocated_bool_(::io::substrait::Type_Boolean* bool_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (bool_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_);
    if (message_arena != submessage_arena) {
      bool_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_, submessage_arena);
    }
    set_has_bool_();
    kind_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.bool)
}
void Type::set_allocated_i8(::io::substrait::Type_I8* i8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i8);
    if (message_arena != submessage_arena) {
      i8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i8, submessage_arena);
    }
    set_has_i8();
    kind_.i8_ = i8;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.i8)
}
void Type::set_allocated_i16(::io::substrait::Type_I16* i16) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i16) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i16);
    if (message_arena != submessage_arena) {
      i16 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i16, submessage_arena);
    }
    set_has_i16();
    kind_.i16_ = i16;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.i16)
}
void Type::set_allocated_i32(::io::substrait::Type_I32* i32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i32);
    if (message_arena != submessage_arena) {
      i32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i32, submessage_arena);
    }
    set_has_i32();
    kind_.i32_ = i32;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.i32)
}
void Type::set_allocated_i64(::io::substrait::Type_I64* i64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i64);
    if (message_arena != submessage_arena) {
      i64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i64, submessage_arena);
    }
    set_has_i64();
    kind_.i64_ = i64;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.i64)
}
void Type::set_allocated_fp32(::io::substrait::Type_FP32* fp32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fp32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fp32);
    if (message_arena != submessage_arena) {
      fp32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp32, submessage_arena);
    }
    set_has_fp32();
    kind_.fp32_ = fp32;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.fp32)
}
void Type::set_allocated_fp64(::io::substrait::Type_FP64* fp64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fp64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fp64);
    if (message_arena != submessage_arena) {
      fp64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp64, submessage_arena);
    }
    set_has_fp64();
    kind_.fp64_ = fp64;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.fp64)
}
void Type::set_allocated_string(::io::substrait::Type_String* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string);
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    kind_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.string)
}
void Type::set_allocated_binary(::io::substrait::Type_Binary* binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(binary);
    if (message_arena != submessage_arena) {
      binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary, submessage_arena);
    }
    set_has_binary();
    kind_.binary_ = binary;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.binary)
}
void Type::set_allocated_timestamp(::io::substrait::Type_Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
    kind_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.timestamp)
}
void Type::set_allocated_date(::io::substrait::Type_Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    set_has_date();
    kind_.date_ = date;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.date)
}
void Type::set_allocated_time(::io::substrait::Type_Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    kind_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.time)
}
void Type::set_allocated_interval_year(::io::substrait::Type_IntervalYear* interval_year) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (interval_year) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_year);
    if (message_arena != submessage_arena) {
      interval_year = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year, submessage_arena);
    }
    set_has_interval_year();
    kind_.interval_year_ = interval_year;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.interval_year)
}
void Type::set_allocated_interval_day(::io::substrait::Type_IntervalDay* interval_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (interval_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_day);
    if (message_arena != submessage_arena) {
      interval_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day, submessage_arena);
    }
    set_has_interval_day();
    kind_.interval_day_ = interval_day;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.interval_day)
}
void Type::set_allocated_timestamp_tz(::io::substrait::Type_TimestampTZ* timestamp_tz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (timestamp_tz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp_tz);
    if (message_arena != submessage_arena) {
      timestamp_tz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_tz, submessage_arena);
    }
    set_has_timestamp_tz();
    kind_.timestamp_tz_ = timestamp_tz;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.timestamp_tz)
}
void Type::set_allocated_uuid(::io::substrait::Type_UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    set_has_uuid();
    kind_.uuid_ = uuid;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.uuid)
}
void Type::set_allocated_fixed_char(::io::substrait::Type_FixedChar* fixed_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fixed_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_char);
    if (message_arena != submessage_arena) {
      fixed_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_char, submessage_arena);
    }
    set_has_fixed_char();
    kind_.fixed_char_ = fixed_char;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.fixed_char)
}
void Type::set_allocated_varchar(::io::substrait::Type_VarChar* varchar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (varchar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(varchar);
    if (message_arena != submessage_arena) {
      varchar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varchar, submessage_arena);
    }
    set_has_varchar();
    kind_.varchar_ = varchar;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.varchar)
}
void Type::set_allocated_fixed_binary(::io::substrait::Type_FixedBinary* fixed_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fixed_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_binary);
    if (message_arena != submessage_arena) {
      fixed_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_binary, submessage_arena);
    }
    set_has_fixed_binary();
    kind_.fixed_binary_ = fixed_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.fixed_binary)
}
void Type::set_allocated_decimal(::io::substrait::Type_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    kind_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.decimal)
}
void Type::set_allocated_struct_(::io::substrait::Type_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    kind_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.struct)
}
void Type::set_allocated_list(::io::substrait::Type_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    kind_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.list)
}
void Type::set_allocated_map(::io::substrait::Type_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    kind_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.map)
}
void Type::set_allocated_user_defined(::io::substrait::Extensions_TypeId* user_defined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (user_defined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_defined)->GetArena();
    if (message_arena != submessage_arena) {
      user_defined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined, submessage_arena);
    }
    set_has_user_defined();
    kind_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Type.user_defined)
}
void Type::clear_user_defined() {
  if (_internal_has_user_defined()) {
    if (GetArena() == nullptr) {
      delete kind_.user_defined_;
    }
    clear_has_kind();
  }
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBool: {
      _internal_mutable_bool_()->::io::substrait::Type_Boolean::MergeFrom(from._internal_bool_());
      break;
    }
    case kI8: {
      _internal_mutable_i8()->::io::substrait::Type_I8::MergeFrom(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_mutable_i16()->::io::substrait::Type_I16::MergeFrom(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::io::substrait::Type_I32::MergeFrom(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::io::substrait::Type_I64::MergeFrom(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_mutable_fp32()->::io::substrait::Type_FP32::MergeFrom(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_mutable_fp64()->::io::substrait::Type_FP64::MergeFrom(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_mutable_string()->::io::substrait::Type_String::MergeFrom(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_mutable_binary()->::io::substrait::Type_Binary::MergeFrom(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_mutable_timestamp()->::io::substrait::Type_Timestamp::MergeFrom(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_mutable_date()->::io::substrait::Type_Date::MergeFrom(from._internal_date());
      break;
    }
    case kTime: {
      _internal_mutable_time()->::io::substrait::Type_Time::MergeFrom(from._internal_time());
      break;
    }
    case kIntervalYear: {
      _internal_mutable_interval_year()->::io::substrait::Type_IntervalYear::MergeFrom(from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _internal_mutable_interval_day()->::io::substrait::Type_IntervalDay::MergeFrom(from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _internal_mutable_timestamp_tz()->::io::substrait::Type_TimestampTZ::MergeFrom(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_mutable_uuid()->::io::substrait::Type_UUID::MergeFrom(from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _internal_mutable_fixed_char()->::io::substrait::Type_FixedChar::MergeFrom(from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _internal_mutable_varchar()->::io::substrait::Type_VarChar::MergeFrom(from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _internal_mutable_fixed_binary()->::io::substrait::Type_FixedBinary::MergeFrom(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::io::substrait::Type_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Type_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Type_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Type_Map::MergeFrom(from._internal_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::io::substrait::Extensions_TypeId::MergeFrom(from._internal_user_defined());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Type)
}

void Type::SharedCtor() {
clear_has_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:io.substrait.Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Type::ArenaDtor(void* object) {
  Type* _this = reinterpret_cast< Type* >(object);
  (void)_this;
}
void Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Type::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Type)
  switch (kind_case()) {
    case kBool: {
      if (GetArena() == nullptr) {
        delete kind_.bool__;
      }
      break;
    }
    case kI8: {
      if (GetArena() == nullptr) {
        delete kind_.i8_;
      }
      break;
    }
    case kI16: {
      if (GetArena() == nullptr) {
        delete kind_.i16_;
      }
      break;
    }
    case kI32: {
      if (GetArena() == nullptr) {
        delete kind_.i32_;
      }
      break;
    }
    case kI64: {
      if (GetArena() == nullptr) {
        delete kind_.i64_;
      }
      break;
    }
    case kFp32: {
      if (GetArena() == nullptr) {
        delete kind_.fp32_;
      }
      break;
    }
    case kFp64: {
      if (GetArena() == nullptr) {
        delete kind_.fp64_;
      }
      break;
    }
    case kString: {
      if (GetArena() == nullptr) {
        delete kind_.string_;
      }
      break;
    }
    case kBinary: {
      if (GetArena() == nullptr) {
        delete kind_.binary_;
      }
      break;
    }
    case kTimestamp: {
      if (GetArena() == nullptr) {
        delete kind_.timestamp_;
      }
      break;
    }
    case kDate: {
      if (GetArena() == nullptr) {
        delete kind_.date_;
      }
      break;
    }
    case kTime: {
      if (GetArena() == nullptr) {
        delete kind_.time_;
      }
      break;
    }
    case kIntervalYear: {
      if (GetArena() == nullptr) {
        delete kind_.interval_year_;
      }
      break;
    }
    case kIntervalDay: {
      if (GetArena() == nullptr) {
        delete kind_.interval_day_;
      }
      break;
    }
    case kTimestampTz: {
      if (GetArena() == nullptr) {
        delete kind_.timestamp_tz_;
      }
      break;
    }
    case kUuid: {
      if (GetArena() == nullptr) {
        delete kind_.uuid_;
      }
      break;
    }
    case kFixedChar: {
      if (GetArena() == nullptr) {
        delete kind_.fixed_char_;
      }
      break;
    }
    case kVarchar: {
      if (GetArena() == nullptr) {
        delete kind_.varchar_;
      }
      break;
    }
    case kFixedBinary: {
      if (GetArena() == nullptr) {
        delete kind_.fixed_binary_;
      }
      break;
    }
    case kDecimal: {
      if (GetArena() == nullptr) {
        delete kind_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArena() == nullptr) {
        delete kind_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete kind_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete kind_.map_;
      }
      break;
    }
    case kUserDefined: {
      if (GetArena() == nullptr) {
        delete kind_.user_defined_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type.Boolean bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.I8 i8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_i8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.I16 i16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_i16(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.I32 i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_i32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.I64 i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_i64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.FP32 fp32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.FP64 fp64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.String string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Binary binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Timestamp timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Date date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Time time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.IntervalYear interval_year = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.IntervalDay interval_day = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.FixedChar fixed_char = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_char(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.VarChar varchar = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_varchar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.FixedBinary fixed_binary = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Decimal decimal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Struct struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.List list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.Map map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.TimestampTZ timestamp_tz = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp_tz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Extensions.TypeId user_defined = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.UUID uuid = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type.Boolean bool = 1;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bool_(this), target, stream);
  }

  // .io.substrait.Type.I8 i8 = 2;
  if (_internal_has_i8()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::i8(this), target, stream);
  }

  // .io.substrait.Type.I16 i16 = 3;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::i16(this), target, stream);
  }

  // .io.substrait.Type.I32 i32 = 5;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::i32(this), target, stream);
  }

  // .io.substrait.Type.I64 i64 = 7;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::i64(this), target, stream);
  }

  // .io.substrait.Type.FP32 fp32 = 10;
  if (_internal_has_fp32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fp32(this), target, stream);
  }

  // .io.substrait.Type.FP64 fp64 = 11;
  if (_internal_has_fp64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fp64(this), target, stream);
  }

  // .io.substrait.Type.String string = 12;
  if (_internal_has_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::string(this), target, stream);
  }

  // .io.substrait.Type.Binary binary = 13;
  if (_internal_has_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::binary(this), target, stream);
  }

  // .io.substrait.Type.Timestamp timestamp = 14;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::timestamp(this), target, stream);
  }

  // .io.substrait.Type.Date date = 16;
  if (_internal_has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::date(this), target, stream);
  }

  // .io.substrait.Type.Time time = 17;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::time(this), target, stream);
  }

  // .io.substrait.Type.IntervalYear interval_year = 19;
  if (_internal_has_interval_year()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::interval_year(this), target, stream);
  }

  // .io.substrait.Type.IntervalDay interval_day = 20;
  if (_internal_has_interval_day()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::interval_day(this), target, stream);
  }

  // .io.substrait.Type.FixedChar fixed_char = 21;
  if (_internal_has_fixed_char()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::fixed_char(this), target, stream);
  }

  // .io.substrait.Type.VarChar varchar = 22;
  if (_internal_has_varchar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::varchar(this), target, stream);
  }

  // .io.substrait.Type.FixedBinary fixed_binary = 23;
  if (_internal_has_fixed_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::fixed_binary(this), target, stream);
  }

  // .io.substrait.Type.Decimal decimal = 24;
  if (_internal_has_decimal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::decimal(this), target, stream);
  }

  // .io.substrait.Type.Struct struct = 25;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::struct_(this), target, stream);
  }

  // .io.substrait.Type.List list = 27;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::list(this), target, stream);
  }

  // .io.substrait.Type.Map map = 28;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::map(this), target, stream);
  }

  // .io.substrait.Type.TimestampTZ timestamp_tz = 29;
  if (_internal_has_timestamp_tz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::timestamp_tz(this), target, stream);
  }

  // .io.substrait.Extensions.TypeId user_defined = 31;
  if (_internal_has_user_defined()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::user_defined(this), target, stream);
  }

  // .io.substrait.Type.UUID uuid = 32;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .io.substrait.Type.Boolean bool = 1;
    case kBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.bool__);
      break;
    }
    // .io.substrait.Type.I8 i8 = 2;
    case kI8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i8_);
      break;
    }
    // .io.substrait.Type.I16 i16 = 3;
    case kI16: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i16_);
      break;
    }
    // .io.substrait.Type.I32 i32 = 5;
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i32_);
      break;
    }
    // .io.substrait.Type.I64 i64 = 7;
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i64_);
      break;
    }
    // .io.substrait.Type.FP32 fp32 = 10;
    case kFp32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fp32_);
      break;
    }
    // .io.substrait.Type.FP64 fp64 = 11;
    case kFp64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fp64_);
      break;
    }
    // .io.substrait.Type.String string = 12;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.string_);
      break;
    }
    // .io.substrait.Type.Binary binary = 13;
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.binary_);
      break;
    }
    // .io.substrait.Type.Timestamp timestamp = 14;
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.timestamp_);
      break;
    }
    // .io.substrait.Type.Date date = 16;
    case kDate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.date_);
      break;
    }
    // .io.substrait.Type.Time time = 17;
    case kTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.time_);
      break;
    }
    // .io.substrait.Type.IntervalYear interval_year = 19;
    case kIntervalYear: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.interval_year_);
      break;
    }
    // .io.substrait.Type.IntervalDay interval_day = 20;
    case kIntervalDay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.interval_day_);
      break;
    }
    // .io.substrait.Type.TimestampTZ timestamp_tz = 29;
    case kTimestampTz: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.timestamp_tz_);
      break;
    }
    // .io.substrait.Type.UUID uuid = 32;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.uuid_);
      break;
    }
    // .io.substrait.Type.FixedChar fixed_char = 21;
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fixed_char_);
      break;
    }
    // .io.substrait.Type.VarChar varchar = 22;
    case kVarchar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.varchar_);
      break;
    }
    // .io.substrait.Type.FixedBinary fixed_binary = 23;
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fixed_binary_);
      break;
    }
    // .io.substrait.Type.Decimal decimal = 24;
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.decimal_);
      break;
    }
    // .io.substrait.Type.Struct struct = 25;
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.struct__);
      break;
    }
    // .io.substrait.Type.List list = 27;
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_);
      break;
    }
    // .io.substrait.Type.Map map = 28;
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.map_);
      break;
    }
    // .io.substrait.Extensions.TypeId user_defined = 31;
    case kUserDefined: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.user_defined_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBool: {
      _internal_mutable_bool_()->::io::substrait::Type_Boolean::MergeFrom(from._internal_bool_());
      break;
    }
    case kI8: {
      _internal_mutable_i8()->::io::substrait::Type_I8::MergeFrom(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_mutable_i16()->::io::substrait::Type_I16::MergeFrom(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::io::substrait::Type_I32::MergeFrom(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::io::substrait::Type_I64::MergeFrom(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_mutable_fp32()->::io::substrait::Type_FP32::MergeFrom(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_mutable_fp64()->::io::substrait::Type_FP64::MergeFrom(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_mutable_string()->::io::substrait::Type_String::MergeFrom(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_mutable_binary()->::io::substrait::Type_Binary::MergeFrom(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_mutable_timestamp()->::io::substrait::Type_Timestamp::MergeFrom(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_mutable_date()->::io::substrait::Type_Date::MergeFrom(from._internal_date());
      break;
    }
    case kTime: {
      _internal_mutable_time()->::io::substrait::Type_Time::MergeFrom(from._internal_time());
      break;
    }
    case kIntervalYear: {
      _internal_mutable_interval_year()->::io::substrait::Type_IntervalYear::MergeFrom(from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _internal_mutable_interval_day()->::io::substrait::Type_IntervalDay::MergeFrom(from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _internal_mutable_timestamp_tz()->::io::substrait::Type_TimestampTZ::MergeFrom(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_mutable_uuid()->::io::substrait::Type_UUID::MergeFrom(from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _internal_mutable_fixed_char()->::io::substrait::Type_FixedChar::MergeFrom(from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _internal_mutable_varchar()->::io::substrait::Type_VarChar::MergeFrom(from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _internal_mutable_fixed_binary()->::io::substrait::Type_FixedBinary::MergeFrom(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::io::substrait::Type_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Type_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Type_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Type_Map::MergeFrom(from._internal_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::io::substrait::Extensions_TypeId::MergeFrom(from._internal_user_defined());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Boolean* Arena::CreateMaybeMessage< ::io::substrait::Type_Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_I8* Arena::CreateMaybeMessage< ::io::substrait::Type_I8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_I8 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_I16* Arena::CreateMaybeMessage< ::io::substrait::Type_I16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_I16 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_I32* Arena::CreateMaybeMessage< ::io::substrait::Type_I32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_I32 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_I64* Arena::CreateMaybeMessage< ::io::substrait::Type_I64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_I64 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_FP32* Arena::CreateMaybeMessage< ::io::substrait::Type_FP32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_FP32 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_FP64* Arena::CreateMaybeMessage< ::io::substrait::Type_FP64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_FP64 >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_String* Arena::CreateMaybeMessage< ::io::substrait::Type_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_String >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Binary* Arena::CreateMaybeMessage< ::io::substrait::Type_Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Timestamp* Arena::CreateMaybeMessage< ::io::substrait::Type_Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Date* Arena::CreateMaybeMessage< ::io::substrait::Type_Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Date >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Time* Arena::CreateMaybeMessage< ::io::substrait::Type_Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Time >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_TimestampTZ* Arena::CreateMaybeMessage< ::io::substrait::Type_TimestampTZ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_TimestampTZ >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_IntervalYear* Arena::CreateMaybeMessage< ::io::substrait::Type_IntervalYear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_IntervalYear >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_IntervalDay* Arena::CreateMaybeMessage< ::io::substrait::Type_IntervalDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_IntervalDay >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_UUID* Arena::CreateMaybeMessage< ::io::substrait::Type_UUID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_UUID >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_FixedChar* Arena::CreateMaybeMessage< ::io::substrait::Type_FixedChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_FixedChar >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_VarChar* Arena::CreateMaybeMessage< ::io::substrait::Type_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_FixedBinary* Arena::CreateMaybeMessage< ::io::substrait::Type_FixedBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_FixedBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Decimal* Arena::CreateMaybeMessage< ::io::substrait::Type_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Struct* Arena::CreateMaybeMessage< ::io::substrait::Type_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_NamedStruct* Arena::CreateMaybeMessage< ::io::substrait::Type_NamedStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_NamedStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_List* Arena::CreateMaybeMessage< ::io::substrait::Type_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_List >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Map* Arena::CreateMaybeMessage< ::io::substrait::Type_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type_Variation* Arena::CreateMaybeMessage< ::io::substrait::Type_Variation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type_Variation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Type* Arena::CreateMaybeMessage< ::io::substrait::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Type >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
