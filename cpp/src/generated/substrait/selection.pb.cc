// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: selection.proto

#include "selection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace substrait {
constexpr ReferenceSegment_MapKey::ReferenceSegment_MapKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , child_(nullptr){}
struct ReferenceSegment_MapKeyDefaultTypeInternal {
  constexpr ReferenceSegment_MapKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegment_MapKeyDefaultTypeInternal() {}
  union {
    ReferenceSegment_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegment_MapKeyDefaultTypeInternal _ReferenceSegment_MapKey_default_instance_;
constexpr ReferenceSegment_MapKeyExpression::ReferenceSegment_MapKeyExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_expression_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , child_(nullptr){}
struct ReferenceSegment_MapKeyExpressionDefaultTypeInternal {
  constexpr ReferenceSegment_MapKeyExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegment_MapKeyExpressionDefaultTypeInternal() {}
  union {
    ReferenceSegment_MapKeyExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegment_MapKeyExpressionDefaultTypeInternal _ReferenceSegment_MapKeyExpression_default_instance_;
constexpr ReferenceSegment_StructField::ReferenceSegment_StructField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , field_(0){}
struct ReferenceSegment_StructFieldDefaultTypeInternal {
  constexpr ReferenceSegment_StructFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegment_StructFieldDefaultTypeInternal() {}
  union {
    ReferenceSegment_StructField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegment_StructFieldDefaultTypeInternal _ReferenceSegment_StructField_default_instance_;
constexpr ReferenceSegment_ListElement::ReferenceSegment_ListElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , offset_(0){}
struct ReferenceSegment_ListElementDefaultTypeInternal {
  constexpr ReferenceSegment_ListElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegment_ListElementDefaultTypeInternal() {}
  union {
    ReferenceSegment_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegment_ListElementDefaultTypeInternal _ReferenceSegment_ListElement_default_instance_;
constexpr ReferenceSegment_ListRange::ReferenceSegment_ListRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , start_(0)
  , end_(0){}
struct ReferenceSegment_ListRangeDefaultTypeInternal {
  constexpr ReferenceSegment_ListRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegment_ListRangeDefaultTypeInternal() {}
  union {
    ReferenceSegment_ListRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegment_ListRangeDefaultTypeInternal _ReferenceSegment_ListRange_default_instance_;
constexpr ReferenceSegment::ReferenceSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ReferenceSegmentDefaultTypeInternal {
  constexpr ReferenceSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceSegmentDefaultTypeInternal() {}
  union {
    ReferenceSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceSegmentDefaultTypeInternal _ReferenceSegment_default_instance_;
constexpr MaskExpression_Select::MaskExpression_Select(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MaskExpression_SelectDefaultTypeInternal {
  constexpr MaskExpression_SelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_SelectDefaultTypeInternal() {}
  union {
    MaskExpression_Select _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_SelectDefaultTypeInternal _MaskExpression_Select_default_instance_;
constexpr MaskExpression_StructSelect::MaskExpression_StructSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : struct_items_(){}
struct MaskExpression_StructSelectDefaultTypeInternal {
  constexpr MaskExpression_StructSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_StructSelectDefaultTypeInternal() {}
  union {
    MaskExpression_StructSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_StructSelectDefaultTypeInternal _MaskExpression_StructSelect_default_instance_;
constexpr MaskExpression_StructItem::MaskExpression_StructItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , field_(0){}
struct MaskExpression_StructItemDefaultTypeInternal {
  constexpr MaskExpression_StructItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_StructItemDefaultTypeInternal() {}
  union {
    MaskExpression_StructItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_StructItemDefaultTypeInternal _MaskExpression_StructItem_default_instance_;
constexpr MaskExpression_ListSelect_ListSelectItem_ListElement::MaskExpression_ListSelect_ListSelectItem_ListElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(0){}
struct MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal {
  constexpr MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal() {}
  union {
    MaskExpression_ListSelect_ListSelectItem_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal _MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
constexpr MaskExpression_ListSelect_ListSelectItem_ListSlice::MaskExpression_ListSelect_ListSelectItem_ListSlice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0){}
struct MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal {
  constexpr MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal() {}
  union {
    MaskExpression_ListSelect_ListSelectItem_ListSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal _MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
constexpr MaskExpression_ListSelect_ListSelectItem::MaskExpression_ListSelect_ListSelectItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal {
  constexpr MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal() {}
  union {
    MaskExpression_ListSelect_ListSelectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal _MaskExpression_ListSelect_ListSelectItem_default_instance_;
constexpr MaskExpression_ListSelect::MaskExpression_ListSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_()
  , child_(nullptr){}
struct MaskExpression_ListSelectDefaultTypeInternal {
  constexpr MaskExpression_ListSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_ListSelectDefaultTypeInternal() {}
  union {
    MaskExpression_ListSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_ListSelectDefaultTypeInternal _MaskExpression_ListSelect_default_instance_;
constexpr MaskExpression_MapSelect_MapKey::MaskExpression_MapSelect_MapKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MaskExpression_MapSelect_MapKeyDefaultTypeInternal {
  constexpr MaskExpression_MapSelect_MapKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_MapSelect_MapKeyDefaultTypeInternal() {}
  union {
    MaskExpression_MapSelect_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_MapSelect_MapKeyDefaultTypeInternal _MaskExpression_MapSelect_MapKey_default_instance_;
constexpr MaskExpression_MapSelect_MapKeyExpression::MaskExpression_MapSelect_MapKeyExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_expression_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal {
  constexpr MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal() {}
  union {
    MaskExpression_MapSelect_MapKeyExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal _MaskExpression_MapSelect_MapKeyExpression_default_instance_;
constexpr MaskExpression_MapSelect::MaskExpression_MapSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , _oneof_case_{}{}
struct MaskExpression_MapSelectDefaultTypeInternal {
  constexpr MaskExpression_MapSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpression_MapSelectDefaultTypeInternal() {}
  union {
    MaskExpression_MapSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpression_MapSelectDefaultTypeInternal _MaskExpression_MapSelect_default_instance_;
constexpr MaskExpression::MaskExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_(nullptr)
  , maintain_singular_struct_(false){}
struct MaskExpressionDefaultTypeInternal {
  constexpr MaskExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskExpressionDefaultTypeInternal() {}
  union {
    MaskExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskExpressionDefaultTypeInternal _MaskExpression_default_instance_;
constexpr FieldReference::FieldReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FieldReferenceDefaultTypeInternal {
  constexpr FieldReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldReferenceDefaultTypeInternal() {}
  union {
    FieldReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldReferenceDefaultTypeInternal _FieldReference_default_instance_;
}  // namespace substrait
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_selection_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_selection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_selection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_selection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKey, map_key_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKey, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKeyExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKeyExpression, map_key_expression_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_MapKeyExpression, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_StructField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_StructField, field_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_StructField, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListElement, offset_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListElement, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListRange, start_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListRange, end_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment_ListRange, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReferenceSegment, reference_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_Select, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_Select, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_Select, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_StructSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_StructSelect, struct_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_StructItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_StructItem, field_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_StructItem, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice, start_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect_ListSelectItem, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect, selection_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_ListSelect, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect_MapKey, map_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect_MapKeyExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect_MapKeyExpression, map_key_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect, child_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression_MapSelect, select_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression, select_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::MaskExpression, maintain_singular_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FieldReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FieldReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::FieldReference, reference_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::substrait::ReferenceSegment_MapKey)},
  { 7, -1, sizeof(::io::substrait::ReferenceSegment_MapKeyExpression)},
  { 14, -1, sizeof(::io::substrait::ReferenceSegment_StructField)},
  { 21, -1, sizeof(::io::substrait::ReferenceSegment_ListElement)},
  { 28, -1, sizeof(::io::substrait::ReferenceSegment_ListRange)},
  { 36, -1, sizeof(::io::substrait::ReferenceSegment)},
  { 47, -1, sizeof(::io::substrait::MaskExpression_Select)},
  { 56, -1, sizeof(::io::substrait::MaskExpression_StructSelect)},
  { 62, -1, sizeof(::io::substrait::MaskExpression_StructItem)},
  { 69, -1, sizeof(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement)},
  { 75, -1, sizeof(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice)},
  { 82, -1, sizeof(::io::substrait::MaskExpression_ListSelect_ListSelectItem)},
  { 90, -1, sizeof(::io::substrait::MaskExpression_ListSelect)},
  { 97, -1, sizeof(::io::substrait::MaskExpression_MapSelect_MapKey)},
  { 103, -1, sizeof(::io::substrait::MaskExpression_MapSelect_MapKeyExpression)},
  { 109, -1, sizeof(::io::substrait::MaskExpression_MapSelect)},
  { 118, -1, sizeof(::io::substrait::MaskExpression)},
  { 125, -1, sizeof(::io::substrait::FieldReference)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_MapKeyExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_StructField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_ListRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReferenceSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_Select_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_StructSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_StructItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_ListSelect_ListSelectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_ListSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_MapSelect_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_MapSelect_MapKeyExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_MapSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_MaskExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_FieldReference_default_instance_),
};

const char descriptor_table_protodef_selection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017selection.proto\022\014io.substrait\"\211\006\n\020Refe"
  "renceSegment\0228\n\007map_key\030\001 \001(\0132%.io.subst"
  "rait.ReferenceSegment.MapKeyH\000\022E\n\nexpres"
  "sion\030\002 \001(\0132/.io.substrait.ReferenceSegme"
  "nt.MapKeyExpressionH\000\022B\n\014struct_field\030\003 "
  "\001(\0132*.io.substrait.ReferenceSegment.Stru"
  "ctFieldH\000\022B\n\014list_element\030\004 \001(\0132*.io.sub"
  "strait.ReferenceSegment.ListElementH\000\022>\n"
  "\nlist_range\030\005 \001(\0132(.io.substrait.Referen"
  "ceSegment.ListRangeH\000\032H\n\006MapKey\022\017\n\007map_k"
  "ey\030\001 \001(\t\022-\n\005child\030\002 \001(\0132\036.io.substrait.R"
  "eferenceSegment\032]\n\020MapKeyExpression\022\032\n\022m"
  "ap_key_expression\030\001 \001(\t\022-\n\005child\030\002 \001(\0132\036"
  ".io.substrait.ReferenceSegment\032K\n\013Struct"
  "Field\022\r\n\005field\030\001 \001(\005\022-\n\005child\030\002 \001(\0132\036.io"
  ".substrait.ReferenceSegment\032L\n\013ListEleme"
  "nt\022\016\n\006offset\030\001 \001(\005\022-\n\005child\030\002 \001(\0132\036.io.s"
  "ubstrait.ReferenceSegment\032V\n\tListRange\022\r"
  "\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\022-\n\005child\030\003 \001("
  "\0132\036.io.substrait.ReferenceSegmentB\020\n\016ref"
  "erence_type\"\210\t\n\016MaskExpression\0229\n\006select"
  "\030\001 \001(\0132).io.substrait.MaskExpression.Str"
  "uctSelect\022 \n\030maintain_singular_struct\030\002 "
  "\001(\010\032\275\001\n\006Select\022;\n\006struct\030\001 \001(\0132).io.subs"
  "trait.MaskExpression.StructSelectH\000\0227\n\004l"
  "ist\030\002 \001(\0132\'.io.substrait.MaskExpression."
  "ListSelectH\000\0225\n\003map\030\003 \001(\0132&.io.substrait"
  ".MaskExpression.MapSelectH\000B\006\n\004type\032M\n\014S"
  "tructSelect\022=\n\014struct_items\030\001 \003(\0132\'.io.s"
  "ubstrait.MaskExpression.StructItem\032O\n\nSt"
  "ructItem\022\r\n\005field\030\001 \001(\005\0222\n\005child\030\002 \001(\0132#"
  ".io.substrait.MaskExpression.Select\032\224\003\n\n"
  "ListSelect\022I\n\tselection\030\001 \003(\01326.io.subst"
  "rait.MaskExpression.ListSelect.ListSelec"
  "tItem\0222\n\005child\030\002 \001(\0132#.io.substrait.Mask"
  "Expression.Select\032\206\002\n\016ListSelectItem\022R\n\004"
  "item\030\001 \001(\0132B.io.substrait.MaskExpression"
  ".ListSelect.ListSelectItem.ListElementH\000"
  "\022Q\n\005slice\030\002 \001(\0132@.io.substrait.MaskExpre"
  "ssion.ListSelect.ListSelectItem.ListSlic"
  "eH\000\032\034\n\013ListElement\022\r\n\005field\030\001 \001(\005\032\'\n\tLis"
  "tSlice\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005B\006\n\004ty"
  "pe\032\241\002\n\tMapSelect\022<\n\003key\030\001 \001(\0132-.io.subst"
  "rait.MaskExpression.MapSelect.MapKeyH\000\022M"
  "\n\nexpression\030\002 \001(\01327.io.substrait.MaskEx"
  "pression.MapSelect.MapKeyExpressionH\000\0222\n"
  "\005child\030\003 \001(\0132#.io.substrait.MaskExpressi"
  "on.Select\032\031\n\006MapKey\022\017\n\007map_key\030\001 \001(\t\032.\n\020"
  "MapKeyExpression\022\032\n\022map_key_expression\030\001"
  " \001(\tB\010\n\006select\"\230\001\n\016FieldReference\022:\n\020dir"
  "ect_reference\030\001 \001(\0132\036.io.substrait.Refer"
  "enceSegmentH\000\0228\n\020masked_reference\030\002 \001(\0132"
  "\034.io.substrait.MaskExpressionH\000B\020\n\016refer"
  "ence_typeB\027P\001\252\002\022Substrait.Protobufb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_selection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_selection_2eproto = {
  false, false, 2162, descriptor_table_protodef_selection_2eproto, "selection.proto", 
  &descriptor_table_selection_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_selection_2eproto::offsets,
  file_level_metadata_selection_2eproto, file_level_enum_descriptors_selection_2eproto, file_level_service_descriptors_selection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_selection_2eproto_getter() {
  return &descriptor_table_selection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_selection_2eproto(&descriptor_table_selection_2eproto);
namespace io {
namespace substrait {

// ===================================================================

class ReferenceSegment_MapKey::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& child(const ReferenceSegment_MapKey* msg);
};

const ::io::substrait::ReferenceSegment&
ReferenceSegment_MapKey::_Internal::child(const ReferenceSegment_MapKey* msg) {
  return *msg->child_;
}
ReferenceSegment_MapKey::ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment.MapKey)
}
ReferenceSegment_MapKey::ReferenceSegment_MapKey(const ReferenceSegment_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key().empty()) {
    map_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key(), 
      GetArena());
  }
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment.MapKey)
}

void ReferenceSegment_MapKey::SharedCtor() {
map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
child_ = nullptr;
}

ReferenceSegment_MapKey::~ReferenceSegment_MapKey() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_;
}

void ReferenceSegment_MapKey::ArenaDtor(void* object) {
  ReferenceSegment_MapKey* _this = reinterpret_cast< ReferenceSegment_MapKey* >(object);
  (void)_this;
}
void ReferenceSegment_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_.ClearToEmpty();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.ReferenceSegment.MapKey.map_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key().data(), static_cast<int>(this->_internal_map_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.ReferenceSegment.MapKey.map_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key(), target);
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment.MapKey)
  return target;
}

size_t ReferenceSegment_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key());
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment.MapKey)
    MergeFrom(*source);
  }
}

void ReferenceSegment_MapKey::MergeFrom(const ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key().size() > 0) {
    _internal_set_map_key(from._internal_map_key());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_child());
  }
}

void ReferenceSegment_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment_MapKey::CopyFrom(const ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment_MapKey::IsInitialized() const {
  return true;
}

void ReferenceSegment_MapKey::InternalSwap(ReferenceSegment_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_.Swap(&other->map_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment_MapKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[0]);
}

// ===================================================================

class ReferenceSegment_MapKeyExpression::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& child(const ReferenceSegment_MapKeyExpression* msg);
};

const ::io::substrait::ReferenceSegment&
ReferenceSegment_MapKeyExpression::_Internal::child(const ReferenceSegment_MapKeyExpression* msg) {
  return *msg->child_;
}
ReferenceSegment_MapKeyExpression::ReferenceSegment_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment.MapKeyExpression)
}
ReferenceSegment_MapKeyExpression::ReferenceSegment_MapKeyExpression(const ReferenceSegment_MapKeyExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key_expression().empty()) {
    map_key_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key_expression(), 
      GetArena());
  }
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment.MapKeyExpression)
}

void ReferenceSegment_MapKeyExpression::SharedCtor() {
map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
child_ = nullptr;
}

ReferenceSegment_MapKeyExpression::~ReferenceSegment_MapKeyExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment.MapKeyExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment_MapKeyExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_;
}

void ReferenceSegment_MapKeyExpression::ArenaDtor(void* object) {
  ReferenceSegment_MapKeyExpression* _this = reinterpret_cast< ReferenceSegment_MapKeyExpression* >(object);
  (void)_this;
}
void ReferenceSegment_MapKeyExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment_MapKeyExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment_MapKeyExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_expression_.ClearToEmpty();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment_MapKeyExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.ReferenceSegment.MapKeyExpression.map_key_expression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment_MapKeyExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key_expression().data(), static_cast<int>(this->_internal_map_key_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.ReferenceSegment.MapKeyExpression.map_key_expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key_expression(), target);
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment.MapKeyExpression)
  return target;
}

size_t ReferenceSegment_MapKeyExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment.MapKeyExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key_expression());
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment_MapKeyExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment_MapKeyExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment_MapKeyExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment.MapKeyExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment.MapKeyExpression)
    MergeFrom(*source);
  }
}

void ReferenceSegment_MapKeyExpression::MergeFrom(const ReferenceSegment_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key_expression().size() > 0) {
    _internal_set_map_key_expression(from._internal_map_key_expression());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_child());
  }
}

void ReferenceSegment_MapKeyExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment_MapKeyExpression::CopyFrom(const ReferenceSegment_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment_MapKeyExpression::IsInitialized() const {
  return true;
}

void ReferenceSegment_MapKeyExpression::InternalSwap(ReferenceSegment_MapKeyExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_expression_.Swap(&other->map_key_expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment_MapKeyExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[1]);
}

// ===================================================================

class ReferenceSegment_StructField::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& child(const ReferenceSegment_StructField* msg);
};

const ::io::substrait::ReferenceSegment&
ReferenceSegment_StructField::_Internal::child(const ReferenceSegment_StructField* msg) {
  return *msg->child_;
}
ReferenceSegment_StructField::ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment.StructField)
}
ReferenceSegment_StructField::ReferenceSegment_StructField(const ReferenceSegment_StructField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment.StructField)
}

void ReferenceSegment_StructField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

ReferenceSegment_StructField::~ReferenceSegment_StructField() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment.StructField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment_StructField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void ReferenceSegment_StructField::ArenaDtor(void* object) {
  ReferenceSegment_StructField* _this = reinterpret_cast< ReferenceSegment_StructField* >(object);
  (void)_this;
}
void ReferenceSegment_StructField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment_StructField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment_StructField::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment_StructField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment_StructField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment.StructField)
  return target;
}

size_t ReferenceSegment_StructField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment.StructField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment_StructField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment_StructField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment_StructField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment.StructField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment.StructField)
    MergeFrom(*source);
  }
}

void ReferenceSegment_StructField::MergeFrom(const ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void ReferenceSegment_StructField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment_StructField::CopyFrom(const ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment_StructField::IsInitialized() const {
  return true;
}

void ReferenceSegment_StructField::InternalSwap(ReferenceSegment_StructField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceSegment_StructField, field_)
      + sizeof(ReferenceSegment_StructField::field_)
      - PROTOBUF_FIELD_OFFSET(ReferenceSegment_StructField, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment_StructField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[2]);
}

// ===================================================================

class ReferenceSegment_ListElement::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& child(const ReferenceSegment_ListElement* msg);
};

const ::io::substrait::ReferenceSegment&
ReferenceSegment_ListElement::_Internal::child(const ReferenceSegment_ListElement* msg) {
  return *msg->child_;
}
ReferenceSegment_ListElement::ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment.ListElement)
}
ReferenceSegment_ListElement::ReferenceSegment_ListElement(const ReferenceSegment_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment.ListElement)
}

void ReferenceSegment_ListElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&child_)) + sizeof(offset_));
}

ReferenceSegment_ListElement::~ReferenceSegment_ListElement() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void ReferenceSegment_ListElement::ArenaDtor(void* object) {
  ReferenceSegment_ListElement* _this = reinterpret_cast< ReferenceSegment_ListElement* >(object);
  (void)_this;
}
void ReferenceSegment_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment.ListElement)
  return target;
}

size_t ReferenceSegment_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment.ListElement)
    MergeFrom(*source);
  }
}

void ReferenceSegment_ListElement::MergeFrom(const ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ReferenceSegment_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment_ListElement::CopyFrom(const ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment_ListElement::IsInitialized() const {
  return true;
}

void ReferenceSegment_ListElement::InternalSwap(ReferenceSegment_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceSegment_ListElement, offset_)
      + sizeof(ReferenceSegment_ListElement::offset_)
      - PROTOBUF_FIELD_OFFSET(ReferenceSegment_ListElement, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment_ListElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[3]);
}

// ===================================================================

class ReferenceSegment_ListRange::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& child(const ReferenceSegment_ListRange* msg);
};

const ::io::substrait::ReferenceSegment&
ReferenceSegment_ListRange::_Internal::child(const ReferenceSegment_ListRange* msg) {
  return *msg->child_;
}
ReferenceSegment_ListRange::ReferenceSegment_ListRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment.ListRange)
}
ReferenceSegment_ListRange::ReferenceSegment_ListRange(const ReferenceSegment_ListRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment.ListRange)
}

void ReferenceSegment_ListRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&child_)) + sizeof(end_));
}

ReferenceSegment_ListRange::~ReferenceSegment_ListRange() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment.ListRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment_ListRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void ReferenceSegment_ListRange::ArenaDtor(void* object) {
  ReferenceSegment_ListRange* _this = reinterpret_cast< ReferenceSegment_ListRange* >(object);
  (void)_this;
}
void ReferenceSegment_ListRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment_ListRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment_ListRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment.ListRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment_ListRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment_ListRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment.ListRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  // .io.substrait.ReferenceSegment child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment.ListRange)
  return target;
}

size_t ReferenceSegment_ListRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment.ListRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.ReferenceSegment child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment_ListRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment.ListRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment_ListRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment_ListRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment.ListRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment.ListRange)
    MergeFrom(*source);
  }
}

void ReferenceSegment_ListRange::MergeFrom(const ReferenceSegment_ListRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment.ListRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void ReferenceSegment_ListRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment.ListRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment_ListRange::CopyFrom(const ReferenceSegment_ListRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment.ListRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment_ListRange::IsInitialized() const {
  return true;
}

void ReferenceSegment_ListRange::InternalSwap(ReferenceSegment_ListRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceSegment_ListRange, end_)
      + sizeof(ReferenceSegment_ListRange::end_)
      - PROTOBUF_FIELD_OFFSET(ReferenceSegment_ListRange, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment_ListRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[4]);
}

// ===================================================================

class ReferenceSegment::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment_MapKey& map_key(const ReferenceSegment* msg);
  static const ::io::substrait::ReferenceSegment_MapKeyExpression& expression(const ReferenceSegment* msg);
  static const ::io::substrait::ReferenceSegment_StructField& struct_field(const ReferenceSegment* msg);
  static const ::io::substrait::ReferenceSegment_ListElement& list_element(const ReferenceSegment* msg);
  static const ::io::substrait::ReferenceSegment_ListRange& list_range(const ReferenceSegment* msg);
};

const ::io::substrait::ReferenceSegment_MapKey&
ReferenceSegment::_Internal::map_key(const ReferenceSegment* msg) {
  return *msg->reference_type_.map_key_;
}
const ::io::substrait::ReferenceSegment_MapKeyExpression&
ReferenceSegment::_Internal::expression(const ReferenceSegment* msg) {
  return *msg->reference_type_.expression_;
}
const ::io::substrait::ReferenceSegment_StructField&
ReferenceSegment::_Internal::struct_field(const ReferenceSegment* msg) {
  return *msg->reference_type_.struct_field_;
}
const ::io::substrait::ReferenceSegment_ListElement&
ReferenceSegment::_Internal::list_element(const ReferenceSegment* msg) {
  return *msg->reference_type_.list_element_;
}
const ::io::substrait::ReferenceSegment_ListRange&
ReferenceSegment::_Internal::list_range(const ReferenceSegment* msg) {
  return *msg->reference_type_.list_range_;
}
void ReferenceSegment::set_allocated_map_key(::io::substrait::ReferenceSegment_MapKey* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    set_has_map_key();
    reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReferenceSegment.map_key)
}
void ReferenceSegment::set_allocated_expression(::io::substrait::ReferenceSegment_MapKeyExpression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    reference_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReferenceSegment.expression)
}
void ReferenceSegment::set_allocated_struct_field(::io::substrait::ReferenceSegment_StructField* struct_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (struct_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_field);
    if (message_arena != submessage_arena) {
      struct_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_field, submessage_arena);
    }
    set_has_struct_field();
    reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReferenceSegment.struct_field)
}
void ReferenceSegment::set_allocated_list_element(::io::substrait::ReferenceSegment_ListElement* list_element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (list_element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_element);
    if (message_arena != submessage_arena) {
      list_element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_element, submessage_arena);
    }
    set_has_list_element();
    reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReferenceSegment.list_element)
}
void ReferenceSegment::set_allocated_list_range(::io::substrait::ReferenceSegment_ListRange* list_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (list_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_range);
    if (message_arena != submessage_arena) {
      list_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_range, submessage_arena);
    }
    set_has_list_range();
    reference_type_.list_range_ = list_range;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReferenceSegment.list_range)
}
ReferenceSegment::ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReferenceSegment)
}
ReferenceSegment::ReferenceSegment(const ReferenceSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::io::substrait::ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::ReferenceSegment_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::io::substrait::ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::io::substrait::ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case kListRange: {
      _internal_mutable_list_range()->::io::substrait::ReferenceSegment_ListRange::MergeFrom(from._internal_list_range());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReferenceSegment)
}

void ReferenceSegment::SharedCtor() {
clear_has_reference_type();
}

ReferenceSegment::~ReferenceSegment() {
  // @@protoc_insertion_point(destructor:io.substrait.ReferenceSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
}

void ReferenceSegment::ArenaDtor(void* object) {
  ReferenceSegment* _this = reinterpret_cast< ReferenceSegment* >(object);
  (void)_this;
}
void ReferenceSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceSegment::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.ReferenceSegment)
  switch (reference_type_case()) {
    case kMapKey: {
      if (GetArena() == nullptr) {
        delete reference_type_.map_key_;
      }
      break;
    }
    case kExpression: {
      if (GetArena() == nullptr) {
        delete reference_type_.expression_;
      }
      break;
    }
    case kStructField: {
      if (GetArena() == nullptr) {
        delete reference_type_.struct_field_;
      }
      break;
    }
    case kListElement: {
      if (GetArena() == nullptr) {
        delete reference_type_.list_element_;
      }
      break;
    }
    case kListRange: {
      if (GetArena() == nullptr) {
        delete reference_type_.list_range_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}


void ReferenceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.ReferenceSegment.MapKey map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment.MapKeyExpression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment.StructField struct_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment.ListElement list_element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReferenceSegment.ListRange list_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.ReferenceSegment.MapKey map_key = 1;
  if (_internal_has_map_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_key(this), target, stream);
  }

  // .io.substrait.ReferenceSegment.MapKeyExpression expression = 2;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  // .io.substrait.ReferenceSegment.StructField struct_field = 3;
  if (_internal_has_struct_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::struct_field(this), target, stream);
  }

  // .io.substrait.ReferenceSegment.ListElement list_element = 4;
  if (_internal_has_list_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::list_element(this), target, stream);
  }

  // .io.substrait.ReferenceSegment.ListRange list_range = 5;
  if (_internal_has_list_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::list_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReferenceSegment)
  return target;
}

size_t ReferenceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReferenceSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .io.substrait.ReferenceSegment.MapKey map_key = 1;
    case kMapKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.map_key_);
      break;
    }
    // .io.substrait.ReferenceSegment.MapKeyExpression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.expression_);
      break;
    }
    // .io.substrait.ReferenceSegment.StructField struct_field = 3;
    case kStructField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.struct_field_);
      break;
    }
    // .io.substrait.ReferenceSegment.ListElement list_element = 4;
    case kListElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.list_element_);
      break;
    }
    // .io.substrait.ReferenceSegment.ListRange list_range = 5;
    case kListRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.list_range_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReferenceSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReferenceSegment)
    MergeFrom(*source);
  }
}

void ReferenceSegment::MergeFrom(const ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::io::substrait::ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::ReferenceSegment_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::io::substrait::ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::io::substrait::ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case kListRange: {
      _internal_mutable_list_range()->::io::substrait::ReferenceSegment_ListRange::MergeFrom(from._internal_list_range());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReferenceSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSegment::CopyFrom(const ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSegment::IsInitialized() const {
  return true;
}

void ReferenceSegment::InternalSwap(ReferenceSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[5]);
}

// ===================================================================

class MaskExpression_Select::_Internal {
 public:
  static const ::io::substrait::MaskExpression_StructSelect& struct_(const MaskExpression_Select* msg);
  static const ::io::substrait::MaskExpression_ListSelect& list(const MaskExpression_Select* msg);
  static const ::io::substrait::MaskExpression_MapSelect& map(const MaskExpression_Select* msg);
};

const ::io::substrait::MaskExpression_StructSelect&
MaskExpression_Select::_Internal::struct_(const MaskExpression_Select* msg) {
  return *msg->type_.struct__;
}
const ::io::substrait::MaskExpression_ListSelect&
MaskExpression_Select::_Internal::list(const MaskExpression_Select* msg) {
  return *msg->type_.list_;
}
const ::io::substrait::MaskExpression_MapSelect&
MaskExpression_Select::_Internal::map(const MaskExpression_Select* msg) {
  return *msg->type_.map_;
}
void MaskExpression_Select::set_allocated_struct_(::io::substrait::MaskExpression_StructSelect* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.Select.struct)
}
void MaskExpression_Select::set_allocated_list(::io::substrait::MaskExpression_ListSelect* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.Select.list)
}
void MaskExpression_Select::set_allocated_map(::io::substrait::MaskExpression_MapSelect* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.Select.map)
}
MaskExpression_Select::MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.Select)
}
MaskExpression_Select::MaskExpression_Select(const MaskExpression_Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.Select)
}

void MaskExpression_Select::SharedCtor() {
clear_has_type();
}

MaskExpression_Select::~MaskExpression_Select() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.Select)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_Select::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void MaskExpression_Select::ArenaDtor(void* object) {
  MaskExpression_Select* _this = reinterpret_cast< MaskExpression_Select* >(object);
  (void)_this;
}
void MaskExpression_Select::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_Select::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.MaskExpression.Select)
  switch (type_case()) {
    case kStruct: {
      if (GetArena() == nullptr) {
        delete type_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete type_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete type_.map_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void MaskExpression_Select::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_Select::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.MaskExpression.StructSelect struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.ListSelect list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.MapSelect map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_Select::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.StructSelect struct = 1;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::struct_(this), target, stream);
  }

  // .io.substrait.MaskExpression.ListSelect list = 2;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::list(this), target, stream);
  }

  // .io.substrait.MaskExpression.MapSelect map = 3;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.Select)
  return target;
}

size_t MaskExpression_Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.Select)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.substrait.MaskExpression.StructSelect struct = 1;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.struct__);
      break;
    }
    // .io.substrait.MaskExpression.ListSelect list = 2;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.list_);
      break;
    }
    // .io.substrait.MaskExpression.MapSelect map = 3;
    case kMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.map_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_Select::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_Select* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_Select>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.Select)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.Select)
    MergeFrom(*source);
  }
}

void MaskExpression_Select::MergeFrom(const MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void MaskExpression_Select::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_Select::CopyFrom(const MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_Select::IsInitialized() const {
  return true;
}

void MaskExpression_Select::InternalSwap(MaskExpression_Select* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_Select::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[6]);
}

// ===================================================================

class MaskExpression_StructSelect::_Internal {
 public:
};

MaskExpression_StructSelect::MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  struct_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.StructSelect)
}
MaskExpression_StructSelect::MaskExpression_StructSelect(const MaskExpression_StructSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      struct_items_(from.struct_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.StructSelect)
}

void MaskExpression_StructSelect::SharedCtor() {
}

MaskExpression_StructSelect::~MaskExpression_StructSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.StructSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_StructSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaskExpression_StructSelect::ArenaDtor(void* object) {
  MaskExpression_StructSelect* _this = reinterpret_cast< MaskExpression_StructSelect* >(object);
  (void)_this;
}
void MaskExpression_StructSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_StructSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_StructSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  struct_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_StructSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.MaskExpression.StructItem struct_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_struct_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_StructSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.MaskExpression.StructItem struct_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_struct_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_struct_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.StructSelect)
  return target;
}

size_t MaskExpression_StructSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.StructSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.MaskExpression.StructItem struct_items = 1;
  total_size += 1UL * this->_internal_struct_items_size();
  for (const auto& msg : this->struct_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_StructSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_StructSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_StructSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.StructSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.StructSelect)
    MergeFrom(*source);
  }
}

void MaskExpression_StructSelect::MergeFrom(const MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  struct_items_.MergeFrom(from.struct_items_);
}

void MaskExpression_StructSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_StructSelect::CopyFrom(const MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_StructSelect::IsInitialized() const {
  return true;
}

void MaskExpression_StructSelect::InternalSwap(MaskExpression_StructSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  struct_items_.InternalSwap(&other->struct_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_StructSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[7]);
}

// ===================================================================

class MaskExpression_StructItem::_Internal {
 public:
  static const ::io::substrait::MaskExpression_Select& child(const MaskExpression_StructItem* msg);
};

const ::io::substrait::MaskExpression_Select&
MaskExpression_StructItem::_Internal::child(const MaskExpression_StructItem* msg) {
  return *msg->child_;
}
MaskExpression_StructItem::MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.StructItem)
}
MaskExpression_StructItem::MaskExpression_StructItem(const MaskExpression_StructItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.StructItem)
}

void MaskExpression_StructItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

MaskExpression_StructItem::~MaskExpression_StructItem() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.StructItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_StructItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void MaskExpression_StructItem::ArenaDtor(void* object) {
  MaskExpression_StructItem* _this = reinterpret_cast< MaskExpression_StructItem* >(object);
  (void)_this;
}
void MaskExpression_StructItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_StructItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_StructItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_StructItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_StructItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .io.substrait.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.StructItem)
  return target;
}

size_t MaskExpression_StructItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.StructItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_StructItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_StructItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_StructItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.StructItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.StructItem)
    MergeFrom(*source);
  }
}

void MaskExpression_StructItem::MergeFrom(const MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::MaskExpression_Select::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void MaskExpression_StructItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_StructItem::CopyFrom(const MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_StructItem::IsInitialized() const {
  return true;
}

void MaskExpression_StructItem::InternalSwap(MaskExpression_StructItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaskExpression_StructItem, field_)
      + sizeof(MaskExpression_StructItem::field_)
      - PROTOBUF_FIELD_OFFSET(MaskExpression_StructItem, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_StructItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[8]);
}

// ===================================================================

class MaskExpression_ListSelect_ListSelectItem_ListElement::_Internal {
 public:
};

MaskExpression_ListSelect_ListSelectItem_ListElement::MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
}
MaskExpression_ListSelect_ListSelectItem_ListElement::MaskExpression_ListSelect_ListSelectItem_ListElement(const MaskExpression_ListSelect_ListSelectItem_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::SharedCtor() {
field_ = 0;
}

MaskExpression_ListSelect_ListSelectItem_ListElement::~MaskExpression_ListSelect_ListSelectItem_ListElement() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::ArenaDtor(void* object) {
  MaskExpression_ListSelect_ListSelectItem_ListElement* _this = reinterpret_cast< MaskExpression_ListSelect_ListSelectItem_ListElement* >(object);
  (void)_this;
}
void MaskExpression_ListSelect_ListSelectItem_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_ListSelect_ListSelectItem_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  return target;
}

size_t MaskExpression_ListSelect_ListSelectItem_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_ListSelect_ListSelectItem_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_ListSelect_ListSelectItem_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
    MergeFrom(*source);
  }
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_ListSelect_ListSelectItem_ListElement::IsInitialized() const {
  return true;
}

void MaskExpression_ListSelect_ListSelectItem_ListElement::InternalSwap(MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_ListSelect_ListSelectItem_ListElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[9]);
}

// ===================================================================

class MaskExpression_ListSelect_ListSelectItem_ListSlice::_Internal {
 public:
};

MaskExpression_ListSelect_ListSelectItem_ListSlice::MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}
MaskExpression_ListSelect_ListSelectItem_ListSlice::MaskExpression_ListSelect_ListSelectItem_ListSlice(const MaskExpression_ListSelect_ListSelectItem_ListSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

MaskExpression_ListSelect_ListSelectItem_ListSlice::~MaskExpression_ListSelect_ListSelectItem_ListSlice() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::ArenaDtor(void* object) {
  MaskExpression_ListSelect_ListSelectItem_ListSlice* _this = reinterpret_cast< MaskExpression_ListSelect_ListSelectItem_ListSlice* >(object);
  (void)_this;
}
void MaskExpression_ListSelect_ListSelectItem_ListSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_ListSelect_ListSelectItem_ListSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  return target;
}

size_t MaskExpression_ListSelect_ListSelectItem_ListSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_ListSelect_ListSelectItem_ListSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_ListSelect_ListSelectItem_ListSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    MergeFrom(*source);
  }
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_ListSelect_ListSelectItem_ListSlice::IsInitialized() const {
  return true;
}

void MaskExpression_ListSelect_ListSelectItem_ListSlice::InternalSwap(MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaskExpression_ListSelect_ListSelectItem_ListSlice, end_)
      + sizeof(MaskExpression_ListSelect_ListSelectItem_ListSlice::end_)
      - PROTOBUF_FIELD_OFFSET(MaskExpression_ListSelect_ListSelectItem_ListSlice, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_ListSelect_ListSelectItem_ListSlice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[10]);
}

// ===================================================================

class MaskExpression_ListSelect_ListSelectItem::_Internal {
 public:
  static const ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement& item(const MaskExpression_ListSelect_ListSelectItem* msg);
  static const ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice& slice(const MaskExpression_ListSelect_ListSelectItem* msg);
};

const ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement&
MaskExpression_ListSelect_ListSelectItem::_Internal::item(const MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.item_;
}
const ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice&
MaskExpression_ListSelect_ListSelectItem::_Internal::slice(const MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.slice_;
}
void MaskExpression_ListSelect_ListSelectItem::set_allocated_item(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    type_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.ListSelect.ListSelectItem.item)
}
void MaskExpression_ListSelect_ListSelectItem::set_allocated_slice(::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (slice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice);
    if (message_arena != submessage_arena) {
      slice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
    type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.ListSelect.ListSelectItem.slice)
}
MaskExpression_ListSelect_ListSelectItem::MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem)
}
MaskExpression_ListSelect_ListSelectItem::MaskExpression_ListSelect_ListSelectItem(const MaskExpression_ListSelect_ListSelectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.ListSelect.ListSelectItem)
}

void MaskExpression_ListSelect_ListSelectItem::SharedCtor() {
clear_has_type();
}

MaskExpression_ListSelect_ListSelectItem::~MaskExpression_ListSelect_ListSelectItem() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_ListSelect_ListSelectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void MaskExpression_ListSelect_ListSelectItem::ArenaDtor(void* object) {
  MaskExpression_ListSelect_ListSelectItem* _this = reinterpret_cast< MaskExpression_ListSelect_ListSelectItem* >(object);
  (void)_this;
}
void MaskExpression_ListSelect_ListSelectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_ListSelect_ListSelectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_ListSelect_ListSelectItem::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  switch (type_case()) {
    case kItem: {
      if (GetArena() == nullptr) {
        delete type_.item_;
      }
      break;
    }
    case kSlice: {
      if (GetArena() == nullptr) {
        delete type_.slice_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void MaskExpression_ListSelect_ListSelectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_ListSelect_ListSelectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_ListSelect_ListSelectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
  if (_internal_has_slice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  return target;
}

size_t MaskExpression_ListSelect_ListSelectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.item_);
      break;
    }
    // .io.substrait.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
    case kSlice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.slice_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_ListSelect_ListSelectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_ListSelect_ListSelectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_ListSelect_ListSelectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.ListSelect.ListSelectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.ListSelect.ListSelectItem)
    MergeFrom(*source);
  }
}

void MaskExpression_ListSelect_ListSelectItem::MergeFrom(const MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void MaskExpression_ListSelect_ListSelectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_ListSelect_ListSelectItem::CopyFrom(const MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_ListSelect_ListSelectItem::IsInitialized() const {
  return true;
}

void MaskExpression_ListSelect_ListSelectItem::InternalSwap(MaskExpression_ListSelect_ListSelectItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_ListSelect_ListSelectItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[11]);
}

// ===================================================================

class MaskExpression_ListSelect::_Internal {
 public:
  static const ::io::substrait::MaskExpression_Select& child(const MaskExpression_ListSelect* msg);
};

const ::io::substrait::MaskExpression_Select&
MaskExpression_ListSelect::_Internal::child(const MaskExpression_ListSelect* msg) {
  return *msg->child_;
}
MaskExpression_ListSelect::MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.ListSelect)
}
MaskExpression_ListSelect::MaskExpression_ListSelect(const MaskExpression_ListSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selection_(from.selection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.ListSelect)
}

void MaskExpression_ListSelect::SharedCtor() {
child_ = nullptr;
}

MaskExpression_ListSelect::~MaskExpression_ListSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.ListSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_ListSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void MaskExpression_ListSelect::ArenaDtor(void* object) {
  MaskExpression_ListSelect* _this = reinterpret_cast< MaskExpression_ListSelect* >(object);
  (void)_this;
}
void MaskExpression_ListSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_ListSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_ListSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_.Clear();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_ListSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.MaskExpression.ListSelect.ListSelectItem selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_ListSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.MaskExpression.ListSelect.ListSelectItem selection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_selection(i), target, stream);
  }

  // .io.substrait.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.ListSelect)
  return target;
}

size_t MaskExpression_ListSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.ListSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.MaskExpression.ListSelect.ListSelectItem selection = 1;
  total_size += 1UL * this->_internal_selection_size();
  for (const auto& msg : this->selection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_ListSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_ListSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_ListSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.ListSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.ListSelect)
    MergeFrom(*source);
  }
}

void MaskExpression_ListSelect::MergeFrom(const MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_.MergeFrom(from.selection_);
  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::MaskExpression_Select::MergeFrom(from._internal_child());
  }
}

void MaskExpression_ListSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_ListSelect::CopyFrom(const MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_ListSelect::IsInitialized() const {
  return true;
}

void MaskExpression_ListSelect::InternalSwap(MaskExpression_ListSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selection_.InternalSwap(&other->selection_);
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_ListSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[12]);
}

// ===================================================================

class MaskExpression_MapSelect_MapKey::_Internal {
 public:
};

MaskExpression_MapSelect_MapKey::MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.MapSelect.MapKey)
}
MaskExpression_MapSelect_MapKey::MaskExpression_MapSelect_MapKey(const MaskExpression_MapSelect_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key().empty()) {
    map_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.MapSelect.MapKey)
}

void MaskExpression_MapSelect_MapKey::SharedCtor() {
map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MaskExpression_MapSelect_MapKey::~MaskExpression_MapSelect_MapKey() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.MapSelect.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_MapSelect_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MaskExpression_MapSelect_MapKey::ArenaDtor(void* object) {
  MaskExpression_MapSelect_MapKey* _this = reinterpret_cast< MaskExpression_MapSelect_MapKey* >(object);
  (void)_this;
}
void MaskExpression_MapSelect_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_MapSelect_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_MapSelect_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_MapSelect_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.MaskExpression.MapSelect.MapKey.map_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_MapSelect_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key().data(), static_cast<int>(this->_internal_map_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.MaskExpression.MapSelect.MapKey.map_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.MapSelect.MapKey)
  return target;
}

size_t MaskExpression_MapSelect_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.MapSelect.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_MapSelect_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_MapSelect_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_MapSelect_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.MapSelect.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.MapSelect.MapKey)
    MergeFrom(*source);
  }
}

void MaskExpression_MapSelect_MapKey::MergeFrom(const MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key().size() > 0) {
    _internal_set_map_key(from._internal_map_key());
  }
}

void MaskExpression_MapSelect_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_MapSelect_MapKey::CopyFrom(const MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_MapSelect_MapKey::IsInitialized() const {
  return true;
}

void MaskExpression_MapSelect_MapKey::InternalSwap(MaskExpression_MapSelect_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_.Swap(&other->map_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_MapSelect_MapKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[13]);
}

// ===================================================================

class MaskExpression_MapSelect_MapKeyExpression::_Internal {
 public:
};

MaskExpression_MapSelect_MapKeyExpression::MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
}
MaskExpression_MapSelect_MapKeyExpression::MaskExpression_MapSelect_MapKeyExpression(const MaskExpression_MapSelect_MapKeyExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key_expression().empty()) {
    map_key_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key_expression(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
}

void MaskExpression_MapSelect_MapKeyExpression::SharedCtor() {
map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MaskExpression_MapSelect_MapKeyExpression::~MaskExpression_MapSelect_MapKeyExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_MapSelect_MapKeyExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MaskExpression_MapSelect_MapKeyExpression::ArenaDtor(void* object) {
  MaskExpression_MapSelect_MapKeyExpression* _this = reinterpret_cast< MaskExpression_MapSelect_MapKeyExpression* >(object);
  (void)_this;
}
void MaskExpression_MapSelect_MapKeyExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_MapSelect_MapKeyExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_MapSelect_MapKeyExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_expression_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_MapSelect_MapKeyExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.MaskExpression.MapSelect.MapKeyExpression.map_key_expression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_MapSelect_MapKeyExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key_expression().data(), static_cast<int>(this->_internal_map_key_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.MaskExpression.MapSelect.MapKeyExpression.map_key_expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  return target;
}

size_t MaskExpression_MapSelect_MapKeyExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key_expression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_MapSelect_MapKeyExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_MapSelect_MapKeyExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
    MergeFrom(*source);
  }
}

void MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key_expression().size() > 0) {
    _internal_set_map_key_expression(from._internal_map_key_expression());
  }
}

void MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_MapSelect_MapKeyExpression::IsInitialized() const {
  return true;
}

void MaskExpression_MapSelect_MapKeyExpression::InternalSwap(MaskExpression_MapSelect_MapKeyExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_expression_.Swap(&other->map_key_expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_MapSelect_MapKeyExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[14]);
}

// ===================================================================

class MaskExpression_MapSelect::_Internal {
 public:
  static const ::io::substrait::MaskExpression_MapSelect_MapKey& key(const MaskExpression_MapSelect* msg);
  static const ::io::substrait::MaskExpression_MapSelect_MapKeyExpression& expression(const MaskExpression_MapSelect* msg);
  static const ::io::substrait::MaskExpression_Select& child(const MaskExpression_MapSelect* msg);
};

const ::io::substrait::MaskExpression_MapSelect_MapKey&
MaskExpression_MapSelect::_Internal::key(const MaskExpression_MapSelect* msg) {
  return *msg->select_.key_;
}
const ::io::substrait::MaskExpression_MapSelect_MapKeyExpression&
MaskExpression_MapSelect::_Internal::expression(const MaskExpression_MapSelect* msg) {
  return *msg->select_.expression_;
}
const ::io::substrait::MaskExpression_Select&
MaskExpression_MapSelect::_Internal::child(const MaskExpression_MapSelect* msg) {
  return *msg->child_;
}
void MaskExpression_MapSelect::set_allocated_key(::io::substrait::MaskExpression_MapSelect_MapKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    select_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.MapSelect.key)
}
void MaskExpression_MapSelect::set_allocated_expression(::io::substrait::MaskExpression_MapSelect_MapKeyExpression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.MaskExpression.MapSelect.expression)
}
MaskExpression_MapSelect::MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression.MapSelect)
}
MaskExpression_MapSelect::MaskExpression_MapSelect(const MaskExpression_MapSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  clear_has_select();
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::io::substrait::MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression.MapSelect)
}

void MaskExpression_MapSelect::SharedCtor() {
child_ = nullptr;
clear_has_select();
}

MaskExpression_MapSelect::~MaskExpression_MapSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression.MapSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression_MapSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (has_select()) {
    clear_select();
  }
}

void MaskExpression_MapSelect::ArenaDtor(void* object) {
  MaskExpression_MapSelect* _this = reinterpret_cast< MaskExpression_MapSelect* >(object);
  (void)_this;
}
void MaskExpression_MapSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression_MapSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression_MapSelect::clear_select() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.MaskExpression.MapSelect)
  switch (select_case()) {
    case kKey: {
      if (GetArena() == nullptr) {
        delete select_.key_;
      }
      break;
    }
    case kExpression: {
      if (GetArena() == nullptr) {
        delete select_.expression_;
      }
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SELECT_NOT_SET;
}


void MaskExpression_MapSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  clear_select();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression_MapSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.MaskExpression.MapSelect.MapKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.MapSelect.MapKeyExpression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression.Select child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression_MapSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.MapSelect.MapKey key = 1;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .io.substrait.MaskExpression.MapSelect.MapKeyExpression expression = 2;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  // .io.substrait.MaskExpression.Select child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression.MapSelect)
  return target;
}

size_t MaskExpression_MapSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression.MapSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.Select child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  switch (select_case()) {
    // .io.substrait.MaskExpression.MapSelect.MapKey key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.key_);
      break;
    }
    // .io.substrait.MaskExpression.MapSelect.MapKeyExpression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.expression_);
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression_MapSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression_MapSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression_MapSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression.MapSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression.MapSelect)
    MergeFrom(*source);
  }
}

void MaskExpression_MapSelect::MergeFrom(const MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::MaskExpression_Select::MergeFrom(from._internal_child());
  }
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::io::substrait::MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
}

void MaskExpression_MapSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression_MapSelect::CopyFrom(const MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression_MapSelect::IsInitialized() const {
  return true;
}

void MaskExpression_MapSelect::InternalSwap(MaskExpression_MapSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(child_, other->child_);
  swap(select_, other->select_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression_MapSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[15]);
}

// ===================================================================

class MaskExpression::_Internal {
 public:
  static const ::io::substrait::MaskExpression_StructSelect& select(const MaskExpression* msg);
};

const ::io::substrait::MaskExpression_StructSelect&
MaskExpression::_Internal::select(const MaskExpression* msg) {
  return *msg->select_;
}
MaskExpression::MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.MaskExpression)
}
MaskExpression::MaskExpression(const MaskExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select()) {
    select_ = new ::io::substrait::MaskExpression_StructSelect(*from.select_);
  } else {
    select_ = nullptr;
  }
  maintain_singular_struct_ = from.maintain_singular_struct_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.MaskExpression)
}

void MaskExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maintain_singular_struct_) -
    reinterpret_cast<char*>(&select_)) + sizeof(maintain_singular_struct_));
}

MaskExpression::~MaskExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.MaskExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_;
}

void MaskExpression::ArenaDtor(void* object) {
  MaskExpression* _this = reinterpret_cast< MaskExpression* >(object);
  (void)_this;
}
void MaskExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_ != nullptr) {
    delete select_;
  }
  select_ = nullptr;
  maintain_singular_struct_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.MaskExpression.StructSelect select = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool maintain_singular_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maintain_singular_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select(this), target, stream);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_maintain_singular_struct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.MaskExpression)
  return target;
}

size_t MaskExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.MaskExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.MaskExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.MaskExpression)
    MergeFrom(*source);
  }
}

void MaskExpression::MergeFrom(const MaskExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select()) {
    _internal_mutable_select()->::io::substrait::MaskExpression_StructSelect::MergeFrom(from._internal_select());
  }
  if (from.maintain_singular_struct() != 0) {
    _internal_set_maintain_singular_struct(from._internal_maintain_singular_struct());
  }
}

void MaskExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskExpression::CopyFrom(const MaskExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskExpression::IsInitialized() const {
  return true;
}

void MaskExpression::InternalSwap(MaskExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaskExpression, maintain_singular_struct_)
      + sizeof(MaskExpression::maintain_singular_struct_)
      - PROTOBUF_FIELD_OFFSET(MaskExpression, select_)>(
          reinterpret_cast<char*>(&select_),
          reinterpret_cast<char*>(&other->select_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[16]);
}

// ===================================================================

class FieldReference::_Internal {
 public:
  static const ::io::substrait::ReferenceSegment& direct_reference(const FieldReference* msg);
  static const ::io::substrait::MaskExpression& masked_reference(const FieldReference* msg);
};

const ::io::substrait::ReferenceSegment&
FieldReference::_Internal::direct_reference(const FieldReference* msg) {
  return *msg->reference_type_.direct_reference_;
}
const ::io::substrait::MaskExpression&
FieldReference::_Internal::masked_reference(const FieldReference* msg) {
  return *msg->reference_type_.masked_reference_;
}
void FieldReference::set_allocated_direct_reference(::io::substrait::ReferenceSegment* direct_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (direct_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct_reference);
    if (message_arena != submessage_arena) {
      direct_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_reference, submessage_arena);
    }
    set_has_direct_reference();
    reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FieldReference.direct_reference)
}
void FieldReference::set_allocated_masked_reference(::io::substrait::MaskExpression* masked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (masked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(masked_reference);
    if (message_arena != submessage_arena) {
      masked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_reference, submessage_arena);
    }
    set_has_masked_reference();
    reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FieldReference.masked_reference)
}
FieldReference::FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.FieldReference)
}
FieldReference::FieldReference(const FieldReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::io::substrait::MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.FieldReference)
}

void FieldReference::SharedCtor() {
clear_has_reference_type();
}

FieldReference::~FieldReference() {
  // @@protoc_insertion_point(destructor:io.substrait.FieldReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
}

void FieldReference::ArenaDtor(void* object) {
  FieldReference* _this = reinterpret_cast< FieldReference* >(object);
  (void)_this;
}
void FieldReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldReference::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.FieldReference)
  switch (reference_type_case()) {
    case kDirectReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.direct_reference_;
      }
      break;
    }
    case kMaskedReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.masked_reference_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}


void FieldReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.ReferenceSegment direct_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression masked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.ReferenceSegment direct_reference = 1;
  if (_internal_has_direct_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct_reference(this), target, stream);
  }

  // .io.substrait.MaskExpression masked_reference = 2;
  if (_internal_has_masked_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::masked_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.FieldReference)
  return target;
}

size_t FieldReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.FieldReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .io.substrait.ReferenceSegment direct_reference = 1;
    case kDirectReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.direct_reference_);
      break;
    }
    // .io.substrait.MaskExpression masked_reference = 2;
    case kMaskedReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.masked_reference_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.FieldReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.FieldReference)
    MergeFrom(*source);
  }
}

void FieldReference::MergeFrom(const FieldReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::io::substrait::ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::io::substrait::MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
}

void FieldReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldReference::CopyFrom(const FieldReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldReference::IsInitialized() const {
  return true;
}

void FieldReference::InternalSwap(FieldReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_selection_2eproto_getter, &descriptor_table_selection_2eproto_once,
      file_level_metadata_selection_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment_MapKey* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment_MapKeyExpression* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment_MapKeyExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment_MapKeyExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment_StructField* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment_StructField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment_StructField >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment_ListElement* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment_ListRange* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment_ListRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment_ListRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReferenceSegment* Arena::CreateMaybeMessage< ::io::substrait::ReferenceSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReferenceSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_Select* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_Select >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_StructSelect* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_StructSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_StructSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_StructItem* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_StructItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_StructItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_ListSelect_ListSelectItem_ListSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_ListSelect_ListSelectItem* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_ListSelect_ListSelectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_ListSelect_ListSelectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_ListSelect* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_ListSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_ListSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_MapSelect_MapKey* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_MapSelect_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_MapSelect_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_MapSelect_MapKeyExpression* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_MapSelect_MapKeyExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_MapSelect_MapKeyExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression_MapSelect* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression_MapSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression_MapSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::MaskExpression* Arena::CreateMaybeMessage< ::io::substrait::MaskExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::MaskExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::FieldReference* Arena::CreateMaybeMessage< ::io::substrait::FieldReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::FieldReference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
