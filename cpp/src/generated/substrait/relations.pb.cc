// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relations.proto

#include "relations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace substrait {
constexpr RelCommon_Direct::RelCommon_Direct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RelCommon_DirectDefaultTypeInternal {
  constexpr RelCommon_DirectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_DirectDefaultTypeInternal() {}
  union {
    RelCommon_Direct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
constexpr RelCommon_Emit::RelCommon_Emit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_mapping_()
  , _output_mapping_cached_byte_size_(){}
struct RelCommon_EmitDefaultTypeInternal {
  constexpr RelCommon_EmitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_EmitDefaultTypeInternal() {}
  union {
    RelCommon_Emit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
constexpr RelCommon_Hint_Stats::RelCommon_Hint_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_count_(0)
  , record_size_(0){}
struct RelCommon_Hint_StatsDefaultTypeInternal {
  constexpr RelCommon_Hint_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_Hint_StatsDefaultTypeInternal() {}
  union {
    RelCommon_Hint_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
constexpr RelCommon_Hint_HintKeyValue::RelCommon_Hint_HintKeyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RelCommon_Hint_HintKeyValueDefaultTypeInternal {
  constexpr RelCommon_Hint_HintKeyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_Hint_HintKeyValueDefaultTypeInternal() {}
  union {
    RelCommon_Hint_HintKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_Hint_HintKeyValueDefaultTypeInternal _RelCommon_Hint_HintKeyValue_default_instance_;
constexpr RelCommon_Hint::RelCommon_Hint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hint_key_values_()
  , stats_(nullptr){}
struct RelCommon_HintDefaultTypeInternal {
  constexpr RelCommon_HintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_HintDefaultTypeInternal() {}
  union {
    RelCommon_Hint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
constexpr RelCommon_RuntimeConstraint::RelCommon_RuntimeConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RelCommon_RuntimeConstraintDefaultTypeInternal {
  constexpr RelCommon_RuntimeConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_RuntimeConstraintDefaultTypeInternal() {}
  union {
    RelCommon_RuntimeConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_RuntimeConstraintDefaultTypeInternal _RelCommon_RuntimeConstraint_default_instance_;
constexpr RelCommon::RelCommon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hint_(nullptr)
  , constraint_(nullptr)
  , _oneof_case_{}{}
struct RelCommonDefaultTypeInternal {
  constexpr RelCommonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommonDefaultTypeInternal() {}
  union {
    RelCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommonDefaultTypeInternal _RelCommon_default_instance_;
constexpr ReadRel_NamedTable::ReadRel_NamedTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_(){}
struct ReadRel_NamedTableDefaultTypeInternal {
  constexpr ReadRel_NamedTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_NamedTableDefaultTypeInternal() {}
  union {
    ReadRel_NamedTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
constexpr ReadRel_VirtualTable::ReadRel_VirtualTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct ReadRel_VirtualTableDefaultTypeInternal {
  constexpr ReadRel_VirtualTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_VirtualTableDefaultTypeInternal() {}
  union {
    ReadRel_VirtualTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
constexpr ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(0)

  , _oneof_case_{}{}
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal {
  constexpr ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
constexpr ReadRel_LocalFiles::ReadRel_LocalFiles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct ReadRel_LocalFilesDefaultTypeInternal {
  constexpr ReadRel_LocalFilesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_LocalFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
constexpr ReadRel::ReadRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , base_schema_(nullptr)
  , filter_(nullptr)
  , projection_(nullptr)
  , _oneof_case_{}{}
struct ReadRelDefaultTypeInternal {
  constexpr ReadRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRelDefaultTypeInternal() {}
  union {
    ReadRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRelDefaultTypeInternal _ReadRel_default_instance_;
constexpr ProjectRel::ProjectRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expressions_()
  , common_(nullptr)
  , input_(nullptr){}
struct ProjectRelDefaultTypeInternal {
  constexpr ProjectRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectRelDefaultTypeInternal() {}
  union {
    ProjectRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
constexpr JoinRel::JoinRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , left_(nullptr)
  , right_(nullptr)
  , expression_(nullptr)
  , post_join_filter_(nullptr)
  , type_(0)
{}
struct JoinRelDefaultTypeInternal {
  constexpr JoinRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRelDefaultTypeInternal() {}
  union {
    JoinRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRelDefaultTypeInternal _JoinRel_default_instance_;
constexpr FetchRel::FetchRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , input_(nullptr)
  , offset_(PROTOBUF_LONGLONG(0))
  , count_(PROTOBUF_LONGLONG(0)){}
struct FetchRelDefaultTypeInternal {
  constexpr FetchRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchRelDefaultTypeInternal() {}
  union {
    FetchRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchRelDefaultTypeInternal _FetchRel_default_instance_;
constexpr AggregateRel_Grouping::AggregateRel_Grouping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_fields_()
  , _input_fields_cached_byte_size_(){}
struct AggregateRel_GroupingDefaultTypeInternal {
  constexpr AggregateRel_GroupingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRel_GroupingDefaultTypeInternal() {}
  union {
    AggregateRel_Grouping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
constexpr AggregateRel_Measure::AggregateRel_Measure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measure_(nullptr){}
struct AggregateRel_MeasureDefaultTypeInternal {
  constexpr AggregateRel_MeasureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRel_MeasureDefaultTypeInternal() {}
  union {
    AggregateRel_Measure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
constexpr AggregateRel::AggregateRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupings_()
  , measures_()
  , common_(nullptr)
  , input_(nullptr)
  , phase_(0)
{}
struct AggregateRelDefaultTypeInternal {
  constexpr AggregateRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRelDefaultTypeInternal() {}
  union {
    AggregateRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
constexpr SortRel::SortRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorts_()
  , common_(nullptr)
  , input_(nullptr){}
struct SortRelDefaultTypeInternal {
  constexpr SortRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortRelDefaultTypeInternal() {}
  union {
    SortRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortRelDefaultTypeInternal _SortRel_default_instance_;
constexpr FilterRel::FilterRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , input_(nullptr)
  , condition_(nullptr){}
struct FilterRelDefaultTypeInternal {
  constexpr FilterRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterRelDefaultTypeInternal() {}
  union {
    FilterRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterRelDefaultTypeInternal _FilterRel_default_instance_;
constexpr SetRel::SetRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , common_(nullptr)
  , op_(0)
{}
struct SetRelDefaultTypeInternal {
  constexpr SetRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRelDefaultTypeInternal() {}
  union {
    SetRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRelDefaultTypeInternal _SetRel_default_instance_;
constexpr Rel::Rel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RelDefaultTypeInternal {
  constexpr RelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelDefaultTypeInternal() {}
  union {
    Rel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelDefaultTypeInternal _Rel_default_instance_;
}  // namespace substrait
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_relations_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_relations_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_relations_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_relations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Direct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Emit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Emit, output_mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_Stats, row_count_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_Stats, record_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_HintKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_HintKeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint_HintKeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint, hint_key_values_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_Hint, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon_RuntimeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon, hint_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon, constraint_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::RelCommon, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_NamedTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_NamedTable, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_VirtualTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_VirtualTable, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles_FileOrFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles_FileOrFiles, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles_FileOrFiles, format_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles_FileOrFiles, path_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel_LocalFiles, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, base_schema_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, filter_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, projection_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::ReadRel, read_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ProjectRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::ProjectRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ProjectRel, input_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::ProjectRel, expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, expression_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::JoinRel, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FetchRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FetchRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::FetchRel, input_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::FetchRel, offset_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::FetchRel, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel_Grouping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel_Grouping, input_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel_Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel_Measure, measure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, input_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, groupings_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, measures_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateRel, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortRel, input_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortRel, sorts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FilterRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::FilterRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::FilterRel, input_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::FilterRel, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SetRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SetRel, common_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::SetRel, inputs_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::SetRel, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Rel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Rel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Rel, RelType_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::substrait::RelCommon_Direct)},
  { 5, -1, sizeof(::io::substrait::RelCommon_Emit)},
  { 11, -1, sizeof(::io::substrait::RelCommon_Hint_Stats)},
  { 18, -1, sizeof(::io::substrait::RelCommon_Hint_HintKeyValue)},
  { 25, -1, sizeof(::io::substrait::RelCommon_Hint)},
  { 32, -1, sizeof(::io::substrait::RelCommon_RuntimeConstraint)},
  { 37, -1, sizeof(::io::substrait::RelCommon)},
  { 47, -1, sizeof(::io::substrait::ReadRel_NamedTable)},
  { 53, -1, sizeof(::io::substrait::ReadRel_VirtualTable)},
  { 59, -1, sizeof(::io::substrait::ReadRel_LocalFiles_FileOrFiles)},
  { 68, -1, sizeof(::io::substrait::ReadRel_LocalFiles)},
  { 74, -1, sizeof(::io::substrait::ReadRel)},
  { 87, -1, sizeof(::io::substrait::ProjectRel)},
  { 95, -1, sizeof(::io::substrait::JoinRel)},
  { 106, -1, sizeof(::io::substrait::FetchRel)},
  { 115, -1, sizeof(::io::substrait::AggregateRel_Grouping)},
  { 121, -1, sizeof(::io::substrait::AggregateRel_Measure)},
  { 127, -1, sizeof(::io::substrait::AggregateRel)},
  { 137, -1, sizeof(::io::substrait::SortRel)},
  { 145, -1, sizeof(::io::substrait::FilterRel)},
  { 153, -1, sizeof(::io::substrait::SetRel)},
  { 161, -1, sizeof(::io::substrait::Rel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_Direct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_Emit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_Hint_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_Hint_HintKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_Hint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_RuntimeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_RelCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReadRel_NamedTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReadRel_VirtualTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReadRel_LocalFiles_FileOrFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReadRel_LocalFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ReadRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_ProjectRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_JoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_FetchRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_AggregateRel_Grouping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_AggregateRel_Measure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_AggregateRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_SortRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_FilterRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_SetRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Rel_default_instance_),
};

const char descriptor_table_protodef_relations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017relations.proto\022\014io.substrait\032\ntype.pr"
  "oto\032\020expression.proto\032\017selection.proto\"\372"
  "\003\n\tRelCommon\0220\n\006direct\030\001 \001(\0132\036.io.substr"
  "ait.RelCommon.DirectH\000\022,\n\004emit\030\002 \001(\0132\034.i"
  "o.substrait.RelCommon.EmitH\000\022*\n\004hint\030\003 \001"
  "(\0132\034.io.substrait.RelCommon.Hint\022=\n\ncons"
  "traint\030\004 \001(\0132).io.substrait.RelCommon.Ru"
  "ntimeConstraint\032\010\n\006Direct\032\036\n\004Emit\022\026\n\016out"
  "put_mapping\030\001 \003(\005\032\332\001\n\004Hint\022B\n\017hint_key_v"
  "alues\030\001 \003(\0132).io.substrait.RelCommon.Hin"
  "t.HintKeyValue\0221\n\005stats\030\002 \001(\0132\".io.subst"
  "rait.RelCommon.Hint.Stats\032/\n\005Stats\022\021\n\tro"
  "w_count\030\001 \001(\001\022\023\n\013record_size\030\002 \001(\001\032*\n\014Hi"
  "ntKeyValue\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\032\023"
  "\n\021RuntimeConstraintB\006\n\004kind\"\344\005\n\007ReadRel\022"
  "\'\n\006common\030\001 \001(\0132\027.io.substrait.RelCommon"
  "\0223\n\013base_schema\030\002 \001(\0132\036.io.substrait.Typ"
  "e.NamedStruct\022(\n\006filter\030\003 \001(\0132\030.io.subst"
  "rait.Expression\0220\n\nprojection\030\004 \001(\0132\034.io"
  ".substrait.MaskExpression\022;\n\rvirtual_tab"
  "le\030\005 \001(\0132\".io.substrait.ReadRel.VirtualT"
  "ableH\000\0227\n\013local_files\030\006 \001(\0132 .io.substra"
  "it.ReadRel.LocalFilesH\000\0227\n\013named_table\030\007"
  " \001(\0132 .io.substrait.ReadRel.NamedTableH\000"
  "\032\033\n\nNamedTable\022\r\n\005names\030\001 \003(\t\032G\n\014Virtual"
  "Table\0227\n\006values\030\001 \003(\0132\'.io.substrait.Exp"
  "ression.Literal.Struct\032\374\001\n\nLocalFiles\022;\n"
  "\005items\030\001 \003(\0132,.io.substrait.ReadRel.Loca"
  "lFiles.FileOrFiles\032\260\001\n\013FileOrFiles\022\022\n\010ur"
  "i_path\030\001 \001(\tH\000\022\027\n\ruri_path_glob\030\002 \001(\tH\000\022"
  "C\n\006format\030\003 \001(\01623.io.substrait.ReadRel.L"
  "ocalFiles.FileOrFiles.Format\"\"\n\006Format\022\013"
  "\n\007UNKNOWN\020\000\022\013\n\007PARQUET\020\001B\013\n\tpath_typeB\013\n"
  "\tread_type\"\206\001\n\nProjectRel\022\'\n\006common\030\001 \001("
  "\0132\027.io.substrait.RelCommon\022 \n\005input\030\002 \001("
  "\0132\021.io.substrait.Rel\022-\n\013expressions\030\003 \003("
  "\0132\030.io.substrait.Expression\"\311\002\n\007JoinRel\022"
  "\'\n\006common\030\001 \001(\0132\027.io.substrait.RelCommon"
  "\022\037\n\004left\030\002 \001(\0132\021.io.substrait.Rel\022 \n\005rig"
  "ht\030\003 \001(\0132\021.io.substrait.Rel\022,\n\nexpressio"
  "n\030\004 \001(\0132\030.io.substrait.Expression\0222\n\020pos"
  "t_join_filter\030\005 \001(\0132\030.io.substrait.Expre"
  "ssion\022,\n\004type\030\006 \001(\0162\036.io.substrait.JoinR"
  "el.JoinType\"B\n\010JoinType\022\013\n\007UNKNOWN\020\000\022\t\n\005"
  "INNER\020\001\022\t\n\005OUTER\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004\""
  "t\n\010FetchRel\022\'\n\006common\030\001 \001(\0132\027.io.substra"
  "it.RelCommon\022 \n\005input\030\002 \001(\0132\021.io.substra"
  "it.Rel\022\016\n\006offset\030\003 \001(\003\022\r\n\005count\030\004 \001(\003\"\353\002"
  "\n\014AggregateRel\022\'\n\006common\030\001 \001(\0132\027.io.subs"
  "trait.RelCommon\022 \n\005input\030\002 \001(\0132\021.io.subs"
  "trait.Rel\0226\n\tgroupings\030\003 \003(\0132#.io.substr"
  "ait.AggregateRel.Grouping\0224\n\010measures\030\004 "
  "\003(\0132\".io.substrait.AggregateRel.Measure\022"
  "8\n\005phase\030\005 \001(\0162).io.substrait.Expression"
  ".AggregationPhase\032 \n\010Grouping\022\024\n\014input_f"
  "ields\030\001 \003(\005\032F\n\007Measure\022;\n\007measure\030\001 \001(\0132"
  "*.io.substrait.Expression.AggregateFunct"
  "ion\"\207\001\n\007SortRel\022\'\n\006common\030\001 \001(\0132\027.io.sub"
  "strait.RelCommon\022 \n\005input\030\002 \001(\0132\021.io.sub"
  "strait.Rel\0221\n\005sorts\030\003 \003(\0132\".io.substrait"
  ".Expression.SortField\"\203\001\n\tFilterRel\022\'\n\006c"
  "ommon\030\001 \001(\0132\027.io.substrait.RelCommon\022 \n\005"
  "input\030\002 \001(\0132\021.io.substrait.Rel\022+\n\tcondit"
  "ion\030\003 \001(\0132\030.io.substrait.Expression\"\222\002\n\006"
  "SetRel\022\'\n\006common\030\001 \001(\0132\027.io.substrait.Re"
  "lCommon\022!\n\006inputs\030\002 \003(\0132\021.io.substrait.R"
  "el\022&\n\002op\030\003 \001(\0162\032.io.substrait.SetRel.Set"
  "Op\"\223\001\n\005SetOp\022\013\n\007UNKNOWN\020\000\022\021\n\rMINUS_PRIMA"
  "RY\020\001\022\022\n\016MINUS_MULTISET\020\002\022\030\n\024INTERSECTION"
  "_PRIMARY\020\003\022\031\n\025INTERSECTION_MULTISET\020\004\022\022\n"
  "\016UNION_DISTINCT\020\005\022\r\n\tUNION_ALL\020\006\"\334\002\n\003Rel"
  "\022%\n\004read\030\001 \001(\0132\025.io.substrait.ReadRelH\000\022"
  ")\n\006filter\030\002 \001(\0132\027.io.substrait.FilterRel"
  "H\000\022\'\n\005fetch\030\003 \001(\0132\026.io.substrait.FetchRe"
  "lH\000\022/\n\taggregate\030\004 \001(\0132\032.io.substrait.Ag"
  "gregateRelH\000\022%\n\004sort\030\005 \001(\0132\025.io.substrai"
  "t.SortRelH\000\022%\n\004join\030\006 \001(\0132\025.io.substrait"
  ".JoinRelH\000\022+\n\007project\030\007 \001(\0132\030.io.substra"
  "it.ProjectRelH\000\022#\n\003set\030\010 \001(\0132\024.io.substr"
  "ait.SetRelH\000B\t\n\007RelTypeB\027P\001\252\002\022Substrait."
  "Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_relations_2eproto_deps[3] = {
  &::descriptor_table_expression_2eproto,
  &::descriptor_table_selection_2eproto,
  &::descriptor_table_type_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_relations_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relations_2eproto = {
  false, false, 3216, descriptor_table_protodef_relations_2eproto, "relations.proto", 
  &descriptor_table_relations_2eproto_once, descriptor_table_relations_2eproto_deps, 3, 22,
  schemas, file_default_instances, TableStruct_relations_2eproto::offsets,
  file_level_metadata_relations_2eproto, file_level_enum_descriptors_relations_2eproto, file_level_service_descriptors_relations_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_relations_2eproto_getter() {
  return &descriptor_table_relations_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_relations_2eproto(&descriptor_table_relations_2eproto);
namespace io {
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRel_LocalFiles_FileOrFiles_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relations_2eproto);
  return file_level_enum_descriptors_relations_2eproto[0];
}
bool ReadRel_LocalFiles_FileOrFiles_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::UNKNOWN;
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::PARQUET;
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::Format_MIN;
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::Format_MAX;
constexpr int ReadRel_LocalFiles_FileOrFiles::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relations_2eproto);
  return file_level_enum_descriptors_relations_2eproto[1];
}
bool JoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinRel_JoinType JoinRel::UNKNOWN;
constexpr JoinRel_JoinType JoinRel::INNER;
constexpr JoinRel_JoinType JoinRel::OUTER;
constexpr JoinRel_JoinType JoinRel::LEFT;
constexpr JoinRel_JoinType JoinRel::RIGHT;
constexpr JoinRel_JoinType JoinRel::JoinType_MIN;
constexpr JoinRel_JoinType JoinRel::JoinType_MAX;
constexpr int JoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relations_2eproto);
  return file_level_enum_descriptors_relations_2eproto[2];
}
bool SetRel_SetOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetRel_SetOp SetRel::UNKNOWN;
constexpr SetRel_SetOp SetRel::MINUS_PRIMARY;
constexpr SetRel_SetOp SetRel::MINUS_MULTISET;
constexpr SetRel_SetOp SetRel::INTERSECTION_PRIMARY;
constexpr SetRel_SetOp SetRel::INTERSECTION_MULTISET;
constexpr SetRel_SetOp SetRel::UNION_DISTINCT;
constexpr SetRel_SetOp SetRel::UNION_ALL;
constexpr SetRel_SetOp SetRel::SetOp_MIN;
constexpr SetRel_SetOp SetRel::SetOp_MAX;
constexpr int SetRel::SetOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RelCommon_Direct::_Internal {
 public:
};

RelCommon_Direct::RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.Direct)
}
RelCommon_Direct::RelCommon_Direct(const RelCommon_Direct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.Direct)
}

void RelCommon_Direct::SharedCtor() {
}

RelCommon_Direct::~RelCommon_Direct() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.Direct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Direct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_Direct::ArenaDtor(void* object) {
  RelCommon_Direct* _this = reinterpret_cast< RelCommon_Direct* >(object);
  (void)_this;
}
void RelCommon_Direct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Direct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Direct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.Direct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Direct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Direct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.Direct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.Direct)
  return target;
}

size_t RelCommon_Direct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.Direct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Direct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.Direct)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Direct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Direct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.Direct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.Direct)
    MergeFrom(*source);
  }
}

void RelCommon_Direct::MergeFrom(const RelCommon_Direct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.Direct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RelCommon_Direct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.Direct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Direct::CopyFrom(const RelCommon_Direct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.Direct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Direct::IsInitialized() const {
  return true;
}

void RelCommon_Direct::InternalSwap(RelCommon_Direct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Direct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[0]);
}

// ===================================================================

class RelCommon_Emit::_Internal {
 public:
};

RelCommon_Emit::RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.Emit)
}
RelCommon_Emit::RelCommon_Emit(const RelCommon_Emit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_mapping_(from.output_mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.Emit)
}

void RelCommon_Emit::SharedCtor() {
}

RelCommon_Emit::~RelCommon_Emit() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.Emit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Emit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_Emit::ArenaDtor(void* object) {
  RelCommon_Emit* _this = reinterpret_cast< RelCommon_Emit* >(object);
  (void)_this;
}
void RelCommon_Emit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Emit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Emit::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.Emit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_mapping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Emit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 output_mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Emit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.Emit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    int byte_size = _output_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_output_mapping(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.Emit)
  return target;
}

size_t RelCommon_Emit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.Emit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Emit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Emit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Emit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.Emit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.Emit)
    MergeFrom(*source);
  }
}

void RelCommon_Emit::MergeFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_mapping_.MergeFrom(from.output_mapping_);
}

void RelCommon_Emit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Emit::CopyFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Emit::IsInitialized() const {
  return true;
}

void RelCommon_Emit::InternalSwap(RelCommon_Emit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_mapping_.InternalSwap(&other->output_mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Emit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[1]);
}

// ===================================================================

class RelCommon_Hint_Stats::_Internal {
 public:
};

RelCommon_Hint_Stats::RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.Hint.Stats)
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_size_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.Hint.Stats)
}

void RelCommon_Hint_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_size_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
}

RelCommon_Hint_Stats::~RelCommon_Hint_Stats() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.Hint.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_Hint_Stats::ArenaDtor(void* object) {
  RelCommon_Hint_Stats* _this = reinterpret_cast< RelCommon_Hint_Stats* >(object);
  (void)_this;
}
void RelCommon_Hint_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.Hint.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_size_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double record_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          record_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.Hint.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double row_count = 1;
  if (!(this->row_count() <= 0 && this->row_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_row_count(), target);
  }

  // double record_size = 2;
  if (!(this->record_size() <= 0 && this->record_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_record_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.Hint.Stats)
  return target;
}

size_t RelCommon_Hint_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.Hint.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double row_count = 1;
  if (!(this->row_count() <= 0 && this->row_count() >= 0)) {
    total_size += 1 + 8;
  }

  // double record_size = 2;
  if (!(this->record_size() <= 0 && this->record_size() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.Hint.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.Hint.Stats)
    MergeFrom(*source);
  }
}

void RelCommon_Hint_Stats::MergeFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.row_count() <= 0 && from.row_count() >= 0)) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (!(from.record_size() <= 0 && from.record_size() >= 0)) {
    _internal_set_record_size(from._internal_record_size());
  }
}

void RelCommon_Hint_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint_Stats::CopyFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_Stats::IsInitialized() const {
  return true;
}

void RelCommon_Hint_Stats::InternalSwap(RelCommon_Hint_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, record_size_)
      + sizeof(RelCommon_Hint_Stats::record_size_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_Stats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[2]);
}

// ===================================================================

class RelCommon_Hint_HintKeyValue::_Internal {
 public:
};

RelCommon_Hint_HintKeyValue::RelCommon_Hint_HintKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.Hint.HintKeyValue)
}
RelCommon_Hint_HintKeyValue::RelCommon_Hint_HintKeyValue(const RelCommon_Hint_HintKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.Hint.HintKeyValue)
}

void RelCommon_Hint_HintKeyValue::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RelCommon_Hint_HintKeyValue::~RelCommon_Hint_HintKeyValue() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.Hint.HintKeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint_HintKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RelCommon_Hint_HintKeyValue::ArenaDtor(void* object) {
  RelCommon_Hint_HintKeyValue* _this = reinterpret_cast< RelCommon_Hint_HintKeyValue* >(object);
  (void)_this;
}
void RelCommon_Hint_HintKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_HintKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint_HintKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.Hint.HintKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_HintKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.RelCommon.Hint.HintKeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint_HintKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.Hint.HintKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.RelCommon.Hint.HintKeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.Hint.HintKeyValue)
  return target;
}

size_t RelCommon_Hint_HintKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.Hint.HintKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint_HintKeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.Hint.HintKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint_HintKeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint_HintKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.Hint.HintKeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.Hint.HintKeyValue)
    MergeFrom(*source);
  }
}

void RelCommon_Hint_HintKeyValue::MergeFrom(const RelCommon_Hint_HintKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.Hint.HintKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void RelCommon_Hint_HintKeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.Hint.HintKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint_HintKeyValue::CopyFrom(const RelCommon_Hint_HintKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.Hint.HintKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_HintKeyValue::IsInitialized() const {
  return true;
}

void RelCommon_Hint_HintKeyValue::InternalSwap(RelCommon_Hint_HintKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_HintKeyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[3]);
}

// ===================================================================

class RelCommon_Hint::_Internal {
 public:
  static const ::io::substrait::RelCommon_Hint_Stats& stats(const RelCommon_Hint* msg);
};

const ::io::substrait::RelCommon_Hint_Stats&
RelCommon_Hint::_Internal::stats(const RelCommon_Hint* msg) {
  return *msg->stats_;
}
RelCommon_Hint::RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hint_key_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.Hint)
}
RelCommon_Hint::RelCommon_Hint(const RelCommon_Hint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hint_key_values_(from.hint_key_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::io::substrait::RelCommon_Hint_Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.Hint)
}

void RelCommon_Hint::SharedCtor() {
stats_ = nullptr;
}

RelCommon_Hint::~RelCommon_Hint() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.Hint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
}

void RelCommon_Hint::ArenaDtor(void* object) {
  RelCommon_Hint* _this = reinterpret_cast< RelCommon_Hint* >(object);
  (void)_this;
}
void RelCommon_Hint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hint_key_values_.Clear();
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.RelCommon.Hint.HintKeyValue hint_key_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hint_key_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.RelCommon.Hint.Stats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.RelCommon.Hint.HintKeyValue hint_key_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hint_key_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hint_key_values(i), target, stream);
  }

  // .io.substrait.RelCommon.Hint.Stats stats = 2;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.Hint)
  return target;
}

size_t RelCommon_Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.Hint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.RelCommon.Hint.HintKeyValue hint_key_values = 1;
  total_size += 1UL * this->_internal_hint_key_values_size();
  for (const auto& msg : this->hint_key_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.RelCommon.Hint.Stats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.Hint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.Hint)
    MergeFrom(*source);
  }
}

void RelCommon_Hint::MergeFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hint_key_values_.MergeFrom(from.hint_key_values_);
  if (from.has_stats()) {
    _internal_mutable_stats()->::io::substrait::RelCommon_Hint_Stats::MergeFrom(from._internal_stats());
  }
}

void RelCommon_Hint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint::CopyFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint::IsInitialized() const {
  return true;
}

void RelCommon_Hint::InternalSwap(RelCommon_Hint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hint_key_values_.InternalSwap(&other->hint_key_values_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[4]);
}

// ===================================================================

class RelCommon_RuntimeConstraint::_Internal {
 public:
};

RelCommon_RuntimeConstraint::RelCommon_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon.RuntimeConstraint)
}
RelCommon_RuntimeConstraint::RelCommon_RuntimeConstraint(const RelCommon_RuntimeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon.RuntimeConstraint)
}

void RelCommon_RuntimeConstraint::SharedCtor() {
}

RelCommon_RuntimeConstraint::~RelCommon_RuntimeConstraint() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon.RuntimeConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_RuntimeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_RuntimeConstraint::ArenaDtor(void* object) {
  RelCommon_RuntimeConstraint* _this = reinterpret_cast< RelCommon_RuntimeConstraint* >(object);
  (void)_this;
}
void RelCommon_RuntimeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_RuntimeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_RuntimeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon.RuntimeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_RuntimeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_RuntimeConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon.RuntimeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon.RuntimeConstraint)
  return target;
}

size_t RelCommon_RuntimeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon.RuntimeConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_RuntimeConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_RuntimeConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_RuntimeConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon.RuntimeConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon.RuntimeConstraint)
    MergeFrom(*source);
  }
}

void RelCommon_RuntimeConstraint::MergeFrom(const RelCommon_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RelCommon_RuntimeConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_RuntimeConstraint::CopyFrom(const RelCommon_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_RuntimeConstraint::IsInitialized() const {
  return true;
}

void RelCommon_RuntimeConstraint::InternalSwap(RelCommon_RuntimeConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_RuntimeConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[5]);
}

// ===================================================================

class RelCommon::_Internal {
 public:
  static const ::io::substrait::RelCommon_Direct& direct(const RelCommon* msg);
  static const ::io::substrait::RelCommon_Emit& emit(const RelCommon* msg);
  static const ::io::substrait::RelCommon_Hint& hint(const RelCommon* msg);
  static const ::io::substrait::RelCommon_RuntimeConstraint& constraint(const RelCommon* msg);
};

const ::io::substrait::RelCommon_Direct&
RelCommon::_Internal::direct(const RelCommon* msg) {
  return *msg->kind_.direct_;
}
const ::io::substrait::RelCommon_Emit&
RelCommon::_Internal::emit(const RelCommon* msg) {
  return *msg->kind_.emit_;
}
const ::io::substrait::RelCommon_Hint&
RelCommon::_Internal::hint(const RelCommon* msg) {
  return *msg->hint_;
}
const ::io::substrait::RelCommon_RuntimeConstraint&
RelCommon::_Internal::constraint(const RelCommon* msg) {
  return *msg->constraint_;
}
void RelCommon::set_allocated_direct(::io::substrait::RelCommon_Direct* direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct);
    if (message_arena != submessage_arena) {
      direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct, submessage_arena);
    }
    set_has_direct();
    kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.direct)
}
void RelCommon::set_allocated_emit(::io::substrait::RelCommon_Emit* emit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (emit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emit);
    if (message_arena != submessage_arena) {
      emit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emit, submessage_arena);
    }
    set_has_emit();
    kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.emit)
}
RelCommon::RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.RelCommon)
}
RelCommon::RelCommon(const RelCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hint()) {
    hint_ = new ::io::substrait::RelCommon_Hint(*from.hint_);
  } else {
    hint_ = nullptr;
  }
  if (from._internal_has_constraint()) {
    constraint_ = new ::io::substrait::RelCommon_RuntimeConstraint(*from.constraint_);
  } else {
    constraint_ = nullptr;
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::io::substrait::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::io::substrait::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.RelCommon)
}

void RelCommon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&constraint_) -
    reinterpret_cast<char*>(&hint_)) + sizeof(constraint_));
clear_has_kind();
}

RelCommon::~RelCommon() {
  // @@protoc_insertion_point(destructor:io.substrait.RelCommon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete constraint_;
  if (has_kind()) {
    clear_kind();
  }
}

void RelCommon::ArenaDtor(void* object) {
  RelCommon* _this = reinterpret_cast< RelCommon* >(object);
  (void)_this;
}
void RelCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.RelCommon)
  switch (kind_case()) {
    case kDirect: {
      if (GetArena() == nullptr) {
        delete kind_.direct_;
      }
      break;
    }
    case kEmit: {
      if (GetArena() == nullptr) {
        delete kind_.emit_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void RelCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.RelCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
  if (GetArena() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon.Direct direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.RelCommon.Emit emit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.RelCommon.Hint hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.RelCommon.RuntimeConstraint constraint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.RelCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon.Direct direct = 1;
  if (_internal_has_direct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct(this), target, stream);
  }

  // .io.substrait.RelCommon.Emit emit = 2;
  if (_internal_has_emit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::emit(this), target, stream);
  }

  // .io.substrait.RelCommon.Hint hint = 3;
  if (this->has_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hint(this), target, stream);
  }

  // .io.substrait.RelCommon.RuntimeConstraint constraint = 4;
  if (this->has_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::constraint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.RelCommon)
  return target;
}

size_t RelCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.RelCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.RelCommon.Hint hint = 3;
  if (this->has_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hint_);
  }

  // .io.substrait.RelCommon.RuntimeConstraint constraint = 4;
  if (this->has_constraint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  switch (kind_case()) {
    // .io.substrait.RelCommon.Direct direct = 1;
    case kDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.direct_);
      break;
    }
    // .io.substrait.RelCommon.Emit emit = 2;
    case kEmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.emit_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.RelCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.RelCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.RelCommon)
    MergeFrom(*source);
  }
}

void RelCommon::MergeFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.RelCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hint()) {
    _internal_mutable_hint()->::io::substrait::RelCommon_Hint::MergeFrom(from._internal_hint());
  }
  if (from.has_constraint()) {
    _internal_mutable_constraint()->::io::substrait::RelCommon_RuntimeConstraint::MergeFrom(from._internal_constraint());
  }
  switch (from.kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::io::substrait::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::io::substrait::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void RelCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon::CopyFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon::IsInitialized() const {
  return true;
}

void RelCommon::InternalSwap(RelCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon, constraint_)
      + sizeof(RelCommon::constraint_)
      - PROTOBUF_FIELD_OFFSET(RelCommon, hint_)>(
          reinterpret_cast<char*>(&hint_),
          reinterpret_cast<char*>(&other->hint_));
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[6]);
}

// ===================================================================

class ReadRel_NamedTable::_Internal {
 public:
};

ReadRel_NamedTable::ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReadRel.NamedTable)
}
ReadRel_NamedTable::ReadRel_NamedTable(const ReadRel_NamedTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReadRel.NamedTable)
}

void ReadRel_NamedTable::SharedCtor() {
}

ReadRel_NamedTable::~ReadRel_NamedTable() {
  // @@protoc_insertion_point(destructor:io.substrait.ReadRel.NamedTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_NamedTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_NamedTable::ArenaDtor(void* object) {
  ReadRel_NamedTable* _this = reinterpret_cast< ReadRel_NamedTable* >(object);
  (void)_this;
}
void ReadRel_NamedTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_NamedTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_NamedTable::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReadRel.NamedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_NamedTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.ReadRel.NamedTable.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_NamedTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReadRel.NamedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.ReadRel.NamedTable.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReadRel.NamedTable)
  return target;
}

size_t ReadRel_NamedTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReadRel.NamedTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_NamedTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_NamedTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_NamedTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReadRel.NamedTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReadRel.NamedTable)
    MergeFrom(*source);
  }
}

void ReadRel_NamedTable::MergeFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void ReadRel_NamedTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_NamedTable::CopyFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_NamedTable::IsInitialized() const {
  return true;
}

void ReadRel_NamedTable::InternalSwap(ReadRel_NamedTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_NamedTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[7]);
}

// ===================================================================

class ReadRel_VirtualTable::_Internal {
 public:
};

void ReadRel_VirtualTable::clear_values() {
  values_.Clear();
}
ReadRel_VirtualTable::ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReadRel.VirtualTable)
}
ReadRel_VirtualTable::ReadRel_VirtualTable(const ReadRel_VirtualTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReadRel.VirtualTable)
}

void ReadRel_VirtualTable::SharedCtor() {
}

ReadRel_VirtualTable::~ReadRel_VirtualTable() {
  // @@protoc_insertion_point(destructor:io.substrait.ReadRel.VirtualTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_VirtualTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_VirtualTable::ArenaDtor(void* object) {
  ReadRel_VirtualTable* _this = reinterpret_cast< ReadRel_VirtualTable* >(object);
  (void)_this;
}
void ReadRel_VirtualTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_VirtualTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_VirtualTable::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReadRel.VirtualTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_VirtualTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.Literal.Struct values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_VirtualTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReadRel.VirtualTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal.Struct values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReadRel.VirtualTable)
  return target;
}

size_t ReadRel_VirtualTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReadRel.VirtualTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal.Struct values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_VirtualTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_VirtualTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_VirtualTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReadRel.VirtualTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReadRel.VirtualTable)
    MergeFrom(*source);
  }
}

void ReadRel_VirtualTable::MergeFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ReadRel_VirtualTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_VirtualTable::CopyFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_VirtualTable::IsInitialized() const {
  return true;
}

void ReadRel_VirtualTable::InternalSwap(ReadRel_VirtualTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_VirtualTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[8]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReadRel.LocalFiles.FileOrFiles)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_ = from.format_;
  clear_has_path_type();
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReadRel.LocalFiles.FileOrFiles)
}

void ReadRel_LocalFiles_FileOrFiles::SharedCtor() {
format_ = 0;
clear_has_path_type();
}

ReadRel_LocalFiles_FileOrFiles::~ReadRel_LocalFiles_FileOrFiles() {
  // @@protoc_insertion_point(destructor:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_path_type()) {
    clear_path_type();
  }
}

void ReadRel_LocalFiles_FileOrFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_LocalFiles_FileOrFiles::clear_path_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  switch (path_type_case()) {
    case kUriPath: {
      path_type_.uri_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kUriPathGlob: {
      path_type_.uri_path_glob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}


void ReadRel_LocalFiles_FileOrFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_ = 0;
  clear_path_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri_path_glob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uri_path_glob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReadRel.LocalFiles.FileOrFiles.Format format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri_path = 1;
  if (_internal_has_uri_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path().data(), static_cast<int>(this->_internal_uri_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri_path(), target);
  }

  // string uri_path_glob = 2;
  if (_internal_has_uri_path_glob()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path_glob().data(), static_cast<int>(this->_internal_uri_path_glob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri_path_glob(), target);
  }

  // .io.substrait.ReadRel.LocalFiles.FileOrFiles.Format format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.ReadRel.LocalFiles.FileOrFiles.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  switch (path_type_case()) {
    // string uri_path = 1;
    case kUriPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path());
      break;
    }
    // string uri_path_glob = 2;
    case kUriPathGlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path_glob());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReadRel.LocalFiles.FileOrFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReadRel.LocalFiles.FileOrFiles)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles::MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles::InternalSwap(ReadRel_LocalFiles_FileOrFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(format_, other->format_);
  swap(path_type_, other->path_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[9]);
}

// ===================================================================

class ReadRel_LocalFiles::_Internal {
 public:
};

ReadRel_LocalFiles::ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReadRel.LocalFiles)
}
ReadRel_LocalFiles::ReadRel_LocalFiles(const ReadRel_LocalFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReadRel.LocalFiles)
}

void ReadRel_LocalFiles::SharedCtor() {
}

ReadRel_LocalFiles::~ReadRel_LocalFiles() {
  // @@protoc_insertion_point(destructor:io.substrait.ReadRel.LocalFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_LocalFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles* _this = reinterpret_cast< ReadRel_LocalFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_LocalFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReadRel.LocalFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReadRel.LocalFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReadRel.LocalFiles)
  return target;
}

size_t ReadRel_LocalFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReadRel.LocalFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReadRel.LocalFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReadRel.LocalFiles)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles::MergeFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ReadRel_LocalFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles::CopyFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles::InternalSwap(ReadRel_LocalFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[10]);
}

// ===================================================================

class ReadRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const ReadRel* msg);
  static const ::io::substrait::Type_NamedStruct& base_schema(const ReadRel* msg);
  static const ::io::substrait::Expression& filter(const ReadRel* msg);
  static const ::io::substrait::MaskExpression& projection(const ReadRel* msg);
  static const ::io::substrait::ReadRel_VirtualTable& virtual_table(const ReadRel* msg);
  static const ::io::substrait::ReadRel_LocalFiles& local_files(const ReadRel* msg);
  static const ::io::substrait::ReadRel_NamedTable& named_table(const ReadRel* msg);
};

const ::io::substrait::RelCommon&
ReadRel::_Internal::common(const ReadRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Type_NamedStruct&
ReadRel::_Internal::base_schema(const ReadRel* msg) {
  return *msg->base_schema_;
}
const ::io::substrait::Expression&
ReadRel::_Internal::filter(const ReadRel* msg) {
  return *msg->filter_;
}
const ::io::substrait::MaskExpression&
ReadRel::_Internal::projection(const ReadRel* msg) {
  return *msg->projection_;
}
const ::io::substrait::ReadRel_VirtualTable&
ReadRel::_Internal::virtual_table(const ReadRel* msg) {
  return *msg->read_type_.virtual_table_;
}
const ::io::substrait::ReadRel_LocalFiles&
ReadRel::_Internal::local_files(const ReadRel* msg) {
  return *msg->read_type_.local_files_;
}
const ::io::substrait::ReadRel_NamedTable&
ReadRel::_Internal::named_table(const ReadRel* msg) {
  return *msg->read_type_.named_table_;
}
void ReadRel::clear_base_schema() {
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
}
void ReadRel::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
void ReadRel::clear_projection() {
  if (GetArena() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
}
void ReadRel::set_allocated_virtual_table(::io::substrait::ReadRel_VirtualTable* virtual_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (virtual_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtual_table);
    if (message_arena != submessage_arena) {
      virtual_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_table, submessage_arena);
    }
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.virtual_table)
}
void ReadRel::set_allocated_local_files(::io::substrait::ReadRel_LocalFiles* local_files) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (local_files) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_files);
    if (message_arena != submessage_arena) {
      local_files = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_files, submessage_arena);
    }
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.local_files)
}
void ReadRel::set_allocated_named_table(::io::substrait::ReadRel_NamedTable* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.named_table)
}
ReadRel::ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ReadRel)
}
ReadRel::ReadRel(const ReadRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_base_schema()) {
    base_schema_ = new ::io::substrait::Type_NamedStruct(*from.base_schema_);
  } else {
    base_schema_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::io::substrait::Expression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_projection()) {
    projection_ = new ::io::substrait::MaskExpression(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  clear_has_read_type();
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::io::substrait::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::io::substrait::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::io::substrait::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ReadRel)
}

void ReadRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&projection_) -
    reinterpret_cast<char*>(&common_)) + sizeof(projection_));
clear_has_read_type();
}

ReadRel::~ReadRel() {
  // @@protoc_insertion_point(destructor:io.substrait.ReadRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete base_schema_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete projection_;
  if (has_read_type()) {
    clear_read_type();
  }
}

void ReadRel::ArenaDtor(void* object) {
  ReadRel* _this = reinterpret_cast< ReadRel* >(object);
  (void)_this;
}
void ReadRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel::clear_read_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.ReadRel)
  switch (read_type_case()) {
    case kVirtualTable: {
      if (GetArena() == nullptr) {
        delete read_type_.virtual_table_;
      }
      break;
    }
    case kLocalFiles: {
      if (GetArena() == nullptr) {
        delete read_type_.local_files_;
      }
      break;
    }
    case kNamedTable: {
      if (GetArena() == nullptr) {
        delete read_type_.named_table_;
      }
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}


void ReadRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ReadRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArena() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
  clear_read_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type.NamedStruct base_schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.MaskExpression projection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReadRel.VirtualTable virtual_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReadRel.LocalFiles local_files = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_files(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ReadRel.NamedTable named_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ReadRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Type.NamedStruct base_schema = 2;
  if (this->has_base_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base_schema(this), target, stream);
  }

  // .io.substrait.Expression filter = 3;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filter(this), target, stream);
  }

  // .io.substrait.MaskExpression projection = 4;
  if (this->has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::projection(this), target, stream);
  }

  // .io.substrait.ReadRel.VirtualTable virtual_table = 5;
  if (_internal_has_virtual_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::virtual_table(this), target, stream);
  }

  // .io.substrait.ReadRel.LocalFiles local_files = 6;
  if (_internal_has_local_files()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::local_files(this), target, stream);
  }

  // .io.substrait.ReadRel.NamedTable named_table = 7;
  if (_internal_has_named_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::named_table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ReadRel)
  return target;
}

size_t ReadRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ReadRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Type.NamedStruct base_schema = 2;
  if (this->has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_schema_);
  }

  // .io.substrait.Expression filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .io.substrait.MaskExpression projection = 4;
  if (this->has_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  switch (read_type_case()) {
    // .io.substrait.ReadRel.VirtualTable virtual_table = 5;
    case kVirtualTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.virtual_table_);
      break;
    }
    // .io.substrait.ReadRel.LocalFiles local_files = 6;
    case kLocalFiles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.local_files_);
      break;
    }
    // .io.substrait.ReadRel.NamedTable named_table = 7;
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.named_table_);
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ReadRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ReadRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ReadRel)
    MergeFrom(*source);
  }
}

void ReadRel::MergeFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ReadRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_base_schema()) {
    _internal_mutable_base_schema()->::io::substrait::Type_NamedStruct::MergeFrom(from._internal_base_schema());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::io::substrait::Expression::MergeFrom(from._internal_filter());
  }
  if (from.has_projection()) {
    _internal_mutable_projection()->::io::substrait::MaskExpression::MergeFrom(from._internal_projection());
  }
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::io::substrait::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::io::substrait::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::io::substrait::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReadRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel::CopyFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel::IsInitialized() const {
  return true;
}

void ReadRel::InternalSwap(ReadRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel, projection_)
      + sizeof(ReadRel::projection_)
      - PROTOBUF_FIELD_OFFSET(ReadRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
  swap(read_type_, other->read_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[11]);
}

// ===================================================================

class ProjectRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const ProjectRel* msg);
  static const ::io::substrait::Rel& input(const ProjectRel* msg);
};

const ::io::substrait::RelCommon&
ProjectRel::_Internal::common(const ProjectRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
ProjectRel::_Internal::input(const ProjectRel* msg) {
  return *msg->input_;
}
void ProjectRel::clear_expressions() {
  expressions_.Clear();
}
ProjectRel::ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  expressions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.ProjectRel)
}
ProjectRel::ProjectRel(const ProjectRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expressions_(from.expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.ProjectRel)
}

void ProjectRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&common_)) + sizeof(input_));
}

ProjectRel::~ProjectRel() {
  // @@protoc_insertion_point(destructor:io.substrait.ProjectRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
}

void ProjectRel::ArenaDtor(void* object) {
  ProjectRel* _this = reinterpret_cast< ProjectRel* >(object);
  (void)_this;
}
void ProjectRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.ProjectRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expressions_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression expressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.ProjectRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .io.substrait.Expression expressions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_expressions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.ProjectRel)
  return target;
}

size_t ProjectRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.ProjectRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression expressions = 3;
  total_size += 1UL * this->_internal_expressions_size();
  for (const auto& msg : this->expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.ProjectRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.ProjectRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.ProjectRel)
    MergeFrom(*source);
  }
}

void ProjectRel::MergeFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.ProjectRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expressions_.MergeFrom(from.expressions_);
  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Rel::MergeFrom(from._internal_input());
  }
}

void ProjectRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRel::CopyFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRel::IsInitialized() const {
  return true;
}

void ProjectRel::InternalSwap(ProjectRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  expressions_.InternalSwap(&other->expressions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectRel, input_)
      + sizeof(ProjectRel::input_)
      - PROTOBUF_FIELD_OFFSET(ProjectRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[12]);
}

// ===================================================================

class JoinRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const JoinRel* msg);
  static const ::io::substrait::Rel& left(const JoinRel* msg);
  static const ::io::substrait::Rel& right(const JoinRel* msg);
  static const ::io::substrait::Expression& expression(const JoinRel* msg);
  static const ::io::substrait::Expression& post_join_filter(const JoinRel* msg);
};

const ::io::substrait::RelCommon&
JoinRel::_Internal::common(const JoinRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
JoinRel::_Internal::left(const JoinRel* msg) {
  return *msg->left_;
}
const ::io::substrait::Rel&
JoinRel::_Internal::right(const JoinRel* msg) {
  return *msg->right_;
}
const ::io::substrait::Expression&
JoinRel::_Internal::expression(const JoinRel* msg) {
  return *msg->expression_;
}
const ::io::substrait::Expression&
JoinRel::_Internal::post_join_filter(const JoinRel* msg) {
  return *msg->post_join_filter_;
}
void JoinRel::clear_expression() {
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
void JoinRel::clear_post_join_filter() {
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
}
JoinRel::JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.JoinRel)
}
JoinRel::JoinRel(const JoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::io::substrait::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::io::substrait::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::io::substrait::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_post_join_filter()) {
    post_join_filter_ = new ::io::substrait::Expression(*from.post_join_filter_);
  } else {
    post_join_filter_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.JoinRel)
}

void JoinRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

JoinRel::~JoinRel() {
  // @@protoc_insertion_point(destructor:io.substrait.JoinRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete post_join_filter_;
}

void JoinRel::ArenaDtor(void* object) {
  JoinRel* _this = reinterpret_cast< JoinRel* >(object);
  (void)_this;
}
void JoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.JoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression expression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression post_join_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.JoinRel.JoinType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::substrait::JoinRel_JoinType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.JoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .io.substrait.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .io.substrait.Expression expression = 4;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expression(this), target, stream);
  }

  // .io.substrait.Expression post_join_filter = 5;
  if (this->has_post_join_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::post_join_filter(this), target, stream);
  }

  // .io.substrait.JoinRel.JoinType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.JoinRel)
  return target;
}

size_t JoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.JoinRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .io.substrait.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .io.substrait.Expression expression = 4;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .io.substrait.Expression post_join_filter = 5;
  if (this->has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_join_filter_);
  }

  // .io.substrait.JoinRel.JoinType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.JoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.JoinRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.JoinRel)
    MergeFrom(*source);
  }
}

void JoinRel::MergeFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.JoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::io::substrait::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::io::substrait::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::io::substrait::Expression::MergeFrom(from._internal_expression());
  }
  if (from.has_post_join_filter()) {
    _internal_mutable_post_join_filter()->::io::substrait::Expression::MergeFrom(from._internal_post_join_filter());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void JoinRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRel::CopyFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRel::IsInitialized() const {
  return true;
}

void JoinRel::InternalSwap(JoinRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRel, type_)
      + sizeof(JoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(JoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[13]);
}

// ===================================================================

class FetchRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const FetchRel* msg);
  static const ::io::substrait::Rel& input(const FetchRel* msg);
};

const ::io::substrait::RelCommon&
FetchRel::_Internal::common(const FetchRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
FetchRel::_Internal::input(const FetchRel* msg) {
  return *msg->input_;
}
FetchRel::FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.FetchRel)
}
FetchRel::FetchRel(const FetchRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.FetchRel)
}

void FetchRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&common_)) + sizeof(count_));
}

FetchRel::~FetchRel() {
  // @@protoc_insertion_point(destructor:io.substrait.FetchRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
}

void FetchRel::ArenaDtor(void* object) {
  FetchRel* _this = reinterpret_cast< FetchRel* >(object);
  (void)_this;
}
void FetchRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.FetchRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.FetchRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.FetchRel)
  return target;
}

size_t FetchRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.FetchRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.FetchRel)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.FetchRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.FetchRel)
    MergeFrom(*source);
  }
}

void FetchRel::MergeFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.FetchRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchRel::CopyFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRel::IsInitialized() const {
  return true;
}

void FetchRel::InternalSwap(FetchRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchRel, count_)
      + sizeof(FetchRel::count_)
      - PROTOBUF_FIELD_OFFSET(FetchRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[14]);
}

// ===================================================================

class AggregateRel_Grouping::_Internal {
 public:
};

AggregateRel_Grouping::AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.AggregateRel.Grouping)
}
AggregateRel_Grouping::AggregateRel_Grouping(const AggregateRel_Grouping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_fields_(from.input_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.AggregateRel.Grouping)
}

void AggregateRel_Grouping::SharedCtor() {
}

AggregateRel_Grouping::~AggregateRel_Grouping() {
  // @@protoc_insertion_point(destructor:io.substrait.AggregateRel.Grouping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel_Grouping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AggregateRel_Grouping::ArenaDtor(void* object) {
  AggregateRel_Grouping* _this = reinterpret_cast< AggregateRel_Grouping* >(object);
  (void)_this;
}
void AggregateRel_Grouping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Grouping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel_Grouping::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.AggregateRel.Grouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Grouping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 input_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_fields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_input_fields(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel_Grouping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.AggregateRel.Grouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_fields = 1;
  {
    int byte_size = _input_fields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_input_fields(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.AggregateRel.Grouping)
  return target;
}

size_t AggregateRel_Grouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.AggregateRel.Grouping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_fields = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_fields_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_fields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel_Grouping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel_Grouping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel_Grouping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.AggregateRel.Grouping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.AggregateRel.Grouping)
    MergeFrom(*source);
  }
}

void AggregateRel_Grouping::MergeFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_fields_.MergeFrom(from.input_fields_);
}

void AggregateRel_Grouping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel_Grouping::CopyFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Grouping::IsInitialized() const {
  return true;
}

void AggregateRel_Grouping::InternalSwap(AggregateRel_Grouping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_fields_.InternalSwap(&other->input_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Grouping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[15]);
}

// ===================================================================

class AggregateRel_Measure::_Internal {
 public:
  static const ::io::substrait::Expression_AggregateFunction& measure(const AggregateRel_Measure* msg);
};

const ::io::substrait::Expression_AggregateFunction&
AggregateRel_Measure::_Internal::measure(const AggregateRel_Measure* msg) {
  return *msg->measure_;
}
void AggregateRel_Measure::clear_measure() {
  if (GetArena() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
}
AggregateRel_Measure::AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.AggregateRel.Measure)
}
AggregateRel_Measure::AggregateRel_Measure(const AggregateRel_Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measure()) {
    measure_ = new ::io::substrait::Expression_AggregateFunction(*from.measure_);
  } else {
    measure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.AggregateRel.Measure)
}

void AggregateRel_Measure::SharedCtor() {
measure_ = nullptr;
}

AggregateRel_Measure::~AggregateRel_Measure() {
  // @@protoc_insertion_point(destructor:io.substrait.AggregateRel.Measure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel_Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete measure_;
}

void AggregateRel_Measure::ArenaDtor(void* object) {
  AggregateRel_Measure* _this = reinterpret_cast< AggregateRel_Measure* >(object);
  (void)_this;
}
void AggregateRel_Measure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel_Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.AggregateRel.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Measure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.AggregateFunction measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel_Measure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.AggregateRel.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.AggregateFunction measure = 1;
  if (this->has_measure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::measure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.AggregateRel.Measure)
  return target;
}

size_t AggregateRel_Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.AggregateRel.Measure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.AggregateFunction measure = 1;
  if (this->has_measure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel_Measure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel_Measure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel_Measure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.AggregateRel.Measure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.AggregateRel.Measure)
    MergeFrom(*source);
  }
}

void AggregateRel_Measure::MergeFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measure()) {
    _internal_mutable_measure()->::io::substrait::Expression_AggregateFunction::MergeFrom(from._internal_measure());
  }
}

void AggregateRel_Measure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel_Measure::CopyFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Measure::IsInitialized() const {
  return true;
}

void AggregateRel_Measure::InternalSwap(AggregateRel_Measure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(measure_, other->measure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Measure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[16]);
}

// ===================================================================

class AggregateRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const AggregateRel* msg);
  static const ::io::substrait::Rel& input(const AggregateRel* msg);
};

const ::io::substrait::RelCommon&
AggregateRel::_Internal::common(const AggregateRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
AggregateRel::_Internal::input(const AggregateRel* msg) {
  return *msg->input_;
}
AggregateRel::AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groupings_(arena),
  measures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.AggregateRel)
}
AggregateRel::AggregateRel(const AggregateRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groupings_(from.groupings_),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.AggregateRel)
}

void AggregateRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&common_)) + sizeof(phase_));
}

AggregateRel::~AggregateRel() {
  // @@protoc_insertion_point(destructor:io.substrait.AggregateRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
}

void AggregateRel::ArenaDtor(void* object) {
  AggregateRel* _this = reinterpret_cast< AggregateRel* >(object);
  (void)_this;
}
void AggregateRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.AggregateRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupings_.Clear();
  measures_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  phase_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.AggregateRel.Grouping groupings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.AggregateRel.Measure measures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.AggregationPhase phase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::io::substrait::Expression_AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.AggregateRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .io.substrait.AggregateRel.Grouping groupings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groupings(i), target, stream);
  }

  // repeated .io.substrait.AggregateRel.Measure measures = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_measures(i), target, stream);
  }

  // .io.substrait.Expression.AggregationPhase phase = 5;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.AggregateRel)
  return target;
}

size_t AggregateRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.AggregateRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.AggregateRel.Grouping groupings = 3;
  total_size += 1UL * this->_internal_groupings_size();
  for (const auto& msg : this->groupings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.substrait.AggregateRel.Measure measures = 4;
  total_size += 1UL * this->_internal_measures_size();
  for (const auto& msg : this->measures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .io.substrait.Expression.AggregationPhase phase = 5;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.AggregateRel)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.AggregateRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.AggregateRel)
    MergeFrom(*source);
  }
}

void AggregateRel::MergeFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.AggregateRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupings_.MergeFrom(from.groupings_);
  measures_.MergeFrom(from.measures_);
  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
}

void AggregateRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel::CopyFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel::IsInitialized() const {
  return true;
}

void AggregateRel::InternalSwap(AggregateRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groupings_.InternalSwap(&other->groupings_);
  measures_.InternalSwap(&other->measures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel, phase_)
      + sizeof(AggregateRel::phase_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[17]);
}

// ===================================================================

class SortRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const SortRel* msg);
  static const ::io::substrait::Rel& input(const SortRel* msg);
};

const ::io::substrait::RelCommon&
SortRel::_Internal::common(const SortRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
SortRel::_Internal::input(const SortRel* msg) {
  return *msg->input_;
}
void SortRel::clear_sorts() {
  sorts_.Clear();
}
SortRel::SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sorts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.SortRel)
}
SortRel::SortRel(const SortRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.SortRel)
}

void SortRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&common_)) + sizeof(input_));
}

SortRel::~SortRel() {
  // @@protoc_insertion_point(destructor:io.substrait.SortRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
}

void SortRel::ArenaDtor(void* object) {
  SortRel* _this = reinterpret_cast< SortRel* >(object);
  (void)_this;
}
void SortRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.SortRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorts_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.SortRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .io.substrait.Expression.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.SortRel)
  return target;
}

size_t SortRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.SortRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.SortRel)
  GOOGLE_DCHECK_NE(&from, this);
  const SortRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.SortRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.SortRel)
    MergeFrom(*source);
  }
}

void SortRel::MergeFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.SortRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorts_.MergeFrom(from.sorts_);
  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Rel::MergeFrom(from._internal_input());
  }
}

void SortRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortRel::CopyFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRel::IsInitialized() const {
  return true;
}

void SortRel::InternalSwap(SortRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortRel, input_)
      + sizeof(SortRel::input_)
      - PROTOBUF_FIELD_OFFSET(SortRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[18]);
}

// ===================================================================

class FilterRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const FilterRel* msg);
  static const ::io::substrait::Rel& input(const FilterRel* msg);
  static const ::io::substrait::Expression& condition(const FilterRel* msg);
};

const ::io::substrait::RelCommon&
FilterRel::_Internal::common(const FilterRel* msg) {
  return *msg->common_;
}
const ::io::substrait::Rel&
FilterRel::_Internal::input(const FilterRel* msg) {
  return *msg->input_;
}
const ::io::substrait::Expression&
FilterRel::_Internal::condition(const FilterRel* msg) {
  return *msg->condition_;
}
void FilterRel::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
FilterRel::FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.FilterRel)
}
FilterRel::FilterRel(const FilterRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::io::substrait::Expression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.FilterRel)
}

void FilterRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&condition_) -
    reinterpret_cast<char*>(&common_)) + sizeof(condition_));
}

FilterRel::~FilterRel() {
  // @@protoc_insertion_point(destructor:io.substrait.FilterRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete condition_;
}

void FilterRel::ArenaDtor(void* object) {
  FilterRel* _this = reinterpret_cast< FilterRel* >(object);
  (void)_this;
}
void FilterRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.FilterRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.FilterRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .io.substrait.Expression condition = 3;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.FilterRel)
  return target;
}

size_t FilterRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.FilterRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .io.substrait.Expression condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.FilterRel)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.FilterRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.FilterRel)
    MergeFrom(*source);
  }
}

void FilterRel::MergeFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.FilterRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::io::substrait::Expression::MergeFrom(from._internal_condition());
  }
}

void FilterRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterRel::CopyFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRel::IsInitialized() const {
  return true;
}

void FilterRel::InternalSwap(FilterRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRel, condition_)
      + sizeof(FilterRel::condition_)
      - PROTOBUF_FIELD_OFFSET(FilterRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[19]);
}

// ===================================================================

class SetRel::_Internal {
 public:
  static const ::io::substrait::RelCommon& common(const SetRel* msg);
};

const ::io::substrait::RelCommon&
SetRel::_Internal::common(const SetRel* msg) {
  return *msg->common_;
}
SetRel::SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.SetRel)
}
SetRel::SetRel(const SetRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::io::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.SetRel)
}

void SetRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&common_)) + sizeof(op_));
}

SetRel::~SetRel() {
  // @@protoc_insertion_point(destructor:io.substrait.SetRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void SetRel::ArenaDtor(void* object) {
  SetRel* _this = reinterpret_cast< SetRel* >(object);
  (void)_this;
}
void SetRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.SetRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Rel inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.SetRel.SetOp op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::io::substrait::SetRel_SetOp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.SetRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // repeated .io.substrait.Rel inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // .io.substrait.SetRel.SetOp op = 3;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.SetRel)
  return target;
}

size_t SetRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.SetRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Rel inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .io.substrait.SetRel.SetOp op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.SetRel)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.SetRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.SetRel)
    MergeFrom(*source);
  }
}

void SetRel::MergeFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.SetRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_common()) {
    _internal_mutable_common()->::io::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void SetRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRel::CopyFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRel::IsInitialized() const {
  return true;
}

void SetRel::InternalSwap(SetRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRel, op_)
      + sizeof(SetRel::op_)
      - PROTOBUF_FIELD_OFFSET(SetRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[20]);
}

// ===================================================================

class Rel::_Internal {
 public:
  static const ::io::substrait::ReadRel& read(const Rel* msg);
  static const ::io::substrait::FilterRel& filter(const Rel* msg);
  static const ::io::substrait::FetchRel& fetch(const Rel* msg);
  static const ::io::substrait::AggregateRel& aggregate(const Rel* msg);
  static const ::io::substrait::SortRel& sort(const Rel* msg);
  static const ::io::substrait::JoinRel& join(const Rel* msg);
  static const ::io::substrait::ProjectRel& project(const Rel* msg);
  static const ::io::substrait::SetRel& set(const Rel* msg);
};

const ::io::substrait::ReadRel&
Rel::_Internal::read(const Rel* msg) {
  return *msg->RelType_.read_;
}
const ::io::substrait::FilterRel&
Rel::_Internal::filter(const Rel* msg) {
  return *msg->RelType_.filter_;
}
const ::io::substrait::FetchRel&
Rel::_Internal::fetch(const Rel* msg) {
  return *msg->RelType_.fetch_;
}
const ::io::substrait::AggregateRel&
Rel::_Internal::aggregate(const Rel* msg) {
  return *msg->RelType_.aggregate_;
}
const ::io::substrait::SortRel&
Rel::_Internal::sort(const Rel* msg) {
  return *msg->RelType_.sort_;
}
const ::io::substrait::JoinRel&
Rel::_Internal::join(const Rel* msg) {
  return *msg->RelType_.join_;
}
const ::io::substrait::ProjectRel&
Rel::_Internal::project(const Rel* msg) {
  return *msg->RelType_.project_;
}
const ::io::substrait::SetRel&
Rel::_Internal::set(const Rel* msg) {
  return *msg->RelType_.set_;
}
void Rel::set_allocated_read(::io::substrait::ReadRel* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read);
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    RelType_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.read)
}
void Rel::set_allocated_filter(::io::substrait::FilterRel* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    RelType_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.filter)
}
void Rel::set_allocated_fetch(::io::substrait::FetchRel* fetch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (fetch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch);
    if (message_arena != submessage_arena) {
      fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch, submessage_arena);
    }
    set_has_fetch();
    RelType_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.fetch)
}
void Rel::set_allocated_aggregate(::io::substrait::AggregateRel* aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aggregate);
    if (message_arena != submessage_arena) {
      aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    RelType_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.aggregate)
}
void Rel::set_allocated_sort(::io::substrait::SortRel* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    RelType_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.sort)
}
void Rel::set_allocated_join(::io::substrait::JoinRel* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    RelType_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.join)
}
void Rel::set_allocated_project(::io::substrait::ProjectRel* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    RelType_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.project)
}
void Rel::set_allocated_set(::io::substrait::SetRel* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_RelType();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    RelType_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Rel.set)
}
Rel::Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Rel)
}
Rel::Rel(const Rel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_RelType();
  switch (from.RelType_case()) {
    case kRead: {
      _internal_mutable_read()->::io::substrait::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::substrait::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::io::substrait::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::io::substrait::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::substrait::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::io::substrait::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::io::substrait::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::io::substrait::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case RELTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Rel)
}

void Rel::SharedCtor() {
clear_has_RelType();
}

Rel::~Rel() {
  // @@protoc_insertion_point(destructor:io.substrait.Rel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_RelType()) {
    clear_RelType();
  }
}

void Rel::ArenaDtor(void* object) {
  Rel* _this = reinterpret_cast< Rel* >(object);
  (void)_this;
}
void Rel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rel::clear_RelType() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Rel)
  switch (RelType_case()) {
    case kRead: {
      if (GetArena() == nullptr) {
        delete RelType_.read_;
      }
      break;
    }
    case kFilter: {
      if (GetArena() == nullptr) {
        delete RelType_.filter_;
      }
      break;
    }
    case kFetch: {
      if (GetArena() == nullptr) {
        delete RelType_.fetch_;
      }
      break;
    }
    case kAggregate: {
      if (GetArena() == nullptr) {
        delete RelType_.aggregate_;
      }
      break;
    }
    case kSort: {
      if (GetArena() == nullptr) {
        delete RelType_.sort_;
      }
      break;
    }
    case kJoin: {
      if (GetArena() == nullptr) {
        delete RelType_.join_;
      }
      break;
    }
    case kProject: {
      if (GetArena() == nullptr) {
        delete RelType_.project_;
      }
      break;
    }
    case kSet: {
      if (GetArena() == nullptr) {
        delete RelType_.set_;
      }
      break;
    }
    case RELTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RELTYPE_NOT_SET;
}


void Rel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Rel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_RelType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.ReadRel read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.FilterRel filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.FetchRel fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.AggregateRel aggregate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.SortRel sort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.JoinRel join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.ProjectRel project = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.SetRel set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Rel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.ReadRel read = 1;
  if (_internal_has_read()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::read(this), target, stream);
  }

  // .io.substrait.FilterRel filter = 2;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  // .io.substrait.FetchRel fetch = 3;
  if (_internal_has_fetch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fetch(this), target, stream);
  }

  // .io.substrait.AggregateRel aggregate = 4;
  if (_internal_has_aggregate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aggregate(this), target, stream);
  }

  // .io.substrait.SortRel sort = 5;
  if (_internal_has_sort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sort(this), target, stream);
  }

  // .io.substrait.JoinRel join = 6;
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::join(this), target, stream);
  }

  // .io.substrait.ProjectRel project = 7;
  if (_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::project(this), target, stream);
  }

  // .io.substrait.SetRel set = 8;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Rel)
  return target;
}

size_t Rel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Rel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (RelType_case()) {
    // .io.substrait.ReadRel read = 1;
    case kRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.read_);
      break;
    }
    // .io.substrait.FilterRel filter = 2;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.filter_);
      break;
    }
    // .io.substrait.FetchRel fetch = 3;
    case kFetch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.fetch_);
      break;
    }
    // .io.substrait.AggregateRel aggregate = 4;
    case kAggregate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.aggregate_);
      break;
    }
    // .io.substrait.SortRel sort = 5;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.sort_);
      break;
    }
    // .io.substrait.JoinRel join = 6;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.join_);
      break;
    }
    // .io.substrait.ProjectRel project = 7;
    case kProject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.project_);
      break;
    }
    // .io.substrait.SetRel set = 8;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RelType_.set_);
      break;
    }
    case RELTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Rel)
  GOOGLE_DCHECK_NE(&from, this);
  const Rel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Rel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Rel)
    MergeFrom(*source);
  }
}

void Rel::MergeFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Rel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.RelType_case()) {
    case kRead: {
      _internal_mutable_read()->::io::substrait::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::substrait::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::io::substrait::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::io::substrait::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::substrait::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::io::substrait::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::io::substrait::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::io::substrait::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case RELTYPE_NOT_SET: {
      break;
    }
  }
}

void Rel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rel::CopyFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rel::IsInitialized() const {
  return true;
}

void Rel::InternalSwap(Rel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(RelType_, other->RelType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_relations_2eproto_getter, &descriptor_table_relations_2eproto_once,
      file_level_metadata_relations_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_Direct* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_Direct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_Direct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_Emit* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_Emit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_Emit >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_Hint_Stats* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_Hint_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_Hint_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_Hint_HintKeyValue* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_Hint_HintKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_Hint_HintKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_Hint* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_Hint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_Hint >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon_RuntimeConstraint* Arena::CreateMaybeMessage< ::io::substrait::RelCommon_RuntimeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon_RuntimeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::RelCommon* Arena::CreateMaybeMessage< ::io::substrait::RelCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::RelCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReadRel_NamedTable* Arena::CreateMaybeMessage< ::io::substrait::ReadRel_NamedTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReadRel_NamedTable >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReadRel_VirtualTable* Arena::CreateMaybeMessage< ::io::substrait::ReadRel_VirtualTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReadRel_VirtualTable >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReadRel_LocalFiles* Arena::CreateMaybeMessage< ::io::substrait::ReadRel_LocalFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReadRel_LocalFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ReadRel* Arena::CreateMaybeMessage< ::io::substrait::ReadRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ReadRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::ProjectRel* Arena::CreateMaybeMessage< ::io::substrait::ProjectRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::ProjectRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::JoinRel* Arena::CreateMaybeMessage< ::io::substrait::JoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::JoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::FetchRel* Arena::CreateMaybeMessage< ::io::substrait::FetchRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::FetchRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::AggregateRel_Grouping* Arena::CreateMaybeMessage< ::io::substrait::AggregateRel_Grouping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::AggregateRel_Grouping >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::AggregateRel_Measure* Arena::CreateMaybeMessage< ::io::substrait::AggregateRel_Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::AggregateRel_Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::AggregateRel* Arena::CreateMaybeMessage< ::io::substrait::AggregateRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::AggregateRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::SortRel* Arena::CreateMaybeMessage< ::io::substrait::SortRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::SortRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::FilterRel* Arena::CreateMaybeMessage< ::io::substrait::FilterRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::FilterRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::SetRel* Arena::CreateMaybeMessage< ::io::substrait::SetRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::SetRel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Rel* Arena::CreateMaybeMessage< ::io::substrait::Rel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Rel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
