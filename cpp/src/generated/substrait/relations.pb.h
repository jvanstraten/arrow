// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_relations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_relations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
#include "expression.pb.h"
#include "selection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_relations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_relations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relations_2eproto;
namespace io {
namespace substrait {
class AggregateRel;
struct AggregateRelDefaultTypeInternal;
extern AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
class AggregateRel_Grouping;
struct AggregateRel_GroupingDefaultTypeInternal;
extern AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
class AggregateRel_Measure;
struct AggregateRel_MeasureDefaultTypeInternal;
extern AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
class FetchRel;
struct FetchRelDefaultTypeInternal;
extern FetchRelDefaultTypeInternal _FetchRel_default_instance_;
class FilterRel;
struct FilterRelDefaultTypeInternal;
extern FilterRelDefaultTypeInternal _FilterRel_default_instance_;
class JoinRel;
struct JoinRelDefaultTypeInternal;
extern JoinRelDefaultTypeInternal _JoinRel_default_instance_;
class ProjectRel;
struct ProjectRelDefaultTypeInternal;
extern ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
class ReadRel;
struct ReadRelDefaultTypeInternal;
extern ReadRelDefaultTypeInternal _ReadRel_default_instance_;
class ReadRel_LocalFiles;
struct ReadRel_LocalFilesDefaultTypeInternal;
extern ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles;
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
class ReadRel_NamedTable;
struct ReadRel_NamedTableDefaultTypeInternal;
extern ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
class ReadRel_VirtualTable;
struct ReadRel_VirtualTableDefaultTypeInternal;
extern ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
class Rel;
struct RelDefaultTypeInternal;
extern RelDefaultTypeInternal _Rel_default_instance_;
class RelCommon;
struct RelCommonDefaultTypeInternal;
extern RelCommonDefaultTypeInternal _RelCommon_default_instance_;
class RelCommon_Direct;
struct RelCommon_DirectDefaultTypeInternal;
extern RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
class RelCommon_Emit;
struct RelCommon_EmitDefaultTypeInternal;
extern RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
class RelCommon_Hint;
struct RelCommon_HintDefaultTypeInternal;
extern RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
class RelCommon_Hint_HintKeyValue;
struct RelCommon_Hint_HintKeyValueDefaultTypeInternal;
extern RelCommon_Hint_HintKeyValueDefaultTypeInternal _RelCommon_Hint_HintKeyValue_default_instance_;
class RelCommon_Hint_Stats;
struct RelCommon_Hint_StatsDefaultTypeInternal;
extern RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
class RelCommon_RuntimeConstraint;
struct RelCommon_RuntimeConstraintDefaultTypeInternal;
extern RelCommon_RuntimeConstraintDefaultTypeInternal _RelCommon_RuntimeConstraint_default_instance_;
class SetRel;
struct SetRelDefaultTypeInternal;
extern SetRelDefaultTypeInternal _SetRel_default_instance_;
class SortRel;
struct SortRelDefaultTypeInternal;
extern SortRelDefaultTypeInternal _SortRel_default_instance_;
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::substrait::AggregateRel* Arena::CreateMaybeMessage<::io::substrait::AggregateRel>(Arena*);
template<> ::io::substrait::AggregateRel_Grouping* Arena::CreateMaybeMessage<::io::substrait::AggregateRel_Grouping>(Arena*);
template<> ::io::substrait::AggregateRel_Measure* Arena::CreateMaybeMessage<::io::substrait::AggregateRel_Measure>(Arena*);
template<> ::io::substrait::FetchRel* Arena::CreateMaybeMessage<::io::substrait::FetchRel>(Arena*);
template<> ::io::substrait::FilterRel* Arena::CreateMaybeMessage<::io::substrait::FilterRel>(Arena*);
template<> ::io::substrait::JoinRel* Arena::CreateMaybeMessage<::io::substrait::JoinRel>(Arena*);
template<> ::io::substrait::ProjectRel* Arena::CreateMaybeMessage<::io::substrait::ProjectRel>(Arena*);
template<> ::io::substrait::ReadRel* Arena::CreateMaybeMessage<::io::substrait::ReadRel>(Arena*);
template<> ::io::substrait::ReadRel_LocalFiles* Arena::CreateMaybeMessage<::io::substrait::ReadRel_LocalFiles>(Arena*);
template<> ::io::substrait::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage<::io::substrait::ReadRel_LocalFiles_FileOrFiles>(Arena*);
template<> ::io::substrait::ReadRel_NamedTable* Arena::CreateMaybeMessage<::io::substrait::ReadRel_NamedTable>(Arena*);
template<> ::io::substrait::ReadRel_VirtualTable* Arena::CreateMaybeMessage<::io::substrait::ReadRel_VirtualTable>(Arena*);
template<> ::io::substrait::Rel* Arena::CreateMaybeMessage<::io::substrait::Rel>(Arena*);
template<> ::io::substrait::RelCommon* Arena::CreateMaybeMessage<::io::substrait::RelCommon>(Arena*);
template<> ::io::substrait::RelCommon_Direct* Arena::CreateMaybeMessage<::io::substrait::RelCommon_Direct>(Arena*);
template<> ::io::substrait::RelCommon_Emit* Arena::CreateMaybeMessage<::io::substrait::RelCommon_Emit>(Arena*);
template<> ::io::substrait::RelCommon_Hint* Arena::CreateMaybeMessage<::io::substrait::RelCommon_Hint>(Arena*);
template<> ::io::substrait::RelCommon_Hint_HintKeyValue* Arena::CreateMaybeMessage<::io::substrait::RelCommon_Hint_HintKeyValue>(Arena*);
template<> ::io::substrait::RelCommon_Hint_Stats* Arena::CreateMaybeMessage<::io::substrait::RelCommon_Hint_Stats>(Arena*);
template<> ::io::substrait::RelCommon_RuntimeConstraint* Arena::CreateMaybeMessage<::io::substrait::RelCommon_RuntimeConstraint>(Arena*);
template<> ::io::substrait::SetRel* Arena::CreateMaybeMessage<::io::substrait::SetRel>(Arena*);
template<> ::io::substrait::SortRel* Arena::CreateMaybeMessage<::io::substrait::SortRel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace substrait {

enum ReadRel_LocalFiles_FileOrFiles_Format : int {
  ReadRel_LocalFiles_FileOrFiles_Format_UNKNOWN = 0,
  ReadRel_LocalFiles_FileOrFiles_Format_PARQUET = 1,
  ReadRel_LocalFiles_FileOrFiles_Format_ReadRel_LocalFiles_FileOrFiles_Format_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadRel_LocalFiles_FileOrFiles_Format_ReadRel_LocalFiles_FileOrFiles_Format_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadRel_LocalFiles_FileOrFiles_Format_IsValid(int value);
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles_Format_Format_MIN = ReadRel_LocalFiles_FileOrFiles_Format_UNKNOWN;
constexpr ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles_Format_Format_MAX = ReadRel_LocalFiles_FileOrFiles_Format_PARQUET;
constexpr int ReadRel_LocalFiles_FileOrFiles_Format_Format_ARRAYSIZE = ReadRel_LocalFiles_FileOrFiles_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRel_LocalFiles_FileOrFiles_Format_descriptor();
template<typename T>
inline const std::string& ReadRel_LocalFiles_FileOrFiles_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadRel_LocalFiles_FileOrFiles_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadRel_LocalFiles_FileOrFiles_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadRel_LocalFiles_FileOrFiles_Format_descriptor(), enum_t_value);
}
inline bool ReadRel_LocalFiles_FileOrFiles_Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadRel_LocalFiles_FileOrFiles_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadRel_LocalFiles_FileOrFiles_Format>(
    ReadRel_LocalFiles_FileOrFiles_Format_descriptor(), name, value);
}
enum JoinRel_JoinType : int {
  JoinRel_JoinType_UNKNOWN = 0,
  JoinRel_JoinType_INNER = 1,
  JoinRel_JoinType_OUTER = 2,
  JoinRel_JoinType_LEFT = 3,
  JoinRel_JoinType_RIGHT = 4,
  JoinRel_JoinType_JoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JoinRel_JoinType_JoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JoinRel_JoinType_IsValid(int value);
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MIN = JoinRel_JoinType_UNKNOWN;
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MAX = JoinRel_JoinType_RIGHT;
constexpr int JoinRel_JoinType_JoinType_ARRAYSIZE = JoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& JoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool JoinRel_JoinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinRel_JoinType>(
    JoinRel_JoinType_descriptor(), name, value);
}
enum SetRel_SetOp : int {
  SetRel_SetOp_UNKNOWN = 0,
  SetRel_SetOp_MINUS_PRIMARY = 1,
  SetRel_SetOp_MINUS_MULTISET = 2,
  SetRel_SetOp_INTERSECTION_PRIMARY = 3,
  SetRel_SetOp_INTERSECTION_MULTISET = 4,
  SetRel_SetOp_UNION_DISTINCT = 5,
  SetRel_SetOp_UNION_ALL = 6,
  SetRel_SetOp_SetRel_SetOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetRel_SetOp_SetRel_SetOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetRel_SetOp_IsValid(int value);
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MIN = SetRel_SetOp_UNKNOWN;
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MAX = SetRel_SetOp_UNION_ALL;
constexpr int SetRel_SetOp_SetOp_ARRAYSIZE = SetRel_SetOp_SetOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor();
template<typename T>
inline const std::string& SetRel_SetOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetRel_SetOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetRel_SetOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetRel_SetOp_descriptor(), enum_t_value);
}
inline bool SetRel_SetOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetRel_SetOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetRel_SetOp>(
    SetRel_SetOp_descriptor(), name, value);
}
// ===================================================================

class RelCommon_Direct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.Direct) */ {
 public:
  inline RelCommon_Direct() : RelCommon_Direct(nullptr) {}
  ~RelCommon_Direct() override;
  explicit constexpr RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Direct(const RelCommon_Direct& from);
  RelCommon_Direct(RelCommon_Direct&& from) noexcept
    : RelCommon_Direct() {
    *this = ::std::move(from);
  }

  inline RelCommon_Direct& operator=(const RelCommon_Direct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Direct& operator=(RelCommon_Direct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Direct& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Direct* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Direct*>(
               &_RelCommon_Direct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelCommon_Direct& a, RelCommon_Direct& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Direct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Direct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Direct* New() const final {
    return CreateMaybeMessage<RelCommon_Direct>(nullptr);
  }

  RelCommon_Direct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Direct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Direct& from);
  void MergeFrom(const RelCommon_Direct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Direct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.Direct";
  }
  protected:
  explicit RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.Direct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Emit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.Emit) */ {
 public:
  inline RelCommon_Emit() : RelCommon_Emit(nullptr) {}
  ~RelCommon_Emit() override;
  explicit constexpr RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Emit(const RelCommon_Emit& from);
  RelCommon_Emit(RelCommon_Emit&& from) noexcept
    : RelCommon_Emit() {
    *this = ::std::move(from);
  }

  inline RelCommon_Emit& operator=(const RelCommon_Emit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Emit& operator=(RelCommon_Emit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Emit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Emit* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Emit*>(
               &_RelCommon_Emit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelCommon_Emit& a, RelCommon_Emit& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Emit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Emit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Emit* New() const final {
    return CreateMaybeMessage<RelCommon_Emit>(nullptr);
  }

  RelCommon_Emit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Emit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Emit& from);
  void MergeFrom(const RelCommon_Emit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Emit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.Emit";
  }
  protected:
  explicit RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMappingFieldNumber = 1,
  };
  // repeated int32 output_mapping = 1;
  int output_mapping_size() const;
  private:
  int _internal_output_mapping_size() const;
  public:
  void clear_output_mapping();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_mapping(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_output_mapping() const;
  void _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_output_mapping();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 output_mapping(int index) const;
  void set_output_mapping(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      output_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_output_mapping();

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.Emit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > output_mapping_;
  mutable std::atomic<int> _output_mapping_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.Hint.Stats) */ {
 public:
  inline RelCommon_Hint_Stats() : RelCommon_Hint_Stats(nullptr) {}
  ~RelCommon_Hint_Stats() override;
  explicit constexpr RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from);
  RelCommon_Hint_Stats(RelCommon_Hint_Stats&& from) noexcept
    : RelCommon_Hint_Stats() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_Stats& operator=(const RelCommon_Hint_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_Stats& operator=(RelCommon_Hint_Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_Stats* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_Stats*>(
               &_RelCommon_Hint_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelCommon_Hint_Stats& a, RelCommon_Hint_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint_Stats* New() const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(nullptr);
  }

  RelCommon_Hint_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint_Stats& from);
  void MergeFrom(const RelCommon_Hint_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.Hint.Stats";
  }
  protected:
  explicit RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowCountFieldNumber = 1,
    kRecordSizeFieldNumber = 2,
  };
  // double row_count = 1;
  void clear_row_count();
  double row_count() const;
  void set_row_count(double value);
  private:
  double _internal_row_count() const;
  void _internal_set_row_count(double value);
  public:

  // double record_size = 2;
  void clear_record_size();
  double record_size() const;
  void set_record_size(double value);
  private:
  double _internal_record_size() const;
  void _internal_set_record_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.Hint.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double row_count_;
  double record_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_HintKeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.Hint.HintKeyValue) */ {
 public:
  inline RelCommon_Hint_HintKeyValue() : RelCommon_Hint_HintKeyValue(nullptr) {}
  ~RelCommon_Hint_HintKeyValue() override;
  explicit constexpr RelCommon_Hint_HintKeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_HintKeyValue(const RelCommon_Hint_HintKeyValue& from);
  RelCommon_Hint_HintKeyValue(RelCommon_Hint_HintKeyValue&& from) noexcept
    : RelCommon_Hint_HintKeyValue() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_HintKeyValue& operator=(const RelCommon_Hint_HintKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_HintKeyValue& operator=(RelCommon_Hint_HintKeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_HintKeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_HintKeyValue* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_HintKeyValue*>(
               &_RelCommon_Hint_HintKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelCommon_Hint_HintKeyValue& a, RelCommon_Hint_HintKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_HintKeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_HintKeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint_HintKeyValue* New() const final {
    return CreateMaybeMessage<RelCommon_Hint_HintKeyValue>(nullptr);
  }

  RelCommon_Hint_HintKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint_HintKeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint_HintKeyValue& from);
  void MergeFrom(const RelCommon_Hint_HintKeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_HintKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.Hint.HintKeyValue";
  }
  protected:
  explicit RelCommon_Hint_HintKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.Hint.HintKeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.Hint) */ {
 public:
  inline RelCommon_Hint() : RelCommon_Hint(nullptr) {}
  ~RelCommon_Hint() override;
  explicit constexpr RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint(const RelCommon_Hint& from);
  RelCommon_Hint(RelCommon_Hint&& from) noexcept
    : RelCommon_Hint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint& operator=(const RelCommon_Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint& operator=(RelCommon_Hint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint*>(
               &_RelCommon_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RelCommon_Hint& a, RelCommon_Hint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint* New() const final {
    return CreateMaybeMessage<RelCommon_Hint>(nullptr);
  }

  RelCommon_Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint& from);
  void MergeFrom(const RelCommon_Hint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.Hint";
  }
  protected:
  explicit RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Hint_Stats Stats;
  typedef RelCommon_Hint_HintKeyValue HintKeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kHintKeyValuesFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // repeated .io.substrait.RelCommon.Hint.HintKeyValue hint_key_values = 1;
  int hint_key_values_size() const;
  private:
  int _internal_hint_key_values_size() const;
  public:
  void clear_hint_key_values();
  ::io::substrait::RelCommon_Hint_HintKeyValue* mutable_hint_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::RelCommon_Hint_HintKeyValue >*
      mutable_hint_key_values();
  private:
  const ::io::substrait::RelCommon_Hint_HintKeyValue& _internal_hint_key_values(int index) const;
  ::io::substrait::RelCommon_Hint_HintKeyValue* _internal_add_hint_key_values();
  public:
  const ::io::substrait::RelCommon_Hint_HintKeyValue& hint_key_values(int index) const;
  ::io::substrait::RelCommon_Hint_HintKeyValue* add_hint_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::RelCommon_Hint_HintKeyValue >&
      hint_key_values() const;

  // .io.substrait.RelCommon.Hint.Stats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::io::substrait::RelCommon_Hint_Stats& stats() const;
  ::io::substrait::RelCommon_Hint_Stats* release_stats();
  ::io::substrait::RelCommon_Hint_Stats* mutable_stats();
  void set_allocated_stats(::io::substrait::RelCommon_Hint_Stats* stats);
  private:
  const ::io::substrait::RelCommon_Hint_Stats& _internal_stats() const;
  ::io::substrait::RelCommon_Hint_Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::io::substrait::RelCommon_Hint_Stats* stats);
  ::io::substrait::RelCommon_Hint_Stats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.Hint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::RelCommon_Hint_HintKeyValue > hint_key_values_;
  ::io::substrait::RelCommon_Hint_Stats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_RuntimeConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon.RuntimeConstraint) */ {
 public:
  inline RelCommon_RuntimeConstraint() : RelCommon_RuntimeConstraint(nullptr) {}
  ~RelCommon_RuntimeConstraint() override;
  explicit constexpr RelCommon_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_RuntimeConstraint(const RelCommon_RuntimeConstraint& from);
  RelCommon_RuntimeConstraint(RelCommon_RuntimeConstraint&& from) noexcept
    : RelCommon_RuntimeConstraint() {
    *this = ::std::move(from);
  }

  inline RelCommon_RuntimeConstraint& operator=(const RelCommon_RuntimeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_RuntimeConstraint& operator=(RelCommon_RuntimeConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_RuntimeConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_RuntimeConstraint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_RuntimeConstraint*>(
               &_RelCommon_RuntimeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RelCommon_RuntimeConstraint& a, RelCommon_RuntimeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_RuntimeConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_RuntimeConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_RuntimeConstraint* New() const final {
    return CreateMaybeMessage<RelCommon_RuntimeConstraint>(nullptr);
  }

  RelCommon_RuntimeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_RuntimeConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_RuntimeConstraint& from);
  void MergeFrom(const RelCommon_RuntimeConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_RuntimeConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon.RuntimeConstraint";
  }
  protected:
  explicit RelCommon_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon.RuntimeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.RelCommon) */ {
 public:
  inline RelCommon() : RelCommon(nullptr) {}
  ~RelCommon() override;
  explicit constexpr RelCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon(const RelCommon& from);
  RelCommon(RelCommon&& from) noexcept
    : RelCommon() {
    *this = ::std::move(from);
  }

  inline RelCommon& operator=(const RelCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon& operator=(RelCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kDirect = 1,
    kEmit = 2,
    KIND_NOT_SET = 0,
  };

  static inline const RelCommon* internal_default_instance() {
    return reinterpret_cast<const RelCommon*>(
               &_RelCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RelCommon& a, RelCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon* New() const final {
    return CreateMaybeMessage<RelCommon>(nullptr);
  }

  RelCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon& from);
  void MergeFrom(const RelCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.RelCommon";
  }
  protected:
  explicit RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Direct Direct;
  typedef RelCommon_Emit Emit;
  typedef RelCommon_Hint Hint;
  typedef RelCommon_RuntimeConstraint RuntimeConstraint;

  // accessors -------------------------------------------------------

  enum : int {
    kHintFieldNumber = 3,
    kConstraintFieldNumber = 4,
    kDirectFieldNumber = 1,
    kEmitFieldNumber = 2,
  };
  // .io.substrait.RelCommon.Hint hint = 3;
  bool has_hint() const;
  private:
  bool _internal_has_hint() const;
  public:
  void clear_hint();
  const ::io::substrait::RelCommon_Hint& hint() const;
  ::io::substrait::RelCommon_Hint* release_hint();
  ::io::substrait::RelCommon_Hint* mutable_hint();
  void set_allocated_hint(::io::substrait::RelCommon_Hint* hint);
  private:
  const ::io::substrait::RelCommon_Hint& _internal_hint() const;
  ::io::substrait::RelCommon_Hint* _internal_mutable_hint();
  public:
  void unsafe_arena_set_allocated_hint(
      ::io::substrait::RelCommon_Hint* hint);
  ::io::substrait::RelCommon_Hint* unsafe_arena_release_hint();

  // .io.substrait.RelCommon.RuntimeConstraint constraint = 4;
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::io::substrait::RelCommon_RuntimeConstraint& constraint() const;
  ::io::substrait::RelCommon_RuntimeConstraint* release_constraint();
  ::io::substrait::RelCommon_RuntimeConstraint* mutable_constraint();
  void set_allocated_constraint(::io::substrait::RelCommon_RuntimeConstraint* constraint);
  private:
  const ::io::substrait::RelCommon_RuntimeConstraint& _internal_constraint() const;
  ::io::substrait::RelCommon_RuntimeConstraint* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::io::substrait::RelCommon_RuntimeConstraint* constraint);
  ::io::substrait::RelCommon_RuntimeConstraint* unsafe_arena_release_constraint();

  // .io.substrait.RelCommon.Direct direct = 1;
  bool has_direct() const;
  private:
  bool _internal_has_direct() const;
  public:
  void clear_direct();
  const ::io::substrait::RelCommon_Direct& direct() const;
  ::io::substrait::RelCommon_Direct* release_direct();
  ::io::substrait::RelCommon_Direct* mutable_direct();
  void set_allocated_direct(::io::substrait::RelCommon_Direct* direct);
  private:
  const ::io::substrait::RelCommon_Direct& _internal_direct() const;
  ::io::substrait::RelCommon_Direct* _internal_mutable_direct();
  public:
  void unsafe_arena_set_allocated_direct(
      ::io::substrait::RelCommon_Direct* direct);
  ::io::substrait::RelCommon_Direct* unsafe_arena_release_direct();

  // .io.substrait.RelCommon.Emit emit = 2;
  bool has_emit() const;
  private:
  bool _internal_has_emit() const;
  public:
  void clear_emit();
  const ::io::substrait::RelCommon_Emit& emit() const;
  ::io::substrait::RelCommon_Emit* release_emit();
  ::io::substrait::RelCommon_Emit* mutable_emit();
  void set_allocated_emit(::io::substrait::RelCommon_Emit* emit);
  private:
  const ::io::substrait::RelCommon_Emit& _internal_emit() const;
  ::io::substrait::RelCommon_Emit* _internal_mutable_emit();
  public:
  void unsafe_arena_set_allocated_emit(
      ::io::substrait::RelCommon_Emit* emit);
  ::io::substrait::RelCommon_Emit* unsafe_arena_release_emit();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.RelCommon)
 private:
  class _Internal;
  void set_has_direct();
  void set_has_emit();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::RelCommon_Hint* hint_;
  ::io::substrait::RelCommon_RuntimeConstraint* constraint_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::substrait::RelCommon_Direct* direct_;
    ::io::substrait::RelCommon_Emit* emit_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_NamedTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ReadRel.NamedTable) */ {
 public:
  inline ReadRel_NamedTable() : ReadRel_NamedTable(nullptr) {}
  ~ReadRel_NamedTable() override;
  explicit constexpr ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_NamedTable(const ReadRel_NamedTable& from);
  ReadRel_NamedTable(ReadRel_NamedTable&& from) noexcept
    : ReadRel_NamedTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_NamedTable& operator=(const ReadRel_NamedTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_NamedTable& operator=(ReadRel_NamedTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_NamedTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_NamedTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_NamedTable*>(
               &_ReadRel_NamedTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRel_NamedTable& a, ReadRel_NamedTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_NamedTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_NamedTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_NamedTable* New() const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(nullptr);
  }

  ReadRel_NamedTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_NamedTable& from);
  void MergeFrom(const ReadRel_NamedTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_NamedTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ReadRel.NamedTable";
  }
  protected:
  explicit ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.ReadRel.NamedTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_VirtualTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ReadRel.VirtualTable) */ {
 public:
  inline ReadRel_VirtualTable() : ReadRel_VirtualTable(nullptr) {}
  ~ReadRel_VirtualTable() override;
  explicit constexpr ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_VirtualTable(const ReadRel_VirtualTable& from);
  ReadRel_VirtualTable(ReadRel_VirtualTable&& from) noexcept
    : ReadRel_VirtualTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_VirtualTable& operator=(const ReadRel_VirtualTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_VirtualTable& operator=(ReadRel_VirtualTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_VirtualTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_VirtualTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_VirtualTable*>(
               &_ReadRel_VirtualTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRel_VirtualTable& a, ReadRel_VirtualTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_VirtualTable* New() const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(nullptr);
  }

  ReadRel_VirtualTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_VirtualTable& from);
  void MergeFrom(const ReadRel_VirtualTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_VirtualTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ReadRel.VirtualTable";
  }
  protected:
  explicit ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .io.substrait.Expression.Literal.Struct values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::io::substrait::Expression_Literal_Struct* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_Literal_Struct >*
      mutable_values();
  private:
  const ::io::substrait::Expression_Literal_Struct& _internal_values(int index) const;
  ::io::substrait::Expression_Literal_Struct* _internal_add_values();
  public:
  const ::io::substrait::Expression_Literal_Struct& values(int index) const;
  ::io::substrait::Expression_Literal_Struct* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_Literal_Struct >&
      values() const;

  // @@protoc_insertion_point(class_scope:io.substrait.ReadRel.VirtualTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_Literal_Struct > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ReadRel.LocalFiles.FileOrFiles) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles() : ReadRel_LocalFiles_FileOrFiles(nullptr) {}
  ~ReadRel_LocalFiles_FileOrFiles() override;
  explicit constexpr ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from);
  ReadRel_LocalFiles_FileOrFiles(ReadRel_LocalFiles_FileOrFiles&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles& operator=(const ReadRel_LocalFiles_FileOrFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles& operator=(ReadRel_LocalFiles_FileOrFiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles& default_instance() {
    return *internal_default_instance();
  }
  enum PathTypeCase {
    kUriPath = 1,
    kUriPathGlob = 2,
    PATH_TYPE_NOT_SET = 0,
  };

  static inline const ReadRel_LocalFiles_FileOrFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles*>(
               &_ReadRel_LocalFiles_FileOrFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadRel_LocalFiles_FileOrFiles& a, ReadRel_LocalFiles_FileOrFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ReadRel.LocalFiles.FileOrFiles";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles_Format Format;
  static constexpr Format UNKNOWN =
    ReadRel_LocalFiles_FileOrFiles_Format_UNKNOWN;
  static constexpr Format PARQUET =
    ReadRel_LocalFiles_FileOrFiles_Format_PARQUET;
  static inline bool Format_IsValid(int value) {
    return ReadRel_LocalFiles_FileOrFiles_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    ReadRel_LocalFiles_FileOrFiles_Format_Format_MIN;
  static constexpr Format Format_MAX =
    ReadRel_LocalFiles_FileOrFiles_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    ReadRel_LocalFiles_FileOrFiles_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return ReadRel_LocalFiles_FileOrFiles_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return ReadRel_LocalFiles_FileOrFiles_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Format* value) {
    return ReadRel_LocalFiles_FileOrFiles_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 3,
    kUriPathFieldNumber = 1,
    kUriPathGlobFieldNumber = 2,
  };
  // .io.substrait.ReadRel.LocalFiles.FileOrFiles.Format format = 3;
  void clear_format();
  ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format format() const;
  void set_format(::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format value);
  private:
  ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format _internal_format() const;
  void _internal_set_format(::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format value);
  public:

  // string uri_path = 1;
  bool has_uri_path() const;
  private:
  bool _internal_has_uri_path() const;
  public:
  void clear_uri_path();
  const std::string& uri_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_path();
  std::string* release_uri_path();
  void set_allocated_uri_path(std::string* uri_path);
  private:
  const std::string& _internal_uri_path() const;
  void _internal_set_uri_path(const std::string& value);
  std::string* _internal_mutable_uri_path();
  public:

  // string uri_path_glob = 2;
  bool has_uri_path_glob() const;
  private:
  bool _internal_has_uri_path_glob() const;
  public:
  void clear_uri_path_glob();
  const std::string& uri_path_glob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_path_glob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_path_glob();
  std::string* release_uri_path_glob();
  void set_allocated_uri_path_glob(std::string* uri_path_glob);
  private:
  const std::string& _internal_uri_path_glob() const;
  void _internal_set_uri_path_glob(const std::string& value);
  std::string* _internal_mutable_uri_path_glob();
  public:

  void clear_path_type();
  PathTypeCase path_type_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.ReadRel.LocalFiles.FileOrFiles)
 private:
  class _Internal;
  void set_has_uri_path();
  void set_has_uri_path_glob();

  inline bool has_path_type() const;
  inline void clear_has_path_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int format_;
  union PathTypeUnion {
    constexpr PathTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_glob_;
  } path_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ReadRel.LocalFiles) */ {
 public:
  inline ReadRel_LocalFiles() : ReadRel_LocalFiles(nullptr) {}
  ~ReadRel_LocalFiles() override;
  explicit constexpr ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles(const ReadRel_LocalFiles& from);
  ReadRel_LocalFiles(ReadRel_LocalFiles&& from) noexcept
    : ReadRel_LocalFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles& operator=(const ReadRel_LocalFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles& operator=(ReadRel_LocalFiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles*>(
               &_ReadRel_LocalFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReadRel_LocalFiles& a, ReadRel_LocalFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(nullptr);
  }

  ReadRel_LocalFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles& from);
  void MergeFrom(const ReadRel_LocalFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ReadRel.LocalFiles";
  }
  protected:
  explicit ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles FileOrFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .io.substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::io::substrait::ReadRel_LocalFiles_FileOrFiles* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >*
      mutable_items();
  private:
  const ::io::substrait::ReadRel_LocalFiles_FileOrFiles& _internal_items(int index) const;
  ::io::substrait::ReadRel_LocalFiles_FileOrFiles* _internal_add_items();
  public:
  const ::io::substrait::ReadRel_LocalFiles_FileOrFiles& items(int index) const;
  ::io::substrait::ReadRel_LocalFiles_FileOrFiles* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >&
      items() const;

  // @@protoc_insertion_point(class_scope:io.substrait.ReadRel.LocalFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::ReadRel_LocalFiles_FileOrFiles > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ReadRel) */ {
 public:
  inline ReadRel() : ReadRel(nullptr) {}
  ~ReadRel() override;
  explicit constexpr ReadRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel(const ReadRel& from);
  ReadRel(ReadRel&& from) noexcept
    : ReadRel() {
    *this = ::std::move(from);
  }

  inline ReadRel& operator=(const ReadRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel& operator=(ReadRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel& default_instance() {
    return *internal_default_instance();
  }
  enum ReadTypeCase {
    kVirtualTable = 5,
    kLocalFiles = 6,
    kNamedTable = 7,
    READ_TYPE_NOT_SET = 0,
  };

  static inline const ReadRel* internal_default_instance() {
    return reinterpret_cast<const ReadRel*>(
               &_ReadRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadRel& a, ReadRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel* New() const final {
    return CreateMaybeMessage<ReadRel>(nullptr);
  }

  ReadRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel& from);
  void MergeFrom(const ReadRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ReadRel";
  }
  protected:
  explicit ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_NamedTable NamedTable;
  typedef ReadRel_VirtualTable VirtualTable;
  typedef ReadRel_LocalFiles LocalFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBaseSchemaFieldNumber = 2,
    kFilterFieldNumber = 3,
    kProjectionFieldNumber = 4,
    kVirtualTableFieldNumber = 5,
    kLocalFilesFieldNumber = 6,
    kNamedTableFieldNumber = 7,
  };
  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Type.NamedStruct base_schema = 2;
  bool has_base_schema() const;
  private:
  bool _internal_has_base_schema() const;
  public:
  void clear_base_schema();
  const ::io::substrait::Type_NamedStruct& base_schema() const;
  ::io::substrait::Type_NamedStruct* release_base_schema();
  ::io::substrait::Type_NamedStruct* mutable_base_schema();
  void set_allocated_base_schema(::io::substrait::Type_NamedStruct* base_schema);
  private:
  const ::io::substrait::Type_NamedStruct& _internal_base_schema() const;
  ::io::substrait::Type_NamedStruct* _internal_mutable_base_schema();
  public:
  void unsafe_arena_set_allocated_base_schema(
      ::io::substrait::Type_NamedStruct* base_schema);
  ::io::substrait::Type_NamedStruct* unsafe_arena_release_base_schema();

  // .io.substrait.Expression filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::io::substrait::Expression& filter() const;
  ::io::substrait::Expression* release_filter();
  ::io::substrait::Expression* mutable_filter();
  void set_allocated_filter(::io::substrait::Expression* filter);
  private:
  const ::io::substrait::Expression& _internal_filter() const;
  ::io::substrait::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::io::substrait::Expression* filter);
  ::io::substrait::Expression* unsafe_arena_release_filter();

  // .io.substrait.MaskExpression projection = 4;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::io::substrait::MaskExpression& projection() const;
  ::io::substrait::MaskExpression* release_projection();
  ::io::substrait::MaskExpression* mutable_projection();
  void set_allocated_projection(::io::substrait::MaskExpression* projection);
  private:
  const ::io::substrait::MaskExpression& _internal_projection() const;
  ::io::substrait::MaskExpression* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::io::substrait::MaskExpression* projection);
  ::io::substrait::MaskExpression* unsafe_arena_release_projection();

  // .io.substrait.ReadRel.VirtualTable virtual_table = 5;
  bool has_virtual_table() const;
  private:
  bool _internal_has_virtual_table() const;
  public:
  void clear_virtual_table();
  const ::io::substrait::ReadRel_VirtualTable& virtual_table() const;
  ::io::substrait::ReadRel_VirtualTable* release_virtual_table();
  ::io::substrait::ReadRel_VirtualTable* mutable_virtual_table();
  void set_allocated_virtual_table(::io::substrait::ReadRel_VirtualTable* virtual_table);
  private:
  const ::io::substrait::ReadRel_VirtualTable& _internal_virtual_table() const;
  ::io::substrait::ReadRel_VirtualTable* _internal_mutable_virtual_table();
  public:
  void unsafe_arena_set_allocated_virtual_table(
      ::io::substrait::ReadRel_VirtualTable* virtual_table);
  ::io::substrait::ReadRel_VirtualTable* unsafe_arena_release_virtual_table();

  // .io.substrait.ReadRel.LocalFiles local_files = 6;
  bool has_local_files() const;
  private:
  bool _internal_has_local_files() const;
  public:
  void clear_local_files();
  const ::io::substrait::ReadRel_LocalFiles& local_files() const;
  ::io::substrait::ReadRel_LocalFiles* release_local_files();
  ::io::substrait::ReadRel_LocalFiles* mutable_local_files();
  void set_allocated_local_files(::io::substrait::ReadRel_LocalFiles* local_files);
  private:
  const ::io::substrait::ReadRel_LocalFiles& _internal_local_files() const;
  ::io::substrait::ReadRel_LocalFiles* _internal_mutable_local_files();
  public:
  void unsafe_arena_set_allocated_local_files(
      ::io::substrait::ReadRel_LocalFiles* local_files);
  ::io::substrait::ReadRel_LocalFiles* unsafe_arena_release_local_files();

  // .io.substrait.ReadRel.NamedTable named_table = 7;
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;
  public:
  void clear_named_table();
  const ::io::substrait::ReadRel_NamedTable& named_table() const;
  ::io::substrait::ReadRel_NamedTable* release_named_table();
  ::io::substrait::ReadRel_NamedTable* mutable_named_table();
  void set_allocated_named_table(::io::substrait::ReadRel_NamedTable* named_table);
  private:
  const ::io::substrait::ReadRel_NamedTable& _internal_named_table() const;
  ::io::substrait::ReadRel_NamedTable* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::io::substrait::ReadRel_NamedTable* named_table);
  ::io::substrait::ReadRel_NamedTable* unsafe_arena_release_named_table();

  void clear_read_type();
  ReadTypeCase read_type_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.ReadRel)
 private:
  class _Internal;
  void set_has_virtual_table();
  void set_has_local_files();
  void set_has_named_table();

  inline bool has_read_type() const;
  inline void clear_has_read_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Type_NamedStruct* base_schema_;
  ::io::substrait::Expression* filter_;
  ::io::substrait::MaskExpression* projection_;
  union ReadTypeUnion {
    constexpr ReadTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::substrait::ReadRel_VirtualTable* virtual_table_;
    ::io::substrait::ReadRel_LocalFiles* local_files_;
    ::io::substrait::ReadRel_NamedTable* named_table_;
  } read_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class ProjectRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.ProjectRel) */ {
 public:
  inline ProjectRel() : ProjectRel(nullptr) {}
  ~ProjectRel() override;
  explicit constexpr ProjectRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRel(const ProjectRel& from);
  ProjectRel(ProjectRel&& from) noexcept
    : ProjectRel() {
    *this = ::std::move(from);
  }

  inline ProjectRel& operator=(const ProjectRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRel& operator=(ProjectRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRel* internal_default_instance() {
    return reinterpret_cast<const ProjectRel*>(
               &_ProjectRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProjectRel& a, ProjectRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectRel* New() const final {
    return CreateMaybeMessage<ProjectRel>(nullptr);
  }

  ProjectRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectRel& from);
  void MergeFrom(const ProjectRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.ProjectRel";
  }
  protected:
  explicit ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // repeated .io.substrait.Expression expressions = 3;
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;
  public:
  void clear_expressions();
  ::io::substrait::Expression* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression >*
      mutable_expressions();
  private:
  const ::io::substrait::Expression& _internal_expressions(int index) const;
  ::io::substrait::Expression* _internal_add_expressions();
  public:
  const ::io::substrait::Expression& expressions(int index) const;
  ::io::substrait::Expression* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression >&
      expressions() const;

  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::io::substrait::Rel& input() const;
  ::io::substrait::Rel* release_input();
  ::io::substrait::Rel* mutable_input();
  void set_allocated_input(::io::substrait::Rel* input);
  private:
  const ::io::substrait::Rel& _internal_input() const;
  ::io::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::io::substrait::Rel* input);
  ::io::substrait::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:io.substrait.ProjectRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression > expressions_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class JoinRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.JoinRel) */ {
 public:
  inline JoinRel() : JoinRel(nullptr) {}
  ~JoinRel() override;
  explicit constexpr JoinRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRel(const JoinRel& from);
  JoinRel(JoinRel&& from) noexcept
    : JoinRel() {
    *this = ::std::move(from);
  }

  inline JoinRel& operator=(const JoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRel& operator=(JoinRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRel* internal_default_instance() {
    return reinterpret_cast<const JoinRel*>(
               &_JoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JoinRel& a, JoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRel* New() const final {
    return CreateMaybeMessage<JoinRel>(nullptr);
  }

  JoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRel& from);
  void MergeFrom(const JoinRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.JoinRel";
  }
  protected:
  explicit JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JoinRel_JoinType JoinType;
  static constexpr JoinType UNKNOWN =
    JoinRel_JoinType_UNKNOWN;
  static constexpr JoinType INNER =
    JoinRel_JoinType_INNER;
  static constexpr JoinType OUTER =
    JoinRel_JoinType_OUTER;
  static constexpr JoinType LEFT =
    JoinRel_JoinType_LEFT;
  static constexpr JoinType RIGHT =
    JoinRel_JoinType_RIGHT;
  static inline bool JoinType_IsValid(int value) {
    return JoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    JoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    JoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    JoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return JoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return JoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinType* value) {
    return JoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kExpressionFieldNumber = 4,
    kPostJoinFilterFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::io::substrait::Rel& left() const;
  ::io::substrait::Rel* release_left();
  ::io::substrait::Rel* mutable_left();
  void set_allocated_left(::io::substrait::Rel* left);
  private:
  const ::io::substrait::Rel& _internal_left() const;
  ::io::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::io::substrait::Rel* left);
  ::io::substrait::Rel* unsafe_arena_release_left();

  // .io.substrait.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::io::substrait::Rel& right() const;
  ::io::substrait::Rel* release_right();
  ::io::substrait::Rel* mutable_right();
  void set_allocated_right(::io::substrait::Rel* right);
  private:
  const ::io::substrait::Rel& _internal_right() const;
  ::io::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::io::substrait::Rel* right);
  ::io::substrait::Rel* unsafe_arena_release_right();

  // .io.substrait.Expression expression = 4;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::io::substrait::Expression& expression() const;
  ::io::substrait::Expression* release_expression();
  ::io::substrait::Expression* mutable_expression();
  void set_allocated_expression(::io::substrait::Expression* expression);
  private:
  const ::io::substrait::Expression& _internal_expression() const;
  ::io::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::io::substrait::Expression* expression);
  ::io::substrait::Expression* unsafe_arena_release_expression();

  // .io.substrait.Expression post_join_filter = 5;
  bool has_post_join_filter() const;
  private:
  bool _internal_has_post_join_filter() const;
  public:
  void clear_post_join_filter();
  const ::io::substrait::Expression& post_join_filter() const;
  ::io::substrait::Expression* release_post_join_filter();
  ::io::substrait::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::io::substrait::Expression* post_join_filter);
  private:
  const ::io::substrait::Expression& _internal_post_join_filter() const;
  ::io::substrait::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::io::substrait::Expression* post_join_filter);
  ::io::substrait::Expression* unsafe_arena_release_post_join_filter();

  // .io.substrait.JoinRel.JoinType type = 6;
  void clear_type();
  ::io::substrait::JoinRel_JoinType type() const;
  void set_type(::io::substrait::JoinRel_JoinType value);
  private:
  ::io::substrait::JoinRel_JoinType _internal_type() const;
  void _internal_set_type(::io::substrait::JoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.JoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* left_;
  ::io::substrait::Rel* right_;
  ::io::substrait::Expression* expression_;
  ::io::substrait::Expression* post_join_filter_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class FetchRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.FetchRel) */ {
 public:
  inline FetchRel() : FetchRel(nullptr) {}
  ~FetchRel() override;
  explicit constexpr FetchRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRel(const FetchRel& from);
  FetchRel(FetchRel&& from) noexcept
    : FetchRel() {
    *this = ::std::move(from);
  }

  inline FetchRel& operator=(const FetchRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRel& operator=(FetchRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRel* internal_default_instance() {
    return reinterpret_cast<const FetchRel*>(
               &_FetchRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FetchRel& a, FetchRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchRel* New() const final {
    return CreateMaybeMessage<FetchRel>(nullptr);
  }

  FetchRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchRel& from);
  void MergeFrom(const FetchRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.FetchRel";
  }
  protected:
  explicit FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::io::substrait::Rel& input() const;
  ::io::substrait::Rel* release_input();
  ::io::substrait::Rel* mutable_input();
  void set_allocated_input(::io::substrait::Rel* input);
  private:
  const ::io::substrait::Rel& _internal_input() const;
  ::io::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::io::substrait::Rel* input);
  ::io::substrait::Rel* unsafe_arena_release_input();

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.FetchRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* input_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Grouping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.AggregateRel.Grouping) */ {
 public:
  inline AggregateRel_Grouping() : AggregateRel_Grouping(nullptr) {}
  ~AggregateRel_Grouping() override;
  explicit constexpr AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Grouping(const AggregateRel_Grouping& from);
  AggregateRel_Grouping(AggregateRel_Grouping&& from) noexcept
    : AggregateRel_Grouping() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Grouping& operator=(const AggregateRel_Grouping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Grouping& operator=(AggregateRel_Grouping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Grouping& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Grouping* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Grouping*>(
               &_AggregateRel_Grouping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AggregateRel_Grouping& a, AggregateRel_Grouping& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Grouping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Grouping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel_Grouping* New() const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(nullptr);
  }

  AggregateRel_Grouping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel_Grouping& from);
  void MergeFrom(const AggregateRel_Grouping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Grouping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.AggregateRel.Grouping";
  }
  protected:
  explicit AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldsFieldNumber = 1,
  };
  // repeated int32 input_fields = 1;
  int input_fields_size() const;
  private:
  int _internal_input_fields_size() const;
  public:
  void clear_input_fields();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_fields(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_fields() const;
  void _internal_add_input_fields(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_fields();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_fields(int index) const;
  void set_input_fields(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_fields(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_fields();

  // @@protoc_insertion_point(class_scope:io.substrait.AggregateRel.Grouping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_fields_;
  mutable std::atomic<int> _input_fields_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Measure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.AggregateRel.Measure) */ {
 public:
  inline AggregateRel_Measure() : AggregateRel_Measure(nullptr) {}
  ~AggregateRel_Measure() override;
  explicit constexpr AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Measure(const AggregateRel_Measure& from);
  AggregateRel_Measure(AggregateRel_Measure&& from) noexcept
    : AggregateRel_Measure() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Measure& operator=(const AggregateRel_Measure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Measure& operator=(AggregateRel_Measure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Measure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Measure* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Measure*>(
               &_AggregateRel_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AggregateRel_Measure& a, AggregateRel_Measure& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Measure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Measure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel_Measure* New() const final {
    return CreateMaybeMessage<AggregateRel_Measure>(nullptr);
  }

  AggregateRel_Measure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel_Measure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel_Measure& from);
  void MergeFrom(const AggregateRel_Measure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Measure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.AggregateRel.Measure";
  }
  protected:
  explicit AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureFieldNumber = 1,
  };
  // .io.substrait.Expression.AggregateFunction measure = 1;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::io::substrait::Expression_AggregateFunction& measure() const;
  ::io::substrait::Expression_AggregateFunction* release_measure();
  ::io::substrait::Expression_AggregateFunction* mutable_measure();
  void set_allocated_measure(::io::substrait::Expression_AggregateFunction* measure);
  private:
  const ::io::substrait::Expression_AggregateFunction& _internal_measure() const;
  ::io::substrait::Expression_AggregateFunction* _internal_mutable_measure();
  public:
  void unsafe_arena_set_allocated_measure(
      ::io::substrait::Expression_AggregateFunction* measure);
  ::io::substrait::Expression_AggregateFunction* unsafe_arena_release_measure();

  // @@protoc_insertion_point(class_scope:io.substrait.AggregateRel.Measure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::Expression_AggregateFunction* measure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.AggregateRel) */ {
 public:
  inline AggregateRel() : AggregateRel(nullptr) {}
  ~AggregateRel() override;
  explicit constexpr AggregateRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel(const AggregateRel& from);
  AggregateRel(AggregateRel&& from) noexcept
    : AggregateRel() {
    *this = ::std::move(from);
  }

  inline AggregateRel& operator=(const AggregateRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel& operator=(AggregateRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel* internal_default_instance() {
    return reinterpret_cast<const AggregateRel*>(
               &_AggregateRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AggregateRel& a, AggregateRel& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel* New() const final {
    return CreateMaybeMessage<AggregateRel>(nullptr);
  }

  AggregateRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel& from);
  void MergeFrom(const AggregateRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.AggregateRel";
  }
  protected:
  explicit AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AggregateRel_Grouping Grouping;
  typedef AggregateRel_Measure Measure;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingsFieldNumber = 3,
    kMeasuresFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kPhaseFieldNumber = 5,
  };
  // repeated .io.substrait.AggregateRel.Grouping groupings = 3;
  int groupings_size() const;
  private:
  int _internal_groupings_size() const;
  public:
  void clear_groupings();
  ::io::substrait::AggregateRel_Grouping* mutable_groupings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Grouping >*
      mutable_groupings();
  private:
  const ::io::substrait::AggregateRel_Grouping& _internal_groupings(int index) const;
  ::io::substrait::AggregateRel_Grouping* _internal_add_groupings();
  public:
  const ::io::substrait::AggregateRel_Grouping& groupings(int index) const;
  ::io::substrait::AggregateRel_Grouping* add_groupings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Grouping >&
      groupings() const;

  // repeated .io.substrait.AggregateRel.Measure measures = 4;
  int measures_size() const;
  private:
  int _internal_measures_size() const;
  public:
  void clear_measures();
  ::io::substrait::AggregateRel_Measure* mutable_measures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Measure >*
      mutable_measures();
  private:
  const ::io::substrait::AggregateRel_Measure& _internal_measures(int index) const;
  ::io::substrait::AggregateRel_Measure* _internal_add_measures();
  public:
  const ::io::substrait::AggregateRel_Measure& measures(int index) const;
  ::io::substrait::AggregateRel_Measure* add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Measure >&
      measures() const;

  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::io::substrait::Rel& input() const;
  ::io::substrait::Rel* release_input();
  ::io::substrait::Rel* mutable_input();
  void set_allocated_input(::io::substrait::Rel* input);
  private:
  const ::io::substrait::Rel& _internal_input() const;
  ::io::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::io::substrait::Rel* input);
  ::io::substrait::Rel* unsafe_arena_release_input();

  // .io.substrait.Expression.AggregationPhase phase = 5;
  void clear_phase();
  ::io::substrait::Expression_AggregationPhase phase() const;
  void set_phase(::io::substrait::Expression_AggregationPhase value);
  private:
  ::io::substrait::Expression_AggregationPhase _internal_phase() const;
  void _internal_set_phase(::io::substrait::Expression_AggregationPhase value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.AggregateRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Grouping > groupings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Measure > measures_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* input_;
  int phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class SortRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.SortRel) */ {
 public:
  inline SortRel() : SortRel(nullptr) {}
  ~SortRel() override;
  explicit constexpr SortRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortRel(const SortRel& from);
  SortRel(SortRel&& from) noexcept
    : SortRel() {
    *this = ::std::move(from);
  }

  inline SortRel& operator=(const SortRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortRel& operator=(SortRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortRel* internal_default_instance() {
    return reinterpret_cast<const SortRel*>(
               &_SortRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SortRel& a, SortRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SortRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortRel* New() const final {
    return CreateMaybeMessage<SortRel>(nullptr);
  }

  SortRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortRel& from);
  void MergeFrom(const SortRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.SortRel";
  }
  protected:
  explicit SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // repeated .io.substrait.Expression.SortField sorts = 3;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::io::substrait::Expression_SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_SortField >*
      mutable_sorts();
  private:
  const ::io::substrait::Expression_SortField& _internal_sorts(int index) const;
  ::io::substrait::Expression_SortField* _internal_add_sorts();
  public:
  const ::io::substrait::Expression_SortField& sorts(int index) const;
  ::io::substrait::Expression_SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_SortField >&
      sorts() const;

  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::io::substrait::Rel& input() const;
  ::io::substrait::Rel* release_input();
  ::io::substrait::Rel* mutable_input();
  void set_allocated_input(::io::substrait::Rel* input);
  private:
  const ::io::substrait::Rel& _internal_input() const;
  ::io::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::io::substrait::Rel* input);
  ::io::substrait::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:io.substrait.SortRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_SortField > sorts_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class FilterRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.FilterRel) */ {
 public:
  inline FilterRel() : FilterRel(nullptr) {}
  ~FilterRel() override;
  explicit constexpr FilterRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterRel(const FilterRel& from);
  FilterRel(FilterRel&& from) noexcept
    : FilterRel() {
    *this = ::std::move(from);
  }

  inline FilterRel& operator=(const FilterRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterRel& operator=(FilterRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterRel* internal_default_instance() {
    return reinterpret_cast<const FilterRel*>(
               &_FilterRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FilterRel& a, FilterRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterRel* New() const final {
    return CreateMaybeMessage<FilterRel>(nullptr);
  }

  FilterRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterRel& from);
  void MergeFrom(const FilterRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.FilterRel";
  }
  protected:
  explicit FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kConditionFieldNumber = 3,
  };
  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::io::substrait::Rel& input() const;
  ::io::substrait::Rel* release_input();
  ::io::substrait::Rel* mutable_input();
  void set_allocated_input(::io::substrait::Rel* input);
  private:
  const ::io::substrait::Rel& _internal_input() const;
  ::io::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::io::substrait::Rel* input);
  ::io::substrait::Rel* unsafe_arena_release_input();

  // .io.substrait.Expression condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::io::substrait::Expression& condition() const;
  ::io::substrait::Expression* release_condition();
  ::io::substrait::Expression* mutable_condition();
  void set_allocated_condition(::io::substrait::Expression* condition);
  private:
  const ::io::substrait::Expression& _internal_condition() const;
  ::io::substrait::Expression* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::io::substrait::Expression* condition);
  ::io::substrait::Expression* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:io.substrait.FilterRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::RelCommon* common_;
  ::io::substrait::Rel* input_;
  ::io::substrait::Expression* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class SetRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.SetRel) */ {
 public:
  inline SetRel() : SetRel(nullptr) {}
  ~SetRel() override;
  explicit constexpr SetRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRel(const SetRel& from);
  SetRel(SetRel&& from) noexcept
    : SetRel() {
    *this = ::std::move(from);
  }

  inline SetRel& operator=(const SetRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRel& operator=(SetRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRel* internal_default_instance() {
    return reinterpret_cast<const SetRel*>(
               &_SetRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetRel& a, SetRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRel* New() const final {
    return CreateMaybeMessage<SetRel>(nullptr);
  }

  SetRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRel& from);
  void MergeFrom(const SetRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.SetRel";
  }
  protected:
  explicit SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetRel_SetOp SetOp;
  static constexpr SetOp UNKNOWN =
    SetRel_SetOp_UNKNOWN;
  static constexpr SetOp MINUS_PRIMARY =
    SetRel_SetOp_MINUS_PRIMARY;
  static constexpr SetOp MINUS_MULTISET =
    SetRel_SetOp_MINUS_MULTISET;
  static constexpr SetOp INTERSECTION_PRIMARY =
    SetRel_SetOp_INTERSECTION_PRIMARY;
  static constexpr SetOp INTERSECTION_MULTISET =
    SetRel_SetOp_INTERSECTION_MULTISET;
  static constexpr SetOp UNION_DISTINCT =
    SetRel_SetOp_UNION_DISTINCT;
  static constexpr SetOp UNION_ALL =
    SetRel_SetOp_UNION_ALL;
  static inline bool SetOp_IsValid(int value) {
    return SetRel_SetOp_IsValid(value);
  }
  static constexpr SetOp SetOp_MIN =
    SetRel_SetOp_SetOp_MIN;
  static constexpr SetOp SetOp_MAX =
    SetRel_SetOp_SetOp_MAX;
  static constexpr int SetOp_ARRAYSIZE =
    SetRel_SetOp_SetOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SetOp_descriptor() {
    return SetRel_SetOp_descriptor();
  }
  template<typename T>
  static inline const std::string& SetOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SetOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SetOp_Name.");
    return SetRel_SetOp_Name(enum_t_value);
  }
  static inline bool SetOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SetOp* value) {
    return SetRel_SetOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kOpFieldNumber = 3,
  };
  // repeated .io.substrait.Rel inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::io::substrait::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >*
      mutable_inputs();
  private:
  const ::io::substrait::Rel& _internal_inputs(int index) const;
  ::io::substrait::Rel* _internal_add_inputs();
  public:
  const ::io::substrait::Rel& inputs(int index) const;
  ::io::substrait::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >&
      inputs() const;

  // .io.substrait.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::io::substrait::RelCommon& common() const;
  ::io::substrait::RelCommon* release_common();
  ::io::substrait::RelCommon* mutable_common();
  void set_allocated_common(::io::substrait::RelCommon* common);
  private:
  const ::io::substrait::RelCommon& _internal_common() const;
  ::io::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::io::substrait::RelCommon* common);
  ::io::substrait::RelCommon* unsafe_arena_release_common();

  // .io.substrait.SetRel.SetOp op = 3;
  void clear_op();
  ::io::substrait::SetRel_SetOp op() const;
  void set_op(::io::substrait::SetRel_SetOp value);
  private:
  ::io::substrait::SetRel_SetOp _internal_op() const;
  void _internal_set_op(::io::substrait::SetRel_SetOp value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.SetRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel > inputs_;
  ::io::substrait::RelCommon* common_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relations_2eproto;
};
// -------------------------------------------------------------------

class Rel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Rel) */ {
 public:
  inline Rel() : Rel(nullptr) {}
  ~Rel() override;
  explicit constexpr Rel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rel(const Rel& from);
  Rel(Rel&& from) noexcept
    : Rel() {
    *this = ::std::move(from);
  }

  inline Rel& operator=(const Rel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rel& operator=(Rel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rel& default_instance() {
    return *internal_default_instance();
  }
  enum RelTypeCase {
    kRead = 1,
    kFilter = 2,
    kFetch = 3,
    kAggregate = 4,
    kSort = 5,
    kJoin = 6,
    kProject = 7,
    kSet = 8,
    RELTYPE_NOT_SET = 0,
  };

  static inline const Rel* internal_default_instance() {
    return reinterpret_cast<const Rel*>(
               &_Rel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Rel& a, Rel& b) {
    a.Swap(&b);
  }
  inline void Swap(Rel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rel* New() const final {
    return CreateMaybeMessage<Rel>(nullptr);
  }

  Rel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rel& from);
  void MergeFrom(const Rel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Rel";
  }
  protected:
  explicit Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kFilterFieldNumber = 2,
    kFetchFieldNumber = 3,
    kAggregateFieldNumber = 4,
    kSortFieldNumber = 5,
    kJoinFieldNumber = 6,
    kProjectFieldNumber = 7,
    kSetFieldNumber = 8,
  };
  // .io.substrait.ReadRel read = 1;
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  const ::io::substrait::ReadRel& read() const;
  ::io::substrait::ReadRel* release_read();
  ::io::substrait::ReadRel* mutable_read();
  void set_allocated_read(::io::substrait::ReadRel* read);
  private:
  const ::io::substrait::ReadRel& _internal_read() const;
  ::io::substrait::ReadRel* _internal_mutable_read();
  public:
  void unsafe_arena_set_allocated_read(
      ::io::substrait::ReadRel* read);
  ::io::substrait::ReadRel* unsafe_arena_release_read();

  // .io.substrait.FilterRel filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::io::substrait::FilterRel& filter() const;
  ::io::substrait::FilterRel* release_filter();
  ::io::substrait::FilterRel* mutable_filter();
  void set_allocated_filter(::io::substrait::FilterRel* filter);
  private:
  const ::io::substrait::FilterRel& _internal_filter() const;
  ::io::substrait::FilterRel* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::io::substrait::FilterRel* filter);
  ::io::substrait::FilterRel* unsafe_arena_release_filter();

  // .io.substrait.FetchRel fetch = 3;
  bool has_fetch() const;
  private:
  bool _internal_has_fetch() const;
  public:
  void clear_fetch();
  const ::io::substrait::FetchRel& fetch() const;
  ::io::substrait::FetchRel* release_fetch();
  ::io::substrait::FetchRel* mutable_fetch();
  void set_allocated_fetch(::io::substrait::FetchRel* fetch);
  private:
  const ::io::substrait::FetchRel& _internal_fetch() const;
  ::io::substrait::FetchRel* _internal_mutable_fetch();
  public:
  void unsafe_arena_set_allocated_fetch(
      ::io::substrait::FetchRel* fetch);
  ::io::substrait::FetchRel* unsafe_arena_release_fetch();

  // .io.substrait.AggregateRel aggregate = 4;
  bool has_aggregate() const;
  private:
  bool _internal_has_aggregate() const;
  public:
  void clear_aggregate();
  const ::io::substrait::AggregateRel& aggregate() const;
  ::io::substrait::AggregateRel* release_aggregate();
  ::io::substrait::AggregateRel* mutable_aggregate();
  void set_allocated_aggregate(::io::substrait::AggregateRel* aggregate);
  private:
  const ::io::substrait::AggregateRel& _internal_aggregate() const;
  ::io::substrait::AggregateRel* _internal_mutable_aggregate();
  public:
  void unsafe_arena_set_allocated_aggregate(
      ::io::substrait::AggregateRel* aggregate);
  ::io::substrait::AggregateRel* unsafe_arena_release_aggregate();

  // .io.substrait.SortRel sort = 5;
  bool has_sort() const;
  private:
  bool _internal_has_sort() const;
  public:
  void clear_sort();
  const ::io::substrait::SortRel& sort() const;
  ::io::substrait::SortRel* release_sort();
  ::io::substrait::SortRel* mutable_sort();
  void set_allocated_sort(::io::substrait::SortRel* sort);
  private:
  const ::io::substrait::SortRel& _internal_sort() const;
  ::io::substrait::SortRel* _internal_mutable_sort();
  public:
  void unsafe_arena_set_allocated_sort(
      ::io::substrait::SortRel* sort);
  ::io::substrait::SortRel* unsafe_arena_release_sort();

  // .io.substrait.JoinRel join = 6;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::io::substrait::JoinRel& join() const;
  ::io::substrait::JoinRel* release_join();
  ::io::substrait::JoinRel* mutable_join();
  void set_allocated_join(::io::substrait::JoinRel* join);
  private:
  const ::io::substrait::JoinRel& _internal_join() const;
  ::io::substrait::JoinRel* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::io::substrait::JoinRel* join);
  ::io::substrait::JoinRel* unsafe_arena_release_join();

  // .io.substrait.ProjectRel project = 7;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::io::substrait::ProjectRel& project() const;
  ::io::substrait::ProjectRel* release_project();
  ::io::substrait::ProjectRel* mutable_project();
  void set_allocated_project(::io::substrait::ProjectRel* project);
  private:
  const ::io::substrait::ProjectRel& _internal_project() const;
  ::io::substrait::ProjectRel* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::io::substrait::ProjectRel* project);
  ::io::substrait::ProjectRel* unsafe_arena_release_project();

  // .io.substrait.SetRel set = 8;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::io::substrait::SetRel& set() const;
  ::io::substrait::SetRel* release_set();
  ::io::substrait::SetRel* mutable_set();
  void set_allocated_set(::io::substrait::SetRel* set);
  private:
  const ::io::substrait::SetRel& _internal_set() const;
  ::io::substrait::SetRel* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::io::substrait::SetRel* set);
  ::io::substrait::SetRel* unsafe_arena_release_set();

  void clear_RelType();
  RelTypeCase RelType_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.Rel)
 private:
  class _Internal;
  void set_has_read();
  void set_has_filter();
  void set_has_fetch();
  void set_has_aggregate();
  void set_has_sort();
  void set_has_join();
  void set_has_project();
  void set_has_set();

  inline bool has_RelType() const;
  inline void clear_has_RelType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RelTypeUnion {
    constexpr RelTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::substrait::ReadRel* read_;
    ::io::substrait::FilterRel* filter_;
    ::io::substrait::FetchRel* fetch_;
    ::io::substrait::AggregateRel* aggregate_;
    ::io::substrait::SortRel* sort_;
    ::io::substrait::JoinRel* join_;
    ::io::substrait::ProjectRel* project_;
    ::io::substrait::SetRel* set_;
  } RelType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_relations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelCommon_Direct

// -------------------------------------------------------------------

// RelCommon_Emit

// repeated int32 output_mapping = 1;
inline int RelCommon_Emit::_internal_output_mapping_size() const {
  return output_mapping_.size();
}
inline int RelCommon_Emit::output_mapping_size() const {
  return _internal_output_mapping_size();
}
inline void RelCommon_Emit::clear_output_mapping() {
  output_mapping_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelCommon_Emit::_internal_output_mapping(int index) const {
  return output_mapping_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelCommon_Emit::output_mapping(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping(index);
}
inline void RelCommon_Emit::set_output_mapping(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_mapping_.Set(index, value);
  // @@protoc_insertion_point(field_set:io.substrait.RelCommon.Emit.output_mapping)
}
inline void RelCommon_Emit::_internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_mapping_.Add(value);
}
inline void RelCommon_Emit::add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_output_mapping(value);
  // @@protoc_insertion_point(field_add:io.substrait.RelCommon.Emit.output_mapping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RelCommon_Emit::_internal_output_mapping() const {
  return output_mapping_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RelCommon_Emit::output_mapping() const {
  // @@protoc_insertion_point(field_list:io.substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RelCommon_Emit::_internal_mutable_output_mapping() {
  return &output_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RelCommon_Emit::mutable_output_mapping() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.RelCommon.Emit.output_mapping)
  return _internal_mutable_output_mapping();
}

// -------------------------------------------------------------------

// RelCommon_Hint_Stats

// double row_count = 1;
inline void RelCommon_Hint_Stats::clear_row_count() {
  row_count_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_row_count() const {
  return row_count_;
}
inline double RelCommon_Hint_Stats::row_count() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.Stats.row_count)
  return _internal_row_count();
}
inline void RelCommon_Hint_Stats::_internal_set_row_count(double value) {
  
  row_count_ = value;
}
inline void RelCommon_Hint_Stats::set_row_count(double value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:io.substrait.RelCommon.Hint.Stats.row_count)
}

// double record_size = 2;
inline void RelCommon_Hint_Stats::clear_record_size() {
  record_size_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_record_size() const {
  return record_size_;
}
inline double RelCommon_Hint_Stats::record_size() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.Stats.record_size)
  return _internal_record_size();
}
inline void RelCommon_Hint_Stats::_internal_set_record_size(double value) {
  
  record_size_ = value;
}
inline void RelCommon_Hint_Stats::set_record_size(double value) {
  _internal_set_record_size(value);
  // @@protoc_insertion_point(field_set:io.substrait.RelCommon.Hint.Stats.record_size)
}

// -------------------------------------------------------------------

// RelCommon_Hint_HintKeyValue

// string key = 1;
inline void RelCommon_Hint_HintKeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RelCommon_Hint_HintKeyValue::key() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.HintKeyValue.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void RelCommon_Hint_HintKeyValue::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.RelCommon.Hint.HintKeyValue.key)
}
inline std::string* RelCommon_Hint_HintKeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.Hint.HintKeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& RelCommon_Hint_HintKeyValue::_internal_key() const {
  return key_.Get();
}
inline void RelCommon_Hint_HintKeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* RelCommon_Hint_HintKeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RelCommon_Hint_HintKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.Hint.HintKeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelCommon_Hint_HintKeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.Hint.HintKeyValue.key)
}

// bytes value = 2;
inline void RelCommon_Hint_HintKeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RelCommon_Hint_HintKeyValue::value() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.HintKeyValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void RelCommon_Hint_HintKeyValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.RelCommon.Hint.HintKeyValue.value)
}
inline std::string* RelCommon_Hint_HintKeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.Hint.HintKeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& RelCommon_Hint_HintKeyValue::_internal_value() const {
  return value_.Get();
}
inline void RelCommon_Hint_HintKeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* RelCommon_Hint_HintKeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RelCommon_Hint_HintKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.Hint.HintKeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelCommon_Hint_HintKeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.Hint.HintKeyValue.value)
}

// -------------------------------------------------------------------

// RelCommon_Hint

// repeated .io.substrait.RelCommon.Hint.HintKeyValue hint_key_values = 1;
inline int RelCommon_Hint::_internal_hint_key_values_size() const {
  return hint_key_values_.size();
}
inline int RelCommon_Hint::hint_key_values_size() const {
  return _internal_hint_key_values_size();
}
inline void RelCommon_Hint::clear_hint_key_values() {
  hint_key_values_.Clear();
}
inline ::io::substrait::RelCommon_Hint_HintKeyValue* RelCommon_Hint::mutable_hint_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.Hint.hint_key_values)
  return hint_key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::RelCommon_Hint_HintKeyValue >*
RelCommon_Hint::mutable_hint_key_values() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.RelCommon.Hint.hint_key_values)
  return &hint_key_values_;
}
inline const ::io::substrait::RelCommon_Hint_HintKeyValue& RelCommon_Hint::_internal_hint_key_values(int index) const {
  return hint_key_values_.Get(index);
}
inline const ::io::substrait::RelCommon_Hint_HintKeyValue& RelCommon_Hint::hint_key_values(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.hint_key_values)
  return _internal_hint_key_values(index);
}
inline ::io::substrait::RelCommon_Hint_HintKeyValue* RelCommon_Hint::_internal_add_hint_key_values() {
  return hint_key_values_.Add();
}
inline ::io::substrait::RelCommon_Hint_HintKeyValue* RelCommon_Hint::add_hint_key_values() {
  // @@protoc_insertion_point(field_add:io.substrait.RelCommon.Hint.hint_key_values)
  return _internal_add_hint_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::RelCommon_Hint_HintKeyValue >&
RelCommon_Hint::hint_key_values() const {
  // @@protoc_insertion_point(field_list:io.substrait.RelCommon.Hint.hint_key_values)
  return hint_key_values_;
}

// .io.substrait.RelCommon.Hint.Stats stats = 2;
inline bool RelCommon_Hint::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool RelCommon_Hint::has_stats() const {
  return _internal_has_stats();
}
inline void RelCommon_Hint::clear_stats() {
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::io::substrait::RelCommon_Hint_Stats& RelCommon_Hint::_internal_stats() const {
  const ::io::substrait::RelCommon_Hint_Stats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon_Hint_Stats&>(
      ::io::substrait::_RelCommon_Hint_Stats_default_instance_);
}
inline const ::io::substrait::RelCommon_Hint_Stats& RelCommon_Hint::stats() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.Hint.stats)
  return _internal_stats();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_stats(
    ::io::substrait::RelCommon_Hint_Stats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.RelCommon.Hint.stats)
}
inline ::io::substrait::RelCommon_Hint_Stats* RelCommon_Hint::release_stats() {
  
  ::io::substrait::RelCommon_Hint_Stats* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon_Hint_Stats* RelCommon_Hint::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.Hint.stats)
  
  ::io::substrait::RelCommon_Hint_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon_Hint_Stats* RelCommon_Hint::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon_Hint_Stats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::io::substrait::RelCommon_Hint_Stats* RelCommon_Hint::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.Hint.stats)
  return _internal_mutable_stats();
}
inline void RelCommon_Hint::set_allocated_stats(::io::substrait::RelCommon_Hint_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.Hint.stats)
}

// -------------------------------------------------------------------

// RelCommon_RuntimeConstraint

// -------------------------------------------------------------------

// RelCommon

// .io.substrait.RelCommon.Direct direct = 1;
inline bool RelCommon::_internal_has_direct() const {
  return kind_case() == kDirect;
}
inline bool RelCommon::has_direct() const {
  return _internal_has_direct();
}
inline void RelCommon::set_has_direct() {
  _oneof_case_[0] = kDirect;
}
inline void RelCommon::clear_direct() {
  if (_internal_has_direct()) {
    if (GetArena() == nullptr) {
      delete kind_.direct_;
    }
    clear_has_kind();
  }
}
inline ::io::substrait::RelCommon_Direct* RelCommon::release_direct() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_kind();
      ::io::substrait::RelCommon_Direct* temp = kind_.direct_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::RelCommon_Direct& RelCommon::_internal_direct() const {
  return _internal_has_direct()
      ? *kind_.direct_
      : reinterpret_cast< ::io::substrait::RelCommon_Direct&>(::io::substrait::_RelCommon_Direct_default_instance_);
}
inline const ::io::substrait::RelCommon_Direct& RelCommon::direct() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.direct)
  return _internal_direct();
}
inline ::io::substrait::RelCommon_Direct* RelCommon::unsafe_arena_release_direct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_kind();
    ::io::substrait::RelCommon_Direct* temp = kind_.direct_;
    kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_direct(::io::substrait::RelCommon_Direct* direct) {
  clear_kind();
  if (direct) {
    set_has_direct();
    kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.RelCommon.direct)
}
inline ::io::substrait::RelCommon_Direct* RelCommon::_internal_mutable_direct() {
  if (!_internal_has_direct()) {
    clear_kind();
    set_has_direct();
    kind_.direct_ = CreateMaybeMessage< ::io::substrait::RelCommon_Direct >(GetArena());
  }
  return kind_.direct_;
}
inline ::io::substrait::RelCommon_Direct* RelCommon::mutable_direct() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.direct)
  return _internal_mutable_direct();
}

// .io.substrait.RelCommon.Emit emit = 2;
inline bool RelCommon::_internal_has_emit() const {
  return kind_case() == kEmit;
}
inline bool RelCommon::has_emit() const {
  return _internal_has_emit();
}
inline void RelCommon::set_has_emit() {
  _oneof_case_[0] = kEmit;
}
inline void RelCommon::clear_emit() {
  if (_internal_has_emit()) {
    if (GetArena() == nullptr) {
      delete kind_.emit_;
    }
    clear_has_kind();
  }
}
inline ::io::substrait::RelCommon_Emit* RelCommon::release_emit() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_kind();
      ::io::substrait::RelCommon_Emit* temp = kind_.emit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::RelCommon_Emit& RelCommon::_internal_emit() const {
  return _internal_has_emit()
      ? *kind_.emit_
      : reinterpret_cast< ::io::substrait::RelCommon_Emit&>(::io::substrait::_RelCommon_Emit_default_instance_);
}
inline const ::io::substrait::RelCommon_Emit& RelCommon::emit() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.emit)
  return _internal_emit();
}
inline ::io::substrait::RelCommon_Emit* RelCommon::unsafe_arena_release_emit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_kind();
    ::io::substrait::RelCommon_Emit* temp = kind_.emit_;
    kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_emit(::io::substrait::RelCommon_Emit* emit) {
  clear_kind();
  if (emit) {
    set_has_emit();
    kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.RelCommon.emit)
}
inline ::io::substrait::RelCommon_Emit* RelCommon::_internal_mutable_emit() {
  if (!_internal_has_emit()) {
    clear_kind();
    set_has_emit();
    kind_.emit_ = CreateMaybeMessage< ::io::substrait::RelCommon_Emit >(GetArena());
  }
  return kind_.emit_;
}
inline ::io::substrait::RelCommon_Emit* RelCommon::mutable_emit() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.emit)
  return _internal_mutable_emit();
}

// .io.substrait.RelCommon.Hint hint = 3;
inline bool RelCommon::_internal_has_hint() const {
  return this != internal_default_instance() && hint_ != nullptr;
}
inline bool RelCommon::has_hint() const {
  return _internal_has_hint();
}
inline void RelCommon::clear_hint() {
  if (GetArena() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
}
inline const ::io::substrait::RelCommon_Hint& RelCommon::_internal_hint() const {
  const ::io::substrait::RelCommon_Hint* p = hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon_Hint&>(
      ::io::substrait::_RelCommon_Hint_default_instance_);
}
inline const ::io::substrait::RelCommon_Hint& RelCommon::hint() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.hint)
  return _internal_hint();
}
inline void RelCommon::unsafe_arena_set_allocated_hint(
    ::io::substrait::RelCommon_Hint* hint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hint_);
  }
  hint_ = hint;
  if (hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.RelCommon.hint)
}
inline ::io::substrait::RelCommon_Hint* RelCommon::release_hint() {
  
  ::io::substrait::RelCommon_Hint* temp = hint_;
  hint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon_Hint* RelCommon::unsafe_arena_release_hint() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.hint)
  
  ::io::substrait::RelCommon_Hint* temp = hint_;
  hint_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon_Hint* RelCommon::_internal_mutable_hint() {
  
  if (hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon_Hint>(GetArena());
    hint_ = p;
  }
  return hint_;
}
inline ::io::substrait::RelCommon_Hint* RelCommon::mutable_hint() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.hint)
  return _internal_mutable_hint();
}
inline void RelCommon::set_allocated_hint(::io::substrait::RelCommon_Hint* hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hint_;
  }
  if (hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hint);
    if (message_arena != submessage_arena) {
      hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.hint)
}

// .io.substrait.RelCommon.RuntimeConstraint constraint = 4;
inline bool RelCommon::_internal_has_constraint() const {
  return this != internal_default_instance() && constraint_ != nullptr;
}
inline bool RelCommon::has_constraint() const {
  return _internal_has_constraint();
}
inline void RelCommon::clear_constraint() {
  if (GetArena() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
}
inline const ::io::substrait::RelCommon_RuntimeConstraint& RelCommon::_internal_constraint() const {
  const ::io::substrait::RelCommon_RuntimeConstraint* p = constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon_RuntimeConstraint&>(
      ::io::substrait::_RelCommon_RuntimeConstraint_default_instance_);
}
inline const ::io::substrait::RelCommon_RuntimeConstraint& RelCommon::constraint() const {
  // @@protoc_insertion_point(field_get:io.substrait.RelCommon.constraint)
  return _internal_constraint();
}
inline void RelCommon::unsafe_arena_set_allocated_constraint(
    ::io::substrait::RelCommon_RuntimeConstraint* constraint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.RelCommon.constraint)
}
inline ::io::substrait::RelCommon_RuntimeConstraint* RelCommon::release_constraint() {
  
  ::io::substrait::RelCommon_RuntimeConstraint* temp = constraint_;
  constraint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon_RuntimeConstraint* RelCommon::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:io.substrait.RelCommon.constraint)
  
  ::io::substrait::RelCommon_RuntimeConstraint* temp = constraint_;
  constraint_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon_RuntimeConstraint* RelCommon::_internal_mutable_constraint() {
  
  if (constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon_RuntimeConstraint>(GetArena());
    constraint_ = p;
  }
  return constraint_;
}
inline ::io::substrait::RelCommon_RuntimeConstraint* RelCommon::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable:io.substrait.RelCommon.constraint)
  return _internal_mutable_constraint();
}
inline void RelCommon::set_allocated_constraint(::io::substrait::RelCommon_RuntimeConstraint* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete constraint_;
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(constraint);
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    
  } else {
    
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.RelCommon.constraint)
}

inline bool RelCommon::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void RelCommon::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline RelCommon::KindCase RelCommon::kind_case() const {
  return RelCommon::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_NamedTable

// repeated string names = 1;
inline int ReadRel_NamedTable::_internal_names_size() const {
  return names_.size();
}
inline int ReadRel_NamedTable::names_size() const {
  return _internal_names_size();
}
inline void ReadRel_NamedTable::clear_names() {
  names_.Clear();
}
inline std::string* ReadRel_NamedTable::add_names() {
  // @@protoc_insertion_point(field_add_mutable:io.substrait.ReadRel.NamedTable.names)
  return _internal_add_names();
}
inline const std::string& ReadRel_NamedTable::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ReadRel_NamedTable::names(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.NamedTable.names)
  return _internal_names(index);
}
inline std::string* ReadRel_NamedTable::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.NamedTable.names)
  return names_.Mutable(index);
}
inline void ReadRel_NamedTable::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.substrait.ReadRel.NamedTable.names)
  names_.Mutable(index)->assign(value);
}
inline void ReadRel_NamedTable::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.substrait.ReadRel.NamedTable.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void ReadRel_NamedTable::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.substrait.ReadRel.NamedTable.names)
}
inline std::string* ReadRel_NamedTable::_internal_add_names() {
  return names_.Add();
}
inline void ReadRel_NamedTable::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.substrait.ReadRel.NamedTable.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRel_NamedTable::names() const {
  // @@protoc_insertion_point(field_list:io.substrait.ReadRel.NamedTable.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRel_NamedTable::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.ReadRel.NamedTable.names)
  return &names_;
}

// -------------------------------------------------------------------

// ReadRel_VirtualTable

// repeated .io.substrait.Expression.Literal.Struct values = 1;
inline int ReadRel_VirtualTable::_internal_values_size() const {
  return values_.size();
}
inline int ReadRel_VirtualTable::values_size() const {
  return _internal_values_size();
}
inline ::io::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.VirtualTable.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_Literal_Struct >*
ReadRel_VirtualTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.ReadRel.VirtualTable.values)
  return &values_;
}
inline const ::io::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::io::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::values(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.VirtualTable.values)
  return _internal_values(index);
}
inline ::io::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::_internal_add_values() {
  return values_.Add();
}
inline ::io::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::add_values() {
  // @@protoc_insertion_point(field_add:io.substrait.ReadRel.VirtualTable.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_Literal_Struct >&
ReadRel_VirtualTable::values() const {
  // @@protoc_insertion_point(field_list:io.substrait.ReadRel.VirtualTable.values)
  return values_;
}

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles

// string uri_path = 1;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path() const {
  return path_type_case() == kUriPath;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path() const {
  return _internal_has_uri_path();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path() {
  _oneof_case_[0] = kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path() {
  if (_internal_has_uri_path()) {
    path_type_.uri_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_uri_path();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_mutable_uri_path();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path() const {
  if (_internal_has_uri_path()) {
    return path_type_.uri_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path(const std::string& value) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path() {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  if (_internal_has_uri_path()) {
    clear_has_path_type();
    return path_type_.uri_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path(std::string* uri_path) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path != nullptr) {
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(uri_path);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(uri_path);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}

// string uri_path_glob = 2;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path_glob() const {
  return path_type_case() == kUriPathGlob;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path_glob() const {
  return _internal_has_uri_path_glob();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path_glob() {
  _oneof_case_[0] = kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path_glob() {
  if (_internal_has_uri_path_glob()) {
    path_type_.uri_path_glob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path_glob() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_uri_path_glob();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path_glob() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_mutable_uri_path_glob();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path_glob() const {
  if (_internal_has_uri_path_glob()) {
    return path_type_.uri_path_glob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path_glob(const std::string& value) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path_glob() {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_glob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path_glob() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  if (_internal_has_uri_path_glob()) {
    clear_has_path_type();
    return path_type_.uri_path_glob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path_glob(std::string* uri_path_glob) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path_glob != nullptr) {
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(uri_path_glob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(uri_path_glob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}

// .io.substrait.ReadRel.LocalFiles.FileOrFiles.Format format = 3;
inline void ReadRel_LocalFiles_FileOrFiles::clear_format() {
  format_ = 0;
}
inline ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::_internal_format() const {
  return static_cast< ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format >(format_);
}
inline ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format ReadRel_LocalFiles_FileOrFiles::format() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.LocalFiles.FileOrFiles.format)
  return _internal_format();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_format(::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format value) {
  
  format_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_format(::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:io.substrait.ReadRel.LocalFiles.FileOrFiles.format)
}

inline bool ReadRel_LocalFiles_FileOrFiles::has_path_type() const {
  return path_type_case() != PATH_TYPE_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_path_type() {
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}
inline ReadRel_LocalFiles_FileOrFiles::PathTypeCase ReadRel_LocalFiles_FileOrFiles::path_type_case() const {
  return ReadRel_LocalFiles_FileOrFiles::PathTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_LocalFiles

// repeated .io.substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
inline int ReadRel_LocalFiles::_internal_items_size() const {
  return items_.size();
}
inline int ReadRel_LocalFiles::items_size() const {
  return _internal_items_size();
}
inline void ReadRel_LocalFiles::clear_items() {
  items_.Clear();
}
inline ::io::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.LocalFiles.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >*
ReadRel_LocalFiles::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.ReadRel.LocalFiles.items)
  return &items_;
}
inline const ::io::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::io::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::items(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.LocalFiles.items)
  return _internal_items(index);
}
inline ::io::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::_internal_add_items() {
  return items_.Add();
}
inline ::io::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::add_items() {
  // @@protoc_insertion_point(field_add:io.substrait.ReadRel.LocalFiles.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::ReadRel_LocalFiles_FileOrFiles >&
ReadRel_LocalFiles::items() const {
  // @@protoc_insertion_point(field_list:io.substrait.ReadRel.LocalFiles.items)
  return items_;
}

// -------------------------------------------------------------------

// ReadRel

// .io.substrait.RelCommon common = 1;
inline bool ReadRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ReadRel::has_common() const {
  return _internal_has_common();
}
inline void ReadRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& ReadRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& ReadRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.common)
  return _internal_common();
}
inline void ReadRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.common)
}
inline ::io::substrait::RelCommon* ReadRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* ReadRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* ReadRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* ReadRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.common)
  return _internal_mutable_common();
}
inline void ReadRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.common)
}

// .io.substrait.Type.NamedStruct base_schema = 2;
inline bool ReadRel::_internal_has_base_schema() const {
  return this != internal_default_instance() && base_schema_ != nullptr;
}
inline bool ReadRel::has_base_schema() const {
  return _internal_has_base_schema();
}
inline const ::io::substrait::Type_NamedStruct& ReadRel::_internal_base_schema() const {
  const ::io::substrait::Type_NamedStruct* p = base_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Type_NamedStruct&>(
      ::io::substrait::_Type_NamedStruct_default_instance_);
}
inline const ::io::substrait::Type_NamedStruct& ReadRel::base_schema() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.base_schema)
  return _internal_base_schema();
}
inline void ReadRel::unsafe_arena_set_allocated_base_schema(
    ::io::substrait::Type_NamedStruct* base_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  base_schema_ = base_schema;
  if (base_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.base_schema)
}
inline ::io::substrait::Type_NamedStruct* ReadRel::release_base_schema() {
  
  ::io::substrait::Type_NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Type_NamedStruct* ReadRel::unsafe_arena_release_base_schema() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.base_schema)
  
  ::io::substrait::Type_NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
  return temp;
}
inline ::io::substrait::Type_NamedStruct* ReadRel::_internal_mutable_base_schema() {
  
  if (base_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Type_NamedStruct>(GetArena());
    base_schema_ = p;
  }
  return base_schema_;
}
inline ::io::substrait::Type_NamedStruct* ReadRel::mutable_base_schema() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.base_schema)
  return _internal_mutable_base_schema();
}
inline void ReadRel::set_allocated_base_schema(::io::substrait::Type_NamedStruct* base_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  if (base_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema)->GetArena();
    if (message_arena != submessage_arena) {
      base_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_schema, submessage_arena);
    }
    
  } else {
    
  }
  base_schema_ = base_schema;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.base_schema)
}

// .io.substrait.Expression filter = 3;
inline bool ReadRel::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ReadRel::has_filter() const {
  return _internal_has_filter();
}
inline const ::io::substrait::Expression& ReadRel::_internal_filter() const {
  const ::io::substrait::Expression* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Expression&>(
      ::io::substrait::_Expression_default_instance_);
}
inline const ::io::substrait::Expression& ReadRel::filter() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.filter)
  return _internal_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_filter(
    ::io::substrait::Expression* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.filter)
}
inline ::io::substrait::Expression* ReadRel::release_filter() {
  
  ::io::substrait::Expression* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Expression* ReadRel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.filter)
  
  ::io::substrait::Expression* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::io::substrait::Expression* ReadRel::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Expression>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::io::substrait::Expression* ReadRel::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.filter)
  return _internal_mutable_filter();
}
inline void ReadRel::set_allocated_filter(::io::substrait::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.filter)
}

// .io.substrait.MaskExpression projection = 4;
inline bool ReadRel::_internal_has_projection() const {
  return this != internal_default_instance() && projection_ != nullptr;
}
inline bool ReadRel::has_projection() const {
  return _internal_has_projection();
}
inline const ::io::substrait::MaskExpression& ReadRel::_internal_projection() const {
  const ::io::substrait::MaskExpression* p = projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::MaskExpression&>(
      ::io::substrait::_MaskExpression_default_instance_);
}
inline const ::io::substrait::MaskExpression& ReadRel::projection() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.projection)
  return _internal_projection();
}
inline void ReadRel::unsafe_arena_set_allocated_projection(
    ::io::substrait::MaskExpression* projection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.projection)
}
inline ::io::substrait::MaskExpression* ReadRel::release_projection() {
  
  ::io::substrait::MaskExpression* temp = projection_;
  projection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::MaskExpression* ReadRel::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.projection)
  
  ::io::substrait::MaskExpression* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::io::substrait::MaskExpression* ReadRel::_internal_mutable_projection() {
  
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::MaskExpression>(GetArena());
    projection_ = p;
  }
  return projection_;
}
inline ::io::substrait::MaskExpression* ReadRel::mutable_projection() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.projection)
  return _internal_mutable_projection();
}
inline void ReadRel::set_allocated_projection(::io::substrait::MaskExpression* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection)->GetArena();
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    
  } else {
    
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ReadRel.projection)
}

// .io.substrait.ReadRel.VirtualTable virtual_table = 5;
inline bool ReadRel::_internal_has_virtual_table() const {
  return read_type_case() == kVirtualTable;
}
inline bool ReadRel::has_virtual_table() const {
  return _internal_has_virtual_table();
}
inline void ReadRel::set_has_virtual_table() {
  _oneof_case_[0] = kVirtualTable;
}
inline void ReadRel::clear_virtual_table() {
  if (_internal_has_virtual_table()) {
    if (GetArena() == nullptr) {
      delete read_type_.virtual_table_;
    }
    clear_has_read_type();
  }
}
inline ::io::substrait::ReadRel_VirtualTable* ReadRel::release_virtual_table() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
      ::io::substrait::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::ReadRel_VirtualTable& ReadRel::_internal_virtual_table() const {
  return _internal_has_virtual_table()
      ? *read_type_.virtual_table_
      : reinterpret_cast< ::io::substrait::ReadRel_VirtualTable&>(::io::substrait::_ReadRel_VirtualTable_default_instance_);
}
inline const ::io::substrait::ReadRel_VirtualTable& ReadRel::virtual_table() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.virtual_table)
  return _internal_virtual_table();
}
inline ::io::substrait::ReadRel_VirtualTable* ReadRel::unsafe_arena_release_virtual_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
    ::io::substrait::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_virtual_table(::io::substrait::ReadRel_VirtualTable* virtual_table) {
  clear_read_type();
  if (virtual_table) {
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.virtual_table)
}
inline ::io::substrait::ReadRel_VirtualTable* ReadRel::_internal_mutable_virtual_table() {
  if (!_internal_has_virtual_table()) {
    clear_read_type();
    set_has_virtual_table();
    read_type_.virtual_table_ = CreateMaybeMessage< ::io::substrait::ReadRel_VirtualTable >(GetArena());
  }
  return read_type_.virtual_table_;
}
inline ::io::substrait::ReadRel_VirtualTable* ReadRel::mutable_virtual_table() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.virtual_table)
  return _internal_mutable_virtual_table();
}

// .io.substrait.ReadRel.LocalFiles local_files = 6;
inline bool ReadRel::_internal_has_local_files() const {
  return read_type_case() == kLocalFiles;
}
inline bool ReadRel::has_local_files() const {
  return _internal_has_local_files();
}
inline void ReadRel::set_has_local_files() {
  _oneof_case_[0] = kLocalFiles;
}
inline void ReadRel::clear_local_files() {
  if (_internal_has_local_files()) {
    if (GetArena() == nullptr) {
      delete read_type_.local_files_;
    }
    clear_has_read_type();
  }
}
inline ::io::substrait::ReadRel_LocalFiles* ReadRel::release_local_files() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
      ::io::substrait::ReadRel_LocalFiles* temp = read_type_.local_files_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::ReadRel_LocalFiles& ReadRel::_internal_local_files() const {
  return _internal_has_local_files()
      ? *read_type_.local_files_
      : reinterpret_cast< ::io::substrait::ReadRel_LocalFiles&>(::io::substrait::_ReadRel_LocalFiles_default_instance_);
}
inline const ::io::substrait::ReadRel_LocalFiles& ReadRel::local_files() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.local_files)
  return _internal_local_files();
}
inline ::io::substrait::ReadRel_LocalFiles* ReadRel::unsafe_arena_release_local_files() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
    ::io::substrait::ReadRel_LocalFiles* temp = read_type_.local_files_;
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_local_files(::io::substrait::ReadRel_LocalFiles* local_files) {
  clear_read_type();
  if (local_files) {
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.local_files)
}
inline ::io::substrait::ReadRel_LocalFiles* ReadRel::_internal_mutable_local_files() {
  if (!_internal_has_local_files()) {
    clear_read_type();
    set_has_local_files();
    read_type_.local_files_ = CreateMaybeMessage< ::io::substrait::ReadRel_LocalFiles >(GetArena());
  }
  return read_type_.local_files_;
}
inline ::io::substrait::ReadRel_LocalFiles* ReadRel::mutable_local_files() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.local_files)
  return _internal_mutable_local_files();
}

// .io.substrait.ReadRel.NamedTable named_table = 7;
inline bool ReadRel::_internal_has_named_table() const {
  return read_type_case() == kNamedTable;
}
inline bool ReadRel::has_named_table() const {
  return _internal_has_named_table();
}
inline void ReadRel::set_has_named_table() {
  _oneof_case_[0] = kNamedTable;
}
inline void ReadRel::clear_named_table() {
  if (_internal_has_named_table()) {
    if (GetArena() == nullptr) {
      delete read_type_.named_table_;
    }
    clear_has_read_type();
  }
}
inline ::io::substrait::ReadRel_NamedTable* ReadRel::release_named_table() {
  // @@protoc_insertion_point(field_release:io.substrait.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
      ::io::substrait::ReadRel_NamedTable* temp = read_type_.named_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::ReadRel_NamedTable& ReadRel::_internal_named_table() const {
  return _internal_has_named_table()
      ? *read_type_.named_table_
      : reinterpret_cast< ::io::substrait::ReadRel_NamedTable&>(::io::substrait::_ReadRel_NamedTable_default_instance_);
}
inline const ::io::substrait::ReadRel_NamedTable& ReadRel::named_table() const {
  // @@protoc_insertion_point(field_get:io.substrait.ReadRel.named_table)
  return _internal_named_table();
}
inline ::io::substrait::ReadRel_NamedTable* ReadRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
    ::io::substrait::ReadRel_NamedTable* temp = read_type_.named_table_;
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_named_table(::io::substrait::ReadRel_NamedTable* named_table) {
  clear_read_type();
  if (named_table) {
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ReadRel.named_table)
}
inline ::io::substrait::ReadRel_NamedTable* ReadRel::_internal_mutable_named_table() {
  if (!_internal_has_named_table()) {
    clear_read_type();
    set_has_named_table();
    read_type_.named_table_ = CreateMaybeMessage< ::io::substrait::ReadRel_NamedTable >(GetArena());
  }
  return read_type_.named_table_;
}
inline ::io::substrait::ReadRel_NamedTable* ReadRel::mutable_named_table() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ReadRel.named_table)
  return _internal_mutable_named_table();
}

inline bool ReadRel::has_read_type() const {
  return read_type_case() != READ_TYPE_NOT_SET;
}
inline void ReadRel::clear_has_read_type() {
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}
inline ReadRel::ReadTypeCase ReadRel::read_type_case() const {
  return ReadRel::ReadTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRel

// .io.substrait.RelCommon common = 1;
inline bool ProjectRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ProjectRel::has_common() const {
  return _internal_has_common();
}
inline void ProjectRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& ProjectRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& ProjectRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.ProjectRel.common)
  return _internal_common();
}
inline void ProjectRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ProjectRel.common)
}
inline ::io::substrait::RelCommon* ProjectRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* ProjectRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.ProjectRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* ProjectRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* ProjectRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ProjectRel.common)
  return _internal_mutable_common();
}
inline void ProjectRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ProjectRel.common)
}

// .io.substrait.Rel input = 2;
inline bool ProjectRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ProjectRel::has_input() const {
  return _internal_has_input();
}
inline void ProjectRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::io::substrait::Rel& ProjectRel::_internal_input() const {
  const ::io::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& ProjectRel::input() const {
  // @@protoc_insertion_point(field_get:io.substrait.ProjectRel.input)
  return _internal_input();
}
inline void ProjectRel::unsafe_arena_set_allocated_input(
    ::io::substrait::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.ProjectRel.input)
}
inline ::io::substrait::Rel* ProjectRel::release_input() {
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* ProjectRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:io.substrait.ProjectRel.input)
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* ProjectRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::io::substrait::Rel* ProjectRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:io.substrait.ProjectRel.input)
  return _internal_mutable_input();
}
inline void ProjectRel::set_allocated_input(::io::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.ProjectRel.input)
}

// repeated .io.substrait.Expression expressions = 3;
inline int ProjectRel::_internal_expressions_size() const {
  return expressions_.size();
}
inline int ProjectRel::expressions_size() const {
  return _internal_expressions_size();
}
inline ::io::substrait::Expression* ProjectRel::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.ProjectRel.expressions)
  return expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression >*
ProjectRel::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.ProjectRel.expressions)
  return &expressions_;
}
inline const ::io::substrait::Expression& ProjectRel::_internal_expressions(int index) const {
  return expressions_.Get(index);
}
inline const ::io::substrait::Expression& ProjectRel::expressions(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.ProjectRel.expressions)
  return _internal_expressions(index);
}
inline ::io::substrait::Expression* ProjectRel::_internal_add_expressions() {
  return expressions_.Add();
}
inline ::io::substrait::Expression* ProjectRel::add_expressions() {
  // @@protoc_insertion_point(field_add:io.substrait.ProjectRel.expressions)
  return _internal_add_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression >&
ProjectRel::expressions() const {
  // @@protoc_insertion_point(field_list:io.substrait.ProjectRel.expressions)
  return expressions_;
}

// -------------------------------------------------------------------

// JoinRel

// .io.substrait.RelCommon common = 1;
inline bool JoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool JoinRel::has_common() const {
  return _internal_has_common();
}
inline void JoinRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& JoinRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& JoinRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.common)
  return _internal_common();
}
inline void JoinRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.JoinRel.common)
}
inline ::io::substrait::RelCommon* JoinRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* JoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.JoinRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* JoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* JoinRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.JoinRel.common)
  return _internal_mutable_common();
}
inline void JoinRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.JoinRel.common)
}

// .io.substrait.Rel left = 2;
inline bool JoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool JoinRel::has_left() const {
  return _internal_has_left();
}
inline void JoinRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::io::substrait::Rel& JoinRel::_internal_left() const {
  const ::io::substrait::Rel* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& JoinRel::left() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.left)
  return _internal_left();
}
inline void JoinRel::unsafe_arena_set_allocated_left(
    ::io::substrait::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.JoinRel.left)
}
inline ::io::substrait::Rel* JoinRel::release_left() {
  
  ::io::substrait::Rel* temp = left_;
  left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* JoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:io.substrait.JoinRel.left)
  
  ::io::substrait::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* JoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::io::substrait::Rel* JoinRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:io.substrait.JoinRel.left)
  return _internal_mutable_left();
}
inline void JoinRel::set_allocated_left(::io::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.JoinRel.left)
}

// .io.substrait.Rel right = 3;
inline bool JoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool JoinRel::has_right() const {
  return _internal_has_right();
}
inline void JoinRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::io::substrait::Rel& JoinRel::_internal_right() const {
  const ::io::substrait::Rel* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& JoinRel::right() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.right)
  return _internal_right();
}
inline void JoinRel::unsafe_arena_set_allocated_right(
    ::io::substrait::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.JoinRel.right)
}
inline ::io::substrait::Rel* JoinRel::release_right() {
  
  ::io::substrait::Rel* temp = right_;
  right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* JoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:io.substrait.JoinRel.right)
  
  ::io::substrait::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* JoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::io::substrait::Rel* JoinRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:io.substrait.JoinRel.right)
  return _internal_mutable_right();
}
inline void JoinRel::set_allocated_right(::io::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.JoinRel.right)
}

// .io.substrait.Expression expression = 4;
inline bool JoinRel::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool JoinRel::has_expression() const {
  return _internal_has_expression();
}
inline const ::io::substrait::Expression& JoinRel::_internal_expression() const {
  const ::io::substrait::Expression* p = expression_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Expression&>(
      ::io::substrait::_Expression_default_instance_);
}
inline const ::io::substrait::Expression& JoinRel::expression() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.expression)
  return _internal_expression();
}
inline void JoinRel::unsafe_arena_set_allocated_expression(
    ::io::substrait::Expression* expression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.JoinRel.expression)
}
inline ::io::substrait::Expression* JoinRel::release_expression() {
  
  ::io::substrait::Expression* temp = expression_;
  expression_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Expression* JoinRel::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:io.substrait.JoinRel.expression)
  
  ::io::substrait::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::io::substrait::Expression* JoinRel::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Expression>(GetArena());
    expression_ = p;
  }
  return expression_;
}
inline ::io::substrait::Expression* JoinRel::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:io.substrait.JoinRel.expression)
  return _internal_mutable_expression();
}
inline void JoinRel::set_allocated_expression(::io::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression)->GetArena();
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.JoinRel.expression)
}

// .io.substrait.Expression post_join_filter = 5;
inline bool JoinRel::_internal_has_post_join_filter() const {
  return this != internal_default_instance() && post_join_filter_ != nullptr;
}
inline bool JoinRel::has_post_join_filter() const {
  return _internal_has_post_join_filter();
}
inline const ::io::substrait::Expression& JoinRel::_internal_post_join_filter() const {
  const ::io::substrait::Expression* p = post_join_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Expression&>(
      ::io::substrait::_Expression_default_instance_);
}
inline const ::io::substrait::Expression& JoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void JoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::io::substrait::Expression* post_join_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.JoinRel.post_join_filter)
}
inline ::io::substrait::Expression* JoinRel::release_post_join_filter() {
  
  ::io::substrait::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Expression* JoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:io.substrait.JoinRel.post_join_filter)
  
  ::io::substrait::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  return temp;
}
inline ::io::substrait::Expression* JoinRel::_internal_mutable_post_join_filter() {
  
  if (post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Expression>(GetArena());
    post_join_filter_ = p;
  }
  return post_join_filter_;
}
inline ::io::substrait::Expression* JoinRel::mutable_post_join_filter() {
  // @@protoc_insertion_point(field_mutable:io.substrait.JoinRel.post_join_filter)
  return _internal_mutable_post_join_filter();
}
inline void JoinRel::set_allocated_post_join_filter(::io::substrait::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter)->GetArena();
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.JoinRel.post_join_filter)
}

// .io.substrait.JoinRel.JoinType type = 6;
inline void JoinRel::clear_type() {
  type_ = 0;
}
inline ::io::substrait::JoinRel_JoinType JoinRel::_internal_type() const {
  return static_cast< ::io::substrait::JoinRel_JoinType >(type_);
}
inline ::io::substrait::JoinRel_JoinType JoinRel::type() const {
  // @@protoc_insertion_point(field_get:io.substrait.JoinRel.type)
  return _internal_type();
}
inline void JoinRel::_internal_set_type(::io::substrait::JoinRel_JoinType value) {
  
  type_ = value;
}
inline void JoinRel::set_type(::io::substrait::JoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:io.substrait.JoinRel.type)
}

// -------------------------------------------------------------------

// FetchRel

// .io.substrait.RelCommon common = 1;
inline bool FetchRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FetchRel::has_common() const {
  return _internal_has_common();
}
inline void FetchRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& FetchRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& FetchRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.FetchRel.common)
  return _internal_common();
}
inline void FetchRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.FetchRel.common)
}
inline ::io::substrait::RelCommon* FetchRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* FetchRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.FetchRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* FetchRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* FetchRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.FetchRel.common)
  return _internal_mutable_common();
}
inline void FetchRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FetchRel.common)
}

// .io.substrait.Rel input = 2;
inline bool FetchRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FetchRel::has_input() const {
  return _internal_has_input();
}
inline void FetchRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::io::substrait::Rel& FetchRel::_internal_input() const {
  const ::io::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& FetchRel::input() const {
  // @@protoc_insertion_point(field_get:io.substrait.FetchRel.input)
  return _internal_input();
}
inline void FetchRel::unsafe_arena_set_allocated_input(
    ::io::substrait::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.FetchRel.input)
}
inline ::io::substrait::Rel* FetchRel::release_input() {
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* FetchRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:io.substrait.FetchRel.input)
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* FetchRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::io::substrait::Rel* FetchRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:io.substrait.FetchRel.input)
  return _internal_mutable_input();
}
inline void FetchRel::set_allocated_input(::io::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FetchRel.input)
}

// int64 offset = 3;
inline void FetchRel::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::offset() const {
  // @@protoc_insertion_point(field_get:io.substrait.FetchRel.offset)
  return _internal_offset();
}
inline void FetchRel::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void FetchRel::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:io.substrait.FetchRel.offset)
}

// int64 count = 4;
inline void FetchRel::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::count() const {
  // @@protoc_insertion_point(field_get:io.substrait.FetchRel.count)
  return _internal_count();
}
inline void FetchRel::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void FetchRel::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:io.substrait.FetchRel.count)
}

// -------------------------------------------------------------------

// AggregateRel_Grouping

// repeated int32 input_fields = 1;
inline int AggregateRel_Grouping::_internal_input_fields_size() const {
  return input_fields_.size();
}
inline int AggregateRel_Grouping::input_fields_size() const {
  return _internal_input_fields_size();
}
inline void AggregateRel_Grouping::clear_input_fields() {
  input_fields_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregateRel_Grouping::_internal_input_fields(int index) const {
  return input_fields_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregateRel_Grouping::input_fields(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.Grouping.input_fields)
  return _internal_input_fields(index);
}
inline void AggregateRel_Grouping::set_input_fields(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:io.substrait.AggregateRel.Grouping.input_fields)
}
inline void AggregateRel_Grouping::_internal_add_input_fields(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_fields_.Add(value);
}
inline void AggregateRel_Grouping::add_input_fields(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_fields(value);
  // @@protoc_insertion_point(field_add:io.substrait.AggregateRel.Grouping.input_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AggregateRel_Grouping::_internal_input_fields() const {
  return input_fields_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AggregateRel_Grouping::input_fields() const {
  // @@protoc_insertion_point(field_list:io.substrait.AggregateRel.Grouping.input_fields)
  return _internal_input_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AggregateRel_Grouping::_internal_mutable_input_fields() {
  return &input_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AggregateRel_Grouping::mutable_input_fields() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.AggregateRel.Grouping.input_fields)
  return _internal_mutable_input_fields();
}

// -------------------------------------------------------------------

// AggregateRel_Measure

// .io.substrait.Expression.AggregateFunction measure = 1;
inline bool AggregateRel_Measure::_internal_has_measure() const {
  return this != internal_default_instance() && measure_ != nullptr;
}
inline bool AggregateRel_Measure::has_measure() const {
  return _internal_has_measure();
}
inline const ::io::substrait::Expression_AggregateFunction& AggregateRel_Measure::_internal_measure() const {
  const ::io::substrait::Expression_AggregateFunction* p = measure_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Expression_AggregateFunction&>(
      ::io::substrait::_Expression_AggregateFunction_default_instance_);
}
inline const ::io::substrait::Expression_AggregateFunction& AggregateRel_Measure::measure() const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.Measure.measure)
  return _internal_measure();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_measure(
    ::io::substrait::Expression_AggregateFunction* measure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  measure_ = measure;
  if (measure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.AggregateRel.Measure.measure)
}
inline ::io::substrait::Expression_AggregateFunction* AggregateRel_Measure::release_measure() {
  
  ::io::substrait::Expression_AggregateFunction* temp = measure_;
  measure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Expression_AggregateFunction* AggregateRel_Measure::unsafe_arena_release_measure() {
  // @@protoc_insertion_point(field_release:io.substrait.AggregateRel.Measure.measure)
  
  ::io::substrait::Expression_AggregateFunction* temp = measure_;
  measure_ = nullptr;
  return temp;
}
inline ::io::substrait::Expression_AggregateFunction* AggregateRel_Measure::_internal_mutable_measure() {
  
  if (measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Expression_AggregateFunction>(GetArena());
    measure_ = p;
  }
  return measure_;
}
inline ::io::substrait::Expression_AggregateFunction* AggregateRel_Measure::mutable_measure() {
  // @@protoc_insertion_point(field_mutable:io.substrait.AggregateRel.Measure.measure)
  return _internal_mutable_measure();
}
inline void AggregateRel_Measure::set_allocated_measure(::io::substrait::Expression_AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure)->GetArena();
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.AggregateRel.Measure.measure)
}

// -------------------------------------------------------------------

// AggregateRel

// .io.substrait.RelCommon common = 1;
inline bool AggregateRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool AggregateRel::has_common() const {
  return _internal_has_common();
}
inline void AggregateRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& AggregateRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& AggregateRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.common)
  return _internal_common();
}
inline void AggregateRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.AggregateRel.common)
}
inline ::io::substrait::RelCommon* AggregateRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* AggregateRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.AggregateRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* AggregateRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* AggregateRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.AggregateRel.common)
  return _internal_mutable_common();
}
inline void AggregateRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.AggregateRel.common)
}

// .io.substrait.Rel input = 2;
inline bool AggregateRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool AggregateRel::has_input() const {
  return _internal_has_input();
}
inline void AggregateRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::io::substrait::Rel& AggregateRel::_internal_input() const {
  const ::io::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& AggregateRel::input() const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.input)
  return _internal_input();
}
inline void AggregateRel::unsafe_arena_set_allocated_input(
    ::io::substrait::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.AggregateRel.input)
}
inline ::io::substrait::Rel* AggregateRel::release_input() {
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* AggregateRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:io.substrait.AggregateRel.input)
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* AggregateRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::io::substrait::Rel* AggregateRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:io.substrait.AggregateRel.input)
  return _internal_mutable_input();
}
inline void AggregateRel::set_allocated_input(::io::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.AggregateRel.input)
}

// repeated .io.substrait.AggregateRel.Grouping groupings = 3;
inline int AggregateRel::_internal_groupings_size() const {
  return groupings_.size();
}
inline int AggregateRel::groupings_size() const {
  return _internal_groupings_size();
}
inline void AggregateRel::clear_groupings() {
  groupings_.Clear();
}
inline ::io::substrait::AggregateRel_Grouping* AggregateRel::mutable_groupings(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.AggregateRel.groupings)
  return groupings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Grouping >*
AggregateRel::mutable_groupings() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.AggregateRel.groupings)
  return &groupings_;
}
inline const ::io::substrait::AggregateRel_Grouping& AggregateRel::_internal_groupings(int index) const {
  return groupings_.Get(index);
}
inline const ::io::substrait::AggregateRel_Grouping& AggregateRel::groupings(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.groupings)
  return _internal_groupings(index);
}
inline ::io::substrait::AggregateRel_Grouping* AggregateRel::_internal_add_groupings() {
  return groupings_.Add();
}
inline ::io::substrait::AggregateRel_Grouping* AggregateRel::add_groupings() {
  // @@protoc_insertion_point(field_add:io.substrait.AggregateRel.groupings)
  return _internal_add_groupings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Grouping >&
AggregateRel::groupings() const {
  // @@protoc_insertion_point(field_list:io.substrait.AggregateRel.groupings)
  return groupings_;
}

// repeated .io.substrait.AggregateRel.Measure measures = 4;
inline int AggregateRel::_internal_measures_size() const {
  return measures_.size();
}
inline int AggregateRel::measures_size() const {
  return _internal_measures_size();
}
inline void AggregateRel::clear_measures() {
  measures_.Clear();
}
inline ::io::substrait::AggregateRel_Measure* AggregateRel::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.AggregateRel.measures)
  return measures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Measure >*
AggregateRel::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.AggregateRel.measures)
  return &measures_;
}
inline const ::io::substrait::AggregateRel_Measure& AggregateRel::_internal_measures(int index) const {
  return measures_.Get(index);
}
inline const ::io::substrait::AggregateRel_Measure& AggregateRel::measures(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.measures)
  return _internal_measures(index);
}
inline ::io::substrait::AggregateRel_Measure* AggregateRel::_internal_add_measures() {
  return measures_.Add();
}
inline ::io::substrait::AggregateRel_Measure* AggregateRel::add_measures() {
  // @@protoc_insertion_point(field_add:io.substrait.AggregateRel.measures)
  return _internal_add_measures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::AggregateRel_Measure >&
AggregateRel::measures() const {
  // @@protoc_insertion_point(field_list:io.substrait.AggregateRel.measures)
  return measures_;
}

// .io.substrait.Expression.AggregationPhase phase = 5;
inline void AggregateRel::clear_phase() {
  phase_ = 0;
}
inline ::io::substrait::Expression_AggregationPhase AggregateRel::_internal_phase() const {
  return static_cast< ::io::substrait::Expression_AggregationPhase >(phase_);
}
inline ::io::substrait::Expression_AggregationPhase AggregateRel::phase() const {
  // @@protoc_insertion_point(field_get:io.substrait.AggregateRel.phase)
  return _internal_phase();
}
inline void AggregateRel::_internal_set_phase(::io::substrait::Expression_AggregationPhase value) {
  
  phase_ = value;
}
inline void AggregateRel::set_phase(::io::substrait::Expression_AggregationPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:io.substrait.AggregateRel.phase)
}

// -------------------------------------------------------------------

// SortRel

// .io.substrait.RelCommon common = 1;
inline bool SortRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SortRel::has_common() const {
  return _internal_has_common();
}
inline void SortRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& SortRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& SortRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.SortRel.common)
  return _internal_common();
}
inline void SortRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.SortRel.common)
}
inline ::io::substrait::RelCommon* SortRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* SortRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.SortRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* SortRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* SortRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.SortRel.common)
  return _internal_mutable_common();
}
inline void SortRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.SortRel.common)
}

// .io.substrait.Rel input = 2;
inline bool SortRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SortRel::has_input() const {
  return _internal_has_input();
}
inline void SortRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::io::substrait::Rel& SortRel::_internal_input() const {
  const ::io::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& SortRel::input() const {
  // @@protoc_insertion_point(field_get:io.substrait.SortRel.input)
  return _internal_input();
}
inline void SortRel::unsafe_arena_set_allocated_input(
    ::io::substrait::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.SortRel.input)
}
inline ::io::substrait::Rel* SortRel::release_input() {
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* SortRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:io.substrait.SortRel.input)
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* SortRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::io::substrait::Rel* SortRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:io.substrait.SortRel.input)
  return _internal_mutable_input();
}
inline void SortRel::set_allocated_input(::io::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.SortRel.input)
}

// repeated .io.substrait.Expression.SortField sorts = 3;
inline int SortRel::_internal_sorts_size() const {
  return sorts_.size();
}
inline int SortRel::sorts_size() const {
  return _internal_sorts_size();
}
inline ::io::substrait::Expression_SortField* SortRel::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.SortRel.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_SortField >*
SortRel::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.SortRel.sorts)
  return &sorts_;
}
inline const ::io::substrait::Expression_SortField& SortRel::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::io::substrait::Expression_SortField& SortRel::sorts(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.SortRel.sorts)
  return _internal_sorts(index);
}
inline ::io::substrait::Expression_SortField* SortRel::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::io::substrait::Expression_SortField* SortRel::add_sorts() {
  // @@protoc_insertion_point(field_add:io.substrait.SortRel.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Expression_SortField >&
SortRel::sorts() const {
  // @@protoc_insertion_point(field_list:io.substrait.SortRel.sorts)
  return sorts_;
}

// -------------------------------------------------------------------

// FilterRel

// .io.substrait.RelCommon common = 1;
inline bool FilterRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FilterRel::has_common() const {
  return _internal_has_common();
}
inline void FilterRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& FilterRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& FilterRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.FilterRel.common)
  return _internal_common();
}
inline void FilterRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.FilterRel.common)
}
inline ::io::substrait::RelCommon* FilterRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* FilterRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.FilterRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* FilterRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* FilterRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.FilterRel.common)
  return _internal_mutable_common();
}
inline void FilterRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FilterRel.common)
}

// .io.substrait.Rel input = 2;
inline bool FilterRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FilterRel::has_input() const {
  return _internal_has_input();
}
inline void FilterRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::io::substrait::Rel& FilterRel::_internal_input() const {
  const ::io::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Rel&>(
      ::io::substrait::_Rel_default_instance_);
}
inline const ::io::substrait::Rel& FilterRel::input() const {
  // @@protoc_insertion_point(field_get:io.substrait.FilterRel.input)
  return _internal_input();
}
inline void FilterRel::unsafe_arena_set_allocated_input(
    ::io::substrait::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.FilterRel.input)
}
inline ::io::substrait::Rel* FilterRel::release_input() {
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Rel* FilterRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:io.substrait.FilterRel.input)
  
  ::io::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::io::substrait::Rel* FilterRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::io::substrait::Rel* FilterRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:io.substrait.FilterRel.input)
  return _internal_mutable_input();
}
inline void FilterRel::set_allocated_input(::io::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FilterRel.input)
}

// .io.substrait.Expression condition = 3;
inline bool FilterRel::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool FilterRel::has_condition() const {
  return _internal_has_condition();
}
inline const ::io::substrait::Expression& FilterRel::_internal_condition() const {
  const ::io::substrait::Expression* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Expression&>(
      ::io::substrait::_Expression_default_instance_);
}
inline const ::io::substrait::Expression& FilterRel::condition() const {
  // @@protoc_insertion_point(field_get:io.substrait.FilterRel.condition)
  return _internal_condition();
}
inline void FilterRel::unsafe_arena_set_allocated_condition(
    ::io::substrait::Expression* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.FilterRel.condition)
}
inline ::io::substrait::Expression* FilterRel::release_condition() {
  
  ::io::substrait::Expression* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Expression* FilterRel::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:io.substrait.FilterRel.condition)
  
  ::io::substrait::Expression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::io::substrait::Expression* FilterRel::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Expression>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::io::substrait::Expression* FilterRel::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:io.substrait.FilterRel.condition)
  return _internal_mutable_condition();
}
inline void FilterRel::set_allocated_condition(::io::substrait::Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition)->GetArena();
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.FilterRel.condition)
}

// -------------------------------------------------------------------

// SetRel

// .io.substrait.RelCommon common = 1;
inline bool SetRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SetRel::has_common() const {
  return _internal_has_common();
}
inline void SetRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::io::substrait::RelCommon& SetRel::_internal_common() const {
  const ::io::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::RelCommon&>(
      ::io::substrait::_RelCommon_default_instance_);
}
inline const ::io::substrait::RelCommon& SetRel::common() const {
  // @@protoc_insertion_point(field_get:io.substrait.SetRel.common)
  return _internal_common();
}
inline void SetRel::unsafe_arena_set_allocated_common(
    ::io::substrait::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.SetRel.common)
}
inline ::io::substrait::RelCommon* SetRel::release_common() {
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::RelCommon* SetRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:io.substrait.SetRel.common)
  
  ::io::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::io::substrait::RelCommon* SetRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::io::substrait::RelCommon* SetRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:io.substrait.SetRel.common)
  return _internal_mutable_common();
}
inline void SetRel::set_allocated_common(::io::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.SetRel.common)
}

// repeated .io.substrait.Rel inputs = 2;
inline int SetRel::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SetRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void SetRel::clear_inputs() {
  inputs_.Clear();
}
inline ::io::substrait::Rel* SetRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.SetRel.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >*
SetRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.SetRel.inputs)
  return &inputs_;
}
inline const ::io::substrait::Rel& SetRel::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::io::substrait::Rel& SetRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.SetRel.inputs)
  return _internal_inputs(index);
}
inline ::io::substrait::Rel* SetRel::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::io::substrait::Rel* SetRel::add_inputs() {
  // @@protoc_insertion_point(field_add:io.substrait.SetRel.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >&
SetRel::inputs() const {
  // @@protoc_insertion_point(field_list:io.substrait.SetRel.inputs)
  return inputs_;
}

// .io.substrait.SetRel.SetOp op = 3;
inline void SetRel::clear_op() {
  op_ = 0;
}
inline ::io::substrait::SetRel_SetOp SetRel::_internal_op() const {
  return static_cast< ::io::substrait::SetRel_SetOp >(op_);
}
inline ::io::substrait::SetRel_SetOp SetRel::op() const {
  // @@protoc_insertion_point(field_get:io.substrait.SetRel.op)
  return _internal_op();
}
inline void SetRel::_internal_set_op(::io::substrait::SetRel_SetOp value) {
  
  op_ = value;
}
inline void SetRel::set_op(::io::substrait::SetRel_SetOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:io.substrait.SetRel.op)
}

// -------------------------------------------------------------------

// Rel

// .io.substrait.ReadRel read = 1;
inline bool Rel::_internal_has_read() const {
  return RelType_case() == kRead;
}
inline bool Rel::has_read() const {
  return _internal_has_read();
}
inline void Rel::set_has_read() {
  _oneof_case_[0] = kRead;
}
inline void Rel::clear_read() {
  if (_internal_has_read()) {
    if (GetArena() == nullptr) {
      delete RelType_.read_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::ReadRel* Rel::release_read() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.read)
  if (_internal_has_read()) {
    clear_has_RelType();
      ::io::substrait::ReadRel* temp = RelType_.read_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::ReadRel& Rel::_internal_read() const {
  return _internal_has_read()
      ? *RelType_.read_
      : reinterpret_cast< ::io::substrait::ReadRel&>(::io::substrait::_ReadRel_default_instance_);
}
inline const ::io::substrait::ReadRel& Rel::read() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.read)
  return _internal_read();
}
inline ::io::substrait::ReadRel* Rel::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.read)
  if (_internal_has_read()) {
    clear_has_RelType();
    ::io::substrait::ReadRel* temp = RelType_.read_;
    RelType_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_read(::io::substrait::ReadRel* read) {
  clear_RelType();
  if (read) {
    set_has_read();
    RelType_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.read)
}
inline ::io::substrait::ReadRel* Rel::_internal_mutable_read() {
  if (!_internal_has_read()) {
    clear_RelType();
    set_has_read();
    RelType_.read_ = CreateMaybeMessage< ::io::substrait::ReadRel >(GetArena());
  }
  return RelType_.read_;
}
inline ::io::substrait::ReadRel* Rel::mutable_read() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.read)
  return _internal_mutable_read();
}

// .io.substrait.FilterRel filter = 2;
inline bool Rel::_internal_has_filter() const {
  return RelType_case() == kFilter;
}
inline bool Rel::has_filter() const {
  return _internal_has_filter();
}
inline void Rel::set_has_filter() {
  _oneof_case_[0] = kFilter;
}
inline void Rel::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArena() == nullptr) {
      delete RelType_.filter_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::FilterRel* Rel::release_filter() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_RelType();
      ::io::substrait::FilterRel* temp = RelType_.filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::FilterRel& Rel::_internal_filter() const {
  return _internal_has_filter()
      ? *RelType_.filter_
      : reinterpret_cast< ::io::substrait::FilterRel&>(::io::substrait::_FilterRel_default_instance_);
}
inline const ::io::substrait::FilterRel& Rel::filter() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.filter)
  return _internal_filter();
}
inline ::io::substrait::FilterRel* Rel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_RelType();
    ::io::substrait::FilterRel* temp = RelType_.filter_;
    RelType_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_filter(::io::substrait::FilterRel* filter) {
  clear_RelType();
  if (filter) {
    set_has_filter();
    RelType_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.filter)
}
inline ::io::substrait::FilterRel* Rel::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_RelType();
    set_has_filter();
    RelType_.filter_ = CreateMaybeMessage< ::io::substrait::FilterRel >(GetArena());
  }
  return RelType_.filter_;
}
inline ::io::substrait::FilterRel* Rel::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.filter)
  return _internal_mutable_filter();
}

// .io.substrait.FetchRel fetch = 3;
inline bool Rel::_internal_has_fetch() const {
  return RelType_case() == kFetch;
}
inline bool Rel::has_fetch() const {
  return _internal_has_fetch();
}
inline void Rel::set_has_fetch() {
  _oneof_case_[0] = kFetch;
}
inline void Rel::clear_fetch() {
  if (_internal_has_fetch()) {
    if (GetArena() == nullptr) {
      delete RelType_.fetch_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::FetchRel* Rel::release_fetch() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_RelType();
      ::io::substrait::FetchRel* temp = RelType_.fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::FetchRel& Rel::_internal_fetch() const {
  return _internal_has_fetch()
      ? *RelType_.fetch_
      : reinterpret_cast< ::io::substrait::FetchRel&>(::io::substrait::_FetchRel_default_instance_);
}
inline const ::io::substrait::FetchRel& Rel::fetch() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.fetch)
  return _internal_fetch();
}
inline ::io::substrait::FetchRel* Rel::unsafe_arena_release_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_RelType();
    ::io::substrait::FetchRel* temp = RelType_.fetch_;
    RelType_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_fetch(::io::substrait::FetchRel* fetch) {
  clear_RelType();
  if (fetch) {
    set_has_fetch();
    RelType_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.fetch)
}
inline ::io::substrait::FetchRel* Rel::_internal_mutable_fetch() {
  if (!_internal_has_fetch()) {
    clear_RelType();
    set_has_fetch();
    RelType_.fetch_ = CreateMaybeMessage< ::io::substrait::FetchRel >(GetArena());
  }
  return RelType_.fetch_;
}
inline ::io::substrait::FetchRel* Rel::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.fetch)
  return _internal_mutable_fetch();
}

// .io.substrait.AggregateRel aggregate = 4;
inline bool Rel::_internal_has_aggregate() const {
  return RelType_case() == kAggregate;
}
inline bool Rel::has_aggregate() const {
  return _internal_has_aggregate();
}
inline void Rel::set_has_aggregate() {
  _oneof_case_[0] = kAggregate;
}
inline void Rel::clear_aggregate() {
  if (_internal_has_aggregate()) {
    if (GetArena() == nullptr) {
      delete RelType_.aggregate_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::AggregateRel* Rel::release_aggregate() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_RelType();
      ::io::substrait::AggregateRel* temp = RelType_.aggregate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::AggregateRel& Rel::_internal_aggregate() const {
  return _internal_has_aggregate()
      ? *RelType_.aggregate_
      : reinterpret_cast< ::io::substrait::AggregateRel&>(::io::substrait::_AggregateRel_default_instance_);
}
inline const ::io::substrait::AggregateRel& Rel::aggregate() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.aggregate)
  return _internal_aggregate();
}
inline ::io::substrait::AggregateRel* Rel::unsafe_arena_release_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_RelType();
    ::io::substrait::AggregateRel* temp = RelType_.aggregate_;
    RelType_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_aggregate(::io::substrait::AggregateRel* aggregate) {
  clear_RelType();
  if (aggregate) {
    set_has_aggregate();
    RelType_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.aggregate)
}
inline ::io::substrait::AggregateRel* Rel::_internal_mutable_aggregate() {
  if (!_internal_has_aggregate()) {
    clear_RelType();
    set_has_aggregate();
    RelType_.aggregate_ = CreateMaybeMessage< ::io::substrait::AggregateRel >(GetArena());
  }
  return RelType_.aggregate_;
}
inline ::io::substrait::AggregateRel* Rel::mutable_aggregate() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.aggregate)
  return _internal_mutable_aggregate();
}

// .io.substrait.SortRel sort = 5;
inline bool Rel::_internal_has_sort() const {
  return RelType_case() == kSort;
}
inline bool Rel::has_sort() const {
  return _internal_has_sort();
}
inline void Rel::set_has_sort() {
  _oneof_case_[0] = kSort;
}
inline void Rel::clear_sort() {
  if (_internal_has_sort()) {
    if (GetArena() == nullptr) {
      delete RelType_.sort_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::SortRel* Rel::release_sort() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_RelType();
      ::io::substrait::SortRel* temp = RelType_.sort_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::SortRel& Rel::_internal_sort() const {
  return _internal_has_sort()
      ? *RelType_.sort_
      : reinterpret_cast< ::io::substrait::SortRel&>(::io::substrait::_SortRel_default_instance_);
}
inline const ::io::substrait::SortRel& Rel::sort() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.sort)
  return _internal_sort();
}
inline ::io::substrait::SortRel* Rel::unsafe_arena_release_sort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_RelType();
    ::io::substrait::SortRel* temp = RelType_.sort_;
    RelType_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_sort(::io::substrait::SortRel* sort) {
  clear_RelType();
  if (sort) {
    set_has_sort();
    RelType_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.sort)
}
inline ::io::substrait::SortRel* Rel::_internal_mutable_sort() {
  if (!_internal_has_sort()) {
    clear_RelType();
    set_has_sort();
    RelType_.sort_ = CreateMaybeMessage< ::io::substrait::SortRel >(GetArena());
  }
  return RelType_.sort_;
}
inline ::io::substrait::SortRel* Rel::mutable_sort() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.sort)
  return _internal_mutable_sort();
}

// .io.substrait.JoinRel join = 6;
inline bool Rel::_internal_has_join() const {
  return RelType_case() == kJoin;
}
inline bool Rel::has_join() const {
  return _internal_has_join();
}
inline void Rel::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void Rel::clear_join() {
  if (_internal_has_join()) {
    if (GetArena() == nullptr) {
      delete RelType_.join_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::JoinRel* Rel::release_join() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.join)
  if (_internal_has_join()) {
    clear_has_RelType();
      ::io::substrait::JoinRel* temp = RelType_.join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::JoinRel& Rel::_internal_join() const {
  return _internal_has_join()
      ? *RelType_.join_
      : reinterpret_cast< ::io::substrait::JoinRel&>(::io::substrait::_JoinRel_default_instance_);
}
inline const ::io::substrait::JoinRel& Rel::join() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.join)
  return _internal_join();
}
inline ::io::substrait::JoinRel* Rel::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.join)
  if (_internal_has_join()) {
    clear_has_RelType();
    ::io::substrait::JoinRel* temp = RelType_.join_;
    RelType_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_join(::io::substrait::JoinRel* join) {
  clear_RelType();
  if (join) {
    set_has_join();
    RelType_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.join)
}
inline ::io::substrait::JoinRel* Rel::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_RelType();
    set_has_join();
    RelType_.join_ = CreateMaybeMessage< ::io::substrait::JoinRel >(GetArena());
  }
  return RelType_.join_;
}
inline ::io::substrait::JoinRel* Rel::mutable_join() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.join)
  return _internal_mutable_join();
}

// .io.substrait.ProjectRel project = 7;
inline bool Rel::_internal_has_project() const {
  return RelType_case() == kProject;
}
inline bool Rel::has_project() const {
  return _internal_has_project();
}
inline void Rel::set_has_project() {
  _oneof_case_[0] = kProject;
}
inline void Rel::clear_project() {
  if (_internal_has_project()) {
    if (GetArena() == nullptr) {
      delete RelType_.project_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::ProjectRel* Rel::release_project() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.project)
  if (_internal_has_project()) {
    clear_has_RelType();
      ::io::substrait::ProjectRel* temp = RelType_.project_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::ProjectRel& Rel::_internal_project() const {
  return _internal_has_project()
      ? *RelType_.project_
      : reinterpret_cast< ::io::substrait::ProjectRel&>(::io::substrait::_ProjectRel_default_instance_);
}
inline const ::io::substrait::ProjectRel& Rel::project() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.project)
  return _internal_project();
}
inline ::io::substrait::ProjectRel* Rel::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.project)
  if (_internal_has_project()) {
    clear_has_RelType();
    ::io::substrait::ProjectRel* temp = RelType_.project_;
    RelType_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_project(::io::substrait::ProjectRel* project) {
  clear_RelType();
  if (project) {
    set_has_project();
    RelType_.project_ = project;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.project)
}
inline ::io::substrait::ProjectRel* Rel::_internal_mutable_project() {
  if (!_internal_has_project()) {
    clear_RelType();
    set_has_project();
    RelType_.project_ = CreateMaybeMessage< ::io::substrait::ProjectRel >(GetArena());
  }
  return RelType_.project_;
}
inline ::io::substrait::ProjectRel* Rel::mutable_project() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.project)
  return _internal_mutable_project();
}

// .io.substrait.SetRel set = 8;
inline bool Rel::_internal_has_set() const {
  return RelType_case() == kSet;
}
inline bool Rel::has_set() const {
  return _internal_has_set();
}
inline void Rel::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void Rel::clear_set() {
  if (_internal_has_set()) {
    if (GetArena() == nullptr) {
      delete RelType_.set_;
    }
    clear_has_RelType();
  }
}
inline ::io::substrait::SetRel* Rel::release_set() {
  // @@protoc_insertion_point(field_release:io.substrait.Rel.set)
  if (_internal_has_set()) {
    clear_has_RelType();
      ::io::substrait::SetRel* temp = RelType_.set_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RelType_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::SetRel& Rel::_internal_set() const {
  return _internal_has_set()
      ? *RelType_.set_
      : reinterpret_cast< ::io::substrait::SetRel&>(::io::substrait::_SetRel_default_instance_);
}
inline const ::io::substrait::SetRel& Rel::set() const {
  // @@protoc_insertion_point(field_get:io.substrait.Rel.set)
  return _internal_set();
}
inline ::io::substrait::SetRel* Rel::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Rel.set)
  if (_internal_has_set()) {
    clear_has_RelType();
    ::io::substrait::SetRel* temp = RelType_.set_;
    RelType_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_set(::io::substrait::SetRel* set) {
  clear_RelType();
  if (set) {
    set_has_set();
    RelType_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Rel.set)
}
inline ::io::substrait::SetRel* Rel::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_RelType();
    set_has_set();
    RelType_.set_ = CreateMaybeMessage< ::io::substrait::SetRel >(GetArena());
  }
  return RelType_.set_;
}
inline ::io::substrait::SetRel* Rel::mutable_set() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Rel.set)
  return _internal_mutable_set();
}

inline bool Rel::has_RelType() const {
  return RelType_case() != RELTYPE_NOT_SET;
}
inline void Rel::clear_has_RelType() {
  _oneof_case_[0] = RELTYPE_NOT_SET;
}
inline Rel::RelTypeCase Rel::RelType_case() const {
  return Rel::RelTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait
}  // namespace io

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format>() {
  return ::io::substrait::ReadRel_LocalFiles_FileOrFiles_Format_descriptor();
}
template <> struct is_proto_enum< ::io::substrait::JoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::substrait::JoinRel_JoinType>() {
  return ::io::substrait::JoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::io::substrait::SetRel_SetOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::substrait::SetRel_SetOp>() {
  return ::io::substrait::SetRel_SetOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_relations_2eproto
