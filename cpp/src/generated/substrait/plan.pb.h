// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "relations.pb.h"
#include "extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plan_2eproto;
namespace io {
namespace substrait {
class Plan;
struct PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::substrait::Plan* Arena::CreateMaybeMessage<::io::substrait::Plan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace substrait {

// ===================================================================

class Plan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  ~Plan() override;
  explicit constexpr Plan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plan& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(nullptr);
  }

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionsFieldNumber = 1,
    kMappingsFieldNumber = 2,
    kRelationsFieldNumber = 3,
  };
  // repeated .io.substrait.Extensions.Extension extensions = 1;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  ::io::substrait::Extensions_Extension* mutable_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Extension >*
      mutable_extensions();
  private:
  const ::io::substrait::Extensions_Extension& _internal_extensions(int index) const;
  ::io::substrait::Extensions_Extension* _internal_add_extensions();
  public:
  const ::io::substrait::Extensions_Extension& extensions(int index) const;
  ::io::substrait::Extensions_Extension* add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Extension >&
      extensions() const;

  // repeated .io.substrait.Extensions.Mapping mappings = 2;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;
  public:
  void clear_mappings();
  ::io::substrait::Extensions_Mapping* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping >*
      mutable_mappings();
  private:
  const ::io::substrait::Extensions_Mapping& _internal_mappings(int index) const;
  ::io::substrait::Extensions_Mapping* _internal_add_mappings();
  public:
  const ::io::substrait::Extensions_Mapping& mappings(int index) const;
  ::io::substrait::Extensions_Mapping* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping >&
      mappings() const;

  // repeated .io.substrait.Rel relations = 3;
  int relations_size() const;
  private:
  int _internal_relations_size() const;
  public:
  void clear_relations();
  ::io::substrait::Rel* mutable_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >*
      mutable_relations();
  private:
  const ::io::substrait::Rel& _internal_relations(int index) const;
  ::io::substrait::Rel* _internal_add_relations();
  public:
  const ::io::substrait::Rel& relations(int index) const;
  ::io::substrait::Rel* add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >&
      relations() const;

  // @@protoc_insertion_point(class_scope:io.substrait.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Extension > extensions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping > mappings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel > relations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Plan

// repeated .io.substrait.Extensions.Extension extensions = 1;
inline int Plan::_internal_extensions_size() const {
  return extensions_.size();
}
inline int Plan::extensions_size() const {
  return _internal_extensions_size();
}
inline ::io::substrait::Extensions_Extension* Plan::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.Plan.extensions)
  return extensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Extension >*
Plan::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.Plan.extensions)
  return &extensions_;
}
inline const ::io::substrait::Extensions_Extension& Plan::_internal_extensions(int index) const {
  return extensions_.Get(index);
}
inline const ::io::substrait::Extensions_Extension& Plan::extensions(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.Plan.extensions)
  return _internal_extensions(index);
}
inline ::io::substrait::Extensions_Extension* Plan::_internal_add_extensions() {
  return extensions_.Add();
}
inline ::io::substrait::Extensions_Extension* Plan::add_extensions() {
  // @@protoc_insertion_point(field_add:io.substrait.Plan.extensions)
  return _internal_add_extensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Extension >&
Plan::extensions() const {
  // @@protoc_insertion_point(field_list:io.substrait.Plan.extensions)
  return extensions_;
}

// repeated .io.substrait.Extensions.Mapping mappings = 2;
inline int Plan::_internal_mappings_size() const {
  return mappings_.size();
}
inline int Plan::mappings_size() const {
  return _internal_mappings_size();
}
inline ::io::substrait::Extensions_Mapping* Plan::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.Plan.mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping >*
Plan::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.Plan.mappings)
  return &mappings_;
}
inline const ::io::substrait::Extensions_Mapping& Plan::_internal_mappings(int index) const {
  return mappings_.Get(index);
}
inline const ::io::substrait::Extensions_Mapping& Plan::mappings(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.Plan.mappings)
  return _internal_mappings(index);
}
inline ::io::substrait::Extensions_Mapping* Plan::_internal_add_mappings() {
  return mappings_.Add();
}
inline ::io::substrait::Extensions_Mapping* Plan::add_mappings() {
  // @@protoc_insertion_point(field_add:io.substrait.Plan.mappings)
  return _internal_add_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping >&
Plan::mappings() const {
  // @@protoc_insertion_point(field_list:io.substrait.Plan.mappings)
  return mappings_;
}

// repeated .io.substrait.Rel relations = 3;
inline int Plan::_internal_relations_size() const {
  return relations_.size();
}
inline int Plan::relations_size() const {
  return _internal_relations_size();
}
inline ::io::substrait::Rel* Plan::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.Plan.relations)
  return relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >*
Plan::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.Plan.relations)
  return &relations_;
}
inline const ::io::substrait::Rel& Plan::_internal_relations(int index) const {
  return relations_.Get(index);
}
inline const ::io::substrait::Rel& Plan::relations(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.Plan.relations)
  return _internal_relations(index);
}
inline ::io::substrait::Rel* Plan::_internal_add_relations() {
  return relations_.Add();
}
inline ::io::substrait::Rel* Plan::add_relations() {
  // @@protoc_insertion_point(field_add:io.substrait.Plan.relations)
  return _internal_add_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Rel >&
Plan::relations() const {
  // @@protoc_insertion_point(field_list:io.substrait.Plan.relations)
  return relations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plan_2eproto
