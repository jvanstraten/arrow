// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expression.proto

#include "expression.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace substrait {
constexpr Expression_Enum_Empty::Expression_Enum_Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Expression_Enum_EmptyDefaultTypeInternal {
  constexpr Expression_Enum_EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Enum_EmptyDefaultTypeInternal() {}
  union {
    Expression_Enum_Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Enum_EmptyDefaultTypeInternal _Expression_Enum_Empty_default_instance_;
constexpr Expression_Enum::Expression_Enum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_EnumDefaultTypeInternal {
  constexpr Expression_EnumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_EnumDefaultTypeInternal() {}
  union {
    Expression_Enum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_EnumDefaultTypeInternal _Expression_Enum_default_instance_;
constexpr Expression_Literal_VarChar::Expression_Literal_VarChar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0u){}
struct Expression_Literal_VarCharDefaultTypeInternal {
  constexpr Expression_Literal_VarCharDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_VarCharDefaultTypeInternal() {}
  union {
    Expression_Literal_VarChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_VarCharDefaultTypeInternal _Expression_Literal_VarChar_default_instance_;
constexpr Expression_Literal_Decimal::Expression_Literal_Decimal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , precision_(0)
  , scale_(0){}
struct Expression_Literal_DecimalDefaultTypeInternal {
  constexpr Expression_Literal_DecimalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_DecimalDefaultTypeInternal() {}
  union {
    Expression_Literal_Decimal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_DecimalDefaultTypeInternal _Expression_Literal_Decimal_default_instance_;
constexpr Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , value_(nullptr){}
struct Expression_Literal_Map_KeyValueDefaultTypeInternal {
  constexpr Expression_Literal_Map_KeyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_Map_KeyValueDefaultTypeInternal() {}
  union {
    Expression_Literal_Map_KeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_Map_KeyValueDefaultTypeInternal _Expression_Literal_Map_KeyValue_default_instance_;
constexpr Expression_Literal_Map::Expression_Literal_Map(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_values_()
  , key_type_(nullptr)
  , value_type_(nullptr){}
struct Expression_Literal_MapDefaultTypeInternal {
  constexpr Expression_Literal_MapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_MapDefaultTypeInternal() {}
  union {
    Expression_Literal_Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_MapDefaultTypeInternal _Expression_Literal_Map_default_instance_;
constexpr Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : years_(0)
  , months_(0){}
struct Expression_Literal_IntervalYearToMonthDefaultTypeInternal {
  constexpr Expression_Literal_IntervalYearToMonthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_IntervalYearToMonthDefaultTypeInternal() {}
  union {
    Expression_Literal_IntervalYearToMonth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_IntervalYearToMonthDefaultTypeInternal _Expression_Literal_IntervalYearToMonth_default_instance_;
constexpr Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : days_(0)
  , seconds_(0){}
struct Expression_Literal_IntervalDayToSecondDefaultTypeInternal {
  constexpr Expression_Literal_IntervalDayToSecondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_IntervalDayToSecondDefaultTypeInternal() {}
  union {
    Expression_Literal_IntervalDayToSecond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_IntervalDayToSecondDefaultTypeInternal _Expression_Literal_IntervalDayToSecond_default_instance_;
constexpr Expression_Literal_Struct::Expression_Literal_Struct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(){}
struct Expression_Literal_StructDefaultTypeInternal {
  constexpr Expression_Literal_StructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_StructDefaultTypeInternal() {}
  union {
    Expression_Literal_Struct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_StructDefaultTypeInternal _Expression_Literal_Struct_default_instance_;
constexpr Expression_Literal_List::Expression_Literal_List(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , element_type_(nullptr){}
struct Expression_Literal_ListDefaultTypeInternal {
  constexpr Expression_Literal_ListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_Literal_ListDefaultTypeInternal() {}
  union {
    Expression_Literal_List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_Literal_ListDefaultTypeInternal _Expression_Literal_List_default_instance_;
constexpr Expression_Literal::Expression_Literal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nullable_(false)
  , _oneof_case_{}{}
struct Expression_LiteralDefaultTypeInternal {
  constexpr Expression_LiteralDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_LiteralDefaultTypeInternal() {}
  union {
    Expression_Literal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_LiteralDefaultTypeInternal _Expression_Literal_default_instance_;
constexpr Expression_ScalarFunction::Expression_ScalarFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , output_type_(nullptr)
  , function_reference_(0u){}
struct Expression_ScalarFunctionDefaultTypeInternal {
  constexpr Expression_ScalarFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_ScalarFunctionDefaultTypeInternal() {}
  union {
    Expression_ScalarFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_ScalarFunctionDefaultTypeInternal _Expression_ScalarFunction_default_instance_;
constexpr Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(PROTOBUF_LONGLONG(0)){}
struct Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal {
  constexpr Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Preceding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal _Expression_WindowFunction_Bound_Preceding_default_instance_;
constexpr Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(PROTOBUF_LONGLONG(0)){}
struct Expression_WindowFunction_Bound_FollowingDefaultTypeInternal {
  constexpr Expression_WindowFunction_Bound_FollowingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_FollowingDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Following _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunction_Bound_FollowingDefaultTypeInternal _Expression_WindowFunction_Bound_Following_default_instance_;
constexpr Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal {
  constexpr Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_CurrentRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal _Expression_WindowFunction_Bound_CurrentRow_default_instance_;
constexpr Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal {
  constexpr Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Unbounded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal _Expression_WindowFunction_Bound_Unbounded_default_instance_;
constexpr Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_WindowFunction_BoundDefaultTypeInternal {
  constexpr Expression_WindowFunction_BoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunction_BoundDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunction_BoundDefaultTypeInternal _Expression_WindowFunction_Bound_default_instance_;
constexpr Expression_WindowFunction::Expression_WindowFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partitions_()
  , sorts_()
  , args_()
  , upper_bound_(nullptr)
  , lower_bound_(nullptr)
  , output_type_(nullptr)
  , function_reference_(0u)
  , phase_(0)
{}
struct Expression_WindowFunctionDefaultTypeInternal {
  constexpr Expression_WindowFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_WindowFunctionDefaultTypeInternal() {}
  union {
    Expression_WindowFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_WindowFunctionDefaultTypeInternal _Expression_WindowFunction_default_instance_;
constexpr Expression_IfThen_IfClause::Expression_IfThen_IfClause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : if__(nullptr)
  , then_(nullptr){}
struct Expression_IfThen_IfClauseDefaultTypeInternal {
  constexpr Expression_IfThen_IfClauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_IfThen_IfClauseDefaultTypeInternal() {}
  union {
    Expression_IfThen_IfClause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_IfThen_IfClauseDefaultTypeInternal _Expression_IfThen_IfClause_default_instance_;
constexpr Expression_IfThen::Expression_IfThen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ifs_()
  , else__(nullptr){}
struct Expression_IfThenDefaultTypeInternal {
  constexpr Expression_IfThenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_IfThenDefaultTypeInternal() {}
  union {
    Expression_IfThen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_IfThenDefaultTypeInternal _Expression_IfThen_default_instance_;
constexpr Expression_Cast::Expression_Cast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(nullptr)
  , input_(nullptr){}
struct Expression_CastDefaultTypeInternal {
  constexpr Expression_CastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_CastDefaultTypeInternal() {}
  union {
    Expression_Cast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_CastDefaultTypeInternal _Expression_Cast_default_instance_;
constexpr Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : if__(nullptr)
  , then_(nullptr){}
struct Expression_SwitchExpression_IfValueDefaultTypeInternal {
  constexpr Expression_SwitchExpression_IfValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_SwitchExpression_IfValueDefaultTypeInternal() {}
  union {
    Expression_SwitchExpression_IfValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_SwitchExpression_IfValueDefaultTypeInternal _Expression_SwitchExpression_IfValue_default_instance_;
constexpr Expression_SwitchExpression::Expression_SwitchExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ifs_()
  , else__(nullptr){}
struct Expression_SwitchExpressionDefaultTypeInternal {
  constexpr Expression_SwitchExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_SwitchExpressionDefaultTypeInternal() {}
  union {
    Expression_SwitchExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_SwitchExpressionDefaultTypeInternal _Expression_SwitchExpression_default_instance_;
constexpr Expression_SingularOrList::Expression_SingularOrList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : options_()
  , value_(nullptr){}
struct Expression_SingularOrListDefaultTypeInternal {
  constexpr Expression_SingularOrListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_SingularOrListDefaultTypeInternal() {}
  union {
    Expression_SingularOrList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_SingularOrListDefaultTypeInternal _Expression_SingularOrList_default_instance_;
constexpr Expression_MultiOrList_Record::Expression_MultiOrList_Record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(){}
struct Expression_MultiOrList_RecordDefaultTypeInternal {
  constexpr Expression_MultiOrList_RecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MultiOrList_RecordDefaultTypeInternal() {}
  union {
    Expression_MultiOrList_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MultiOrList_RecordDefaultTypeInternal _Expression_MultiOrList_Record_default_instance_;
constexpr Expression_MultiOrList::Expression_MultiOrList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , options_(){}
struct Expression_MultiOrListDefaultTypeInternal {
  constexpr Expression_MultiOrListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MultiOrListDefaultTypeInternal() {}
  union {
    Expression_MultiOrList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MultiOrListDefaultTypeInternal _Expression_MultiOrList_default_instance_;
constexpr Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prerequisite_()
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal {
  constexpr Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction_PythonPickleFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal _Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
constexpr Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prerequisite_()
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal {
  constexpr Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction_WebAssemblyFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal _Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
constexpr Expression_EmbeddedFunction::Expression_EmbeddedFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , output_type_(nullptr)
  , _oneof_case_{}{}
struct Expression_EmbeddedFunctionDefaultTypeInternal {
  constexpr Expression_EmbeddedFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_EmbeddedFunctionDefaultTypeInternal _Expression_EmbeddedFunction_default_instance_;
constexpr Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_(nullptr)
  , child_(nullptr){}
struct Expression_ReferenceSegment_MapKeyDefaultTypeInternal {
  constexpr Expression_ReferenceSegment_MapKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_MapKeyDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_ReferenceSegment_MapKeyDefaultTypeInternal _Expression_ReferenceSegment_MapKey_default_instance_;
constexpr Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , field_(0){}
struct Expression_ReferenceSegment_StructFieldDefaultTypeInternal {
  constexpr Expression_ReferenceSegment_StructFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_StructFieldDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_StructField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_ReferenceSegment_StructFieldDefaultTypeInternal _Expression_ReferenceSegment_StructField_default_instance_;
constexpr Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , offset_(0){}
struct Expression_ReferenceSegment_ListElementDefaultTypeInternal {
  constexpr Expression_ReferenceSegment_ListElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_ListElementDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_ReferenceSegment_ListElementDefaultTypeInternal _Expression_ReferenceSegment_ListElement_default_instance_;
constexpr Expression_ReferenceSegment::Expression_ReferenceSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_ReferenceSegmentDefaultTypeInternal {
  constexpr Expression_ReferenceSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_ReferenceSegmentDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_ReferenceSegmentDefaultTypeInternal _Expression_ReferenceSegment_default_instance_;
constexpr Expression_MaskExpression_Select::Expression_MaskExpression_Select(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_MaskExpression_SelectDefaultTypeInternal {
  constexpr Expression_MaskExpression_SelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_SelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_Select _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_SelectDefaultTypeInternal _Expression_MaskExpression_Select_default_instance_;
constexpr Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : struct_items_(){}
struct Expression_MaskExpression_StructSelectDefaultTypeInternal {
  constexpr Expression_MaskExpression_StructSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_StructSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_StructSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_StructSelectDefaultTypeInternal _Expression_MaskExpression_StructSelect_default_instance_;
constexpr Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , field_(0){}
struct Expression_MaskExpression_StructItemDefaultTypeInternal {
  constexpr Expression_MaskExpression_StructItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_StructItemDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_StructItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_StructItemDefaultTypeInternal _Expression_MaskExpression_StructItem_default_instance_;
constexpr Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(0){}
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal {
  constexpr Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
constexpr Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0){}
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal {
  constexpr Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
constexpr Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal {
  constexpr Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
constexpr Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_()
  , child_(nullptr){}
struct Expression_MaskExpression_ListSelectDefaultTypeInternal {
  constexpr Expression_MaskExpression_ListSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_ListSelectDefaultTypeInternal _Expression_MaskExpression_ListSelect_default_instance_;
constexpr Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal {
  constexpr Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKey_default_instance_;
constexpr Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_key_expression_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal {
  constexpr Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect_MapKeyExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
constexpr Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , _oneof_case_{}{}
struct Expression_MaskExpression_MapSelectDefaultTypeInternal {
  constexpr Expression_MaskExpression_MapSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpression_MapSelectDefaultTypeInternal _Expression_MaskExpression_MapSelect_default_instance_;
constexpr Expression_MaskExpression::Expression_MaskExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_(nullptr)
  , maintain_singular_struct_(false){}
struct Expression_MaskExpressionDefaultTypeInternal {
  constexpr Expression_MaskExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_MaskExpressionDefaultTypeInternal() {}
  union {
    Expression_MaskExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_MaskExpressionDefaultTypeInternal _Expression_MaskExpression_default_instance_;
constexpr Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Expression_FieldReference_RootReferenceDefaultTypeInternal {
  constexpr Expression_FieldReference_RootReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_FieldReference_RootReferenceDefaultTypeInternal() {}
  union {
    Expression_FieldReference_RootReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_FieldReference_RootReferenceDefaultTypeInternal _Expression_FieldReference_RootReference_default_instance_;
constexpr Expression_FieldReference::Expression_FieldReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Expression_FieldReferenceDefaultTypeInternal {
  constexpr Expression_FieldReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Expression_FieldReferenceDefaultTypeInternal() {}
  union {
    Expression_FieldReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Expression_FieldReferenceDefaultTypeInternal _Expression_FieldReference_default_instance_;
constexpr Expression::Expression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExpressionDefaultTypeInternal {
  constexpr ExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpressionDefaultTypeInternal() {}
  union {
    Expression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpressionDefaultTypeInternal _Expression_default_instance_;
constexpr SortField::SortField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expr_(nullptr)
  , _oneof_case_{}{}
struct SortFieldDefaultTypeInternal {
  constexpr SortFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortFieldDefaultTypeInternal() {}
  union {
    SortField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortFieldDefaultTypeInternal _SortField_default_instance_;
constexpr AggregateFunction::AggregateFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , sorts_()
  , output_type_(nullptr)
  , function_reference_(0u)
  , phase_(0)
{}
struct AggregateFunctionDefaultTypeInternal {
  constexpr AggregateFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateFunctionDefaultTypeInternal() {}
  union {
    AggregateFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateFunctionDefaultTypeInternal _AggregateFunction_default_instance_;
}  // namespace substrait
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_expression_2eproto[49];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_expression_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_expression_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_expression_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Enum_Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Enum, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Enum, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Enum, enum_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_VarChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_VarChar, value_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_VarChar, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Decimal, value_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Decimal, precision_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Decimal, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map_KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map_KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map_KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map, key_values_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map, key_type_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Map, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalYearToMonth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalYearToMonth, years_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalYearToMonth, months_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalDayToSecond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalDayToSecond, days_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_IntervalDayToSecond, seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_Struct, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_List, values_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal_List, element_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal, nullable_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Literal, literal_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ScalarFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ScalarFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ScalarFunction, args_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ScalarFunction, output_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_Preceding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_Preceding, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_Following, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_Following, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_CurrentRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound_Unbounded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction_Bound, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, partitions_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, sorts_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, phase_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, output_type_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_WindowFunction, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen_IfClause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen_IfClause, if__),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen_IfClause, then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen, ifs_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_IfThen, else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Cast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Cast, type_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_Cast, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression_IfValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression_IfValue, if__),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression_IfValue, then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression, ifs_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SwitchExpression, else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SingularOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SingularOrList, value_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_SingularOrList, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MultiOrList_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MultiOrList_Record, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MultiOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MultiOrList, value_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MultiOrList, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction, function_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction, prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, script_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction, output_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_EmbeddedFunction, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_MapKey, map_key_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_MapKey, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_StructField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_StructField, field_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_StructField, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_ListElement, offset_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment_ListElement, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_ReferenceSegment, reference_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_Select, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_Select, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_Select, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_StructSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_StructSelect, struct_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_StructItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_StructItem, field_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_StructItem, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, start_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect, selection_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_ListSelect, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect_MapKey, map_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression, map_key_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect, child_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression_MapSelect, select_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression, select_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_MaskExpression, maintain_singular_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_FieldReference_RootReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_FieldReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_FieldReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_FieldReference, reference_type_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression_FieldReference, root_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::Expression, rex_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortField, expr_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::substrait::SortField, sort_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, args_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, sorts_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, phase_),
  PROTOBUF_FIELD_OFFSET(::io::substrait::AggregateFunction, output_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::substrait::Expression_Enum_Empty)},
  { 5, -1, sizeof(::io::substrait::Expression_Enum)},
  { 13, -1, sizeof(::io::substrait::Expression_Literal_VarChar)},
  { 20, -1, sizeof(::io::substrait::Expression_Literal_Decimal)},
  { 28, -1, sizeof(::io::substrait::Expression_Literal_Map_KeyValue)},
  { 35, -1, sizeof(::io::substrait::Expression_Literal_Map)},
  { 43, -1, sizeof(::io::substrait::Expression_Literal_IntervalYearToMonth)},
  { 50, -1, sizeof(::io::substrait::Expression_Literal_IntervalDayToSecond)},
  { 57, -1, sizeof(::io::substrait::Expression_Literal_Struct)},
  { 63, -1, sizeof(::io::substrait::Expression_Literal_List)},
  { 70, -1, sizeof(::io::substrait::Expression_Literal)},
  { 101, -1, sizeof(::io::substrait::Expression_ScalarFunction)},
  { 109, -1, sizeof(::io::substrait::Expression_WindowFunction_Bound_Preceding)},
  { 115, -1, sizeof(::io::substrait::Expression_WindowFunction_Bound_Following)},
  { 121, -1, sizeof(::io::substrait::Expression_WindowFunction_Bound_CurrentRow)},
  { 126, -1, sizeof(::io::substrait::Expression_WindowFunction_Bound_Unbounded)},
  { 131, -1, sizeof(::io::substrait::Expression_WindowFunction_Bound)},
  { 141, -1, sizeof(::io::substrait::Expression_WindowFunction)},
  { 154, -1, sizeof(::io::substrait::Expression_IfThen_IfClause)},
  { 161, -1, sizeof(::io::substrait::Expression_IfThen)},
  { 168, -1, sizeof(::io::substrait::Expression_Cast)},
  { 175, -1, sizeof(::io::substrait::Expression_SwitchExpression_IfValue)},
  { 182, -1, sizeof(::io::substrait::Expression_SwitchExpression)},
  { 189, -1, sizeof(::io::substrait::Expression_SingularOrList)},
  { 196, -1, sizeof(::io::substrait::Expression_MultiOrList_Record)},
  { 202, -1, sizeof(::io::substrait::Expression_MultiOrList)},
  { 209, -1, sizeof(::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction)},
  { 216, -1, sizeof(::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction)},
  { 223, -1, sizeof(::io::substrait::Expression_EmbeddedFunction)},
  { 233, -1, sizeof(::io::substrait::Expression_ReferenceSegment_MapKey)},
  { 240, -1, sizeof(::io::substrait::Expression_ReferenceSegment_StructField)},
  { 247, -1, sizeof(::io::substrait::Expression_ReferenceSegment_ListElement)},
  { 254, -1, sizeof(::io::substrait::Expression_ReferenceSegment)},
  { 263, -1, sizeof(::io::substrait::Expression_MaskExpression_Select)},
  { 272, -1, sizeof(::io::substrait::Expression_MaskExpression_StructSelect)},
  { 278, -1, sizeof(::io::substrait::Expression_MaskExpression_StructItem)},
  { 285, -1, sizeof(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement)},
  { 291, -1, sizeof(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice)},
  { 298, -1, sizeof(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem)},
  { 306, -1, sizeof(::io::substrait::Expression_MaskExpression_ListSelect)},
  { 313, -1, sizeof(::io::substrait::Expression_MaskExpression_MapSelect_MapKey)},
  { 319, -1, sizeof(::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression)},
  { 325, -1, sizeof(::io::substrait::Expression_MaskExpression_MapSelect)},
  { 334, -1, sizeof(::io::substrait::Expression_MaskExpression)},
  { 341, -1, sizeof(::io::substrait::Expression_FieldReference_RootReference)},
  { 346, -1, sizeof(::io::substrait::Expression_FieldReference)},
  { 357, -1, sizeof(::io::substrait::Expression)},
  { 373, -1, sizeof(::io::substrait::SortField)},
  { 382, -1, sizeof(::io::substrait::AggregateFunction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Enum_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Enum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_VarChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_Map_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_IntervalYearToMonth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_IntervalDayToSecond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Literal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_ScalarFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_Bound_Preceding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_Bound_Following_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_Bound_CurrentRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_Bound_Unbounded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_Bound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_WindowFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_IfThen_IfClause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_IfThen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_Cast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_SwitchExpression_IfValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_SwitchExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_SingularOrList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MultiOrList_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MultiOrList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_EmbeddedFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_ReferenceSegment_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_ReferenceSegment_StructField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_ReferenceSegment_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_ReferenceSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_Select_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_StructSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_StructItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_ListSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_MapSelect_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_MapSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_MaskExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_FieldReference_RootReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_FieldReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_SortField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::substrait::_AggregateFunction_default_instance_),
};

const char descriptor_table_protodef_expression_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020expression.proto\022\014io.substrait\032\ntype.p"
  "roto\"\2323\n\nExpression\0223\n\007literal\030\001 \001(\0132 .i"
  "o.substrait.Expression.LiteralH\000\022<\n\tsele"
  "ction\030\002 \001(\0132\'.io.substrait.Expression.Fi"
  "eldReferenceH\000\022B\n\017scalar_function\030\003 \001(\0132"
  "\'.io.substrait.Expression.ScalarFunction"
  "H\000\022B\n\017window_function\030\005 \001(\0132\'.io.substra"
  "it.Expression.WindowFunctionH\000\0222\n\007if_the"
  "n\030\006 \001(\0132\037.io.substrait.Expression.IfThen"
  "H\000\022F\n\021switch_expression\030\007 \001(\0132).io.subst"
  "rait.Expression.SwitchExpressionH\000\022C\n\020si"
  "ngular_or_list\030\010 \001(\0132\'.io.substrait.Expr"
  "ession.SingularOrListH\000\022=\n\rmulti_or_list"
  "\030\t \001(\0132$.io.substrait.Expression.MultiOr"
  "ListH\000\022-\n\004enum\030\n \001(\0132\035.io.substrait.Expr"
  "ession.EnumH\000\022-\n\004cast\030\013 \001(\0132\035.io.substra"
  "it.Expression.CastH\000\032m\n\004Enum\022\023\n\tspecifie"
  "d\030\001 \001(\tH\000\022:\n\013unspecified\030\002 \001(\0132#.io.subs"
  "trait.Expression.Enum.EmptyH\000\032\007\n\005EmptyB\013"
  "\n\tenum_kind\032\265\013\n\007Literal\022\021\n\007boolean\030\001 \001(\010"
  "H\000\022\014\n\002i8\030\002 \001(\005H\000\022\r\n\003i16\030\003 \001(\005H\000\022\r\n\003i32\030\005"
  " \001(\005H\000\022\r\n\003i64\030\007 \001(\003H\000\022\016\n\004fp32\030\n \001(\002H\000\022\016\n"
  "\004fp64\030\013 \001(\001H\000\022\020\n\006string\030\014 \001(\tH\000\022\020\n\006binar"
  "y\030\r \001(\014H\000\022\023\n\ttimestamp\030\016 \001(\003H\000\022\016\n\004date\030\020"
  " \001(\003H\000\022\016\n\004time\030\021 \001(\003H\000\022V\n\026interval_year_"
  "to_month\030\023 \001(\01324.io.substrait.Expression"
  ".Literal.IntervalYearToMonthH\000\022V\n\026interv"
  "al_day_to_second\030\024 \001(\01324.io.substrait.Ex"
  "pression.Literal.IntervalDayToSecondH\000\022\024"
  "\n\nfixed_char\030\025 \001(\tH\000\022<\n\010var_char\030\026 \001(\0132("
  ".io.substrait.Expression.Literal.VarChar"
  "H\000\022\026\n\014fixed_binary\030\027 \001(\014H\000\022;\n\007decimal\030\030 "
  "\001(\0132(.io.substrait.Expression.Literal.De"
  "cimalH\000\0229\n\006struct\030\031 \001(\0132\'.io.substrait.E"
  "xpression.Literal.StructH\000\0223\n\003map\030\032 \001(\0132"
  "$.io.substrait.Expression.Literal.MapH\000\022"
  "\026\n\014timestamp_tz\030\033 \001(\003H\000\022\016\n\004uuid\030\034 \001(\014H\000\022"
  "\"\n\004null\030\035 \001(\0132\022.io.substrait.TypeH\000\0225\n\004l"
  "ist\030\036 \001(\0132%.io.substrait.Expression.Lite"
  "ral.ListH\000\022\020\n\010nullable\0302 \001(\010\032(\n\007VarChar\022"
  "\r\n\005value\030\001 \001(\t\022\016\n\006length\030\002 \001(\r\032:\n\007Decima"
  "l\022\r\n\005value\030\001 \001(\014\022\021\n\tprecision\030\002 \001(\005\022\r\n\005s"
  "cale\030\003 \001(\005\032\202\002\n\003Map\022A\n\nkey_values\030\001 \003(\0132-"
  ".io.substrait.Expression.Literal.Map.Key"
  "Value\022$\n\010key_type\030\002 \001(\0132\022.io.substrait.T"
  "ype\022&\n\nvalue_type\030\003 \001(\0132\022.io.substrait.T"
  "ype\032j\n\010KeyValue\022-\n\003key\030\001 \001(\0132 .io.substr"
  "ait.Expression.Literal\022/\n\005value\030\002 \001(\0132 ."
  "io.substrait.Expression.Literal\0324\n\023Inter"
  "valYearToMonth\022\r\n\005years\030\001 \001(\005\022\016\n\006months\030"
  "\002 \001(\005\0324\n\023IntervalDayToSecond\022\014\n\004days\030\001 \001"
  "(\005\022\017\n\007seconds\030\002 \001(\005\032:\n\006Struct\0220\n\006fields\030"
  "\001 \003(\0132 .io.substrait.Expression.Literal\032"
  "b\n\004List\0220\n\006values\030\001 \003(\0132 .io.substrait.E"
  "xpression.Literal\022(\n\014element_type\030\002 \001(\0132"
  "\022.io.substrait.TypeB\016\n\014literal_type\032}\n\016S"
  "calarFunction\022\032\n\022function_reference\030\001 \001("
  "\r\022&\n\004args\030\002 \003(\0132\030.io.substrait.Expressio"
  "n\022\'\n\013output_type\030\003 \001(\0132\022.io.substrait.Ty"
  "pe\032\254\006\n\016WindowFunction\022\032\n\022function_refere"
  "nce\030\001 \001(\r\022,\n\npartitions\030\002 \003(\0132\030.io.subst"
  "rait.Expression\022&\n\005sorts\030\003 \003(\0132\027.io.subs"
  "trait.SortField\022B\n\013upper_bound\030\004 \001(\0132-.i"
  "o.substrait.Expression.WindowFunction.Bo"
  "und\022B\n\013lower_bound\030\005 \001(\0132-.io.substrait."
  "Expression.WindowFunction.Bound\022-\n\005phase"
  "\030\006 \001(\0162\036.io.substrait.AggregationPhase\022\'"
  "\n\013output_type\030\007 \001(\0132\022.io.substrait.Type\022"
  "&\n\004args\030\010 \003(\0132\030.io.substrait.Expression\032"
  "\237\003\n\005Bound\022L\n\tpreceding\030\001 \001(\01327.io.substr"
  "ait.Expression.WindowFunction.Bound.Prec"
  "edingH\000\022L\n\tfollowing\030\002 \001(\01327.io.substrai"
  "t.Expression.WindowFunction.Bound.Follow"
  "ingH\000\022O\n\013current_row\030\003 \001(\01328.io.substrai"
  "t.Expression.WindowFunction.Bound.Curren"
  "tRowH\000\022L\n\tunbounded\030\004 \001(\01327.io.substrait"
  ".Expression.WindowFunction.Bound.Unbound"
  "edH\000\032\033\n\tPreceding\022\016\n\006offset\030\001 \001(\003\032\033\n\tFol"
  "lowing\022\016\n\006offset\030\001 \001(\003\032\014\n\nCurrentRow\032\013\n\t"
  "UnboundedB\006\n\004kind\032\301\001\n\006IfThen\0225\n\003ifs\030\001 \003("
  "\0132(.io.substrait.Expression.IfThen.IfCla"
  "use\022&\n\004else\030\002 \001(\0132\030.io.substrait.Express"
  "ion\032X\n\010IfClause\022$\n\002if\030\001 \001(\0132\030.io.substra"
  "it.Expression\022&\n\004then\030\002 \001(\0132\030.io.substra"
  "it.Expression\032Q\n\004Cast\022 \n\004type\030\001 \001(\0132\022.io"
  ".substrait.Type\022\'\n\005input\030\002 \001(\0132\030.io.subs"
  "trait.Expression\032\333\001\n\020SwitchExpression\022>\n"
  "\003ifs\030\001 \003(\01321.io.substrait.Expression.Swi"
  "tchExpression.IfValue\022&\n\004else\030\002 \001(\0132\030.io"
  ".substrait.Expression\032_\n\007IfValue\022,\n\002if\030\001"
  " \001(\0132 .io.substrait.Expression.Literal\022&"
  "\n\004then\030\002 \001(\0132\030.io.substrait.Expression\032d"
  "\n\016SingularOrList\022\'\n\005value\030\001 \001(\0132\030.io.sub"
  "strait.Expression\022)\n\007options\030\002 \003(\0132\030.io."
  "substrait.Expression\032\250\001\n\013MultiOrList\022\'\n\005"
  "value\030\001 \003(\0132\030.io.substrait.Expression\022<\n"
  "\007options\030\002 \003(\0132+.io.substrait.Expression"
  ".MultiOrList.Record\0322\n\006Record\022(\n\006fields\030"
  "\001 \003(\0132\030.io.substrait.Expression\032\257\003\n\020Embe"
  "ddedFunction\022+\n\targuments\030\001 \003(\0132\030.io.sub"
  "strait.Expression\022\'\n\013output_type\030\002 \001(\0132\022"
  ".io.substrait.Type\022`\n\026python_pickle_func"
  "tion\030\003 \001(\0132>.io.substrait.Expression.Emb"
  "eddedFunction.PythonPickleFunctionH\000\022^\n\025"
  "web_assembly_function\030\004 \001(\0132=.io.substra"
  "it.Expression.EmbeddedFunction.WebAssemb"
  "lyFunctionH\000\032>\n\024PythonPickleFunction\022\020\n\010"
  "function\030\001 \001(\014\022\024\n\014prerequisite\030\002 \003(\t\032;\n\023"
  "WebAssemblyFunction\022\016\n\006script\030\001 \001(\014\022\024\n\014p"
  "rerequisite\030\002 \003(\tB\006\n\004kind\032\257\004\n\020ReferenceS"
  "egment\022C\n\007map_key\030\001 \001(\01320.io.substrait.E"
  "xpression.ReferenceSegment.MapKeyH\000\022M\n\014s"
  "truct_field\030\002 \001(\01325.io.substrait.Express"
  "ion.ReferenceSegment.StructFieldH\000\022M\n\014li"
  "st_element\030\003 \001(\01325.io.substrait.Expressi"
  "on.ReferenceSegment.ListElementH\000\032u\n\006Map"
  "Key\0221\n\007map_key\030\001 \001(\0132 .io.substrait.Expr"
  "ession.Literal\0228\n\005child\030\002 \001(\0132).io.subst"
  "rait.Expression.ReferenceSegment\032V\n\013Stru"
  "ctField\022\r\n\005field\030\001 \001(\005\0228\n\005child\030\002 \001(\0132)."
  "io.substrait.Expression.ReferenceSegment"
  "\032W\n\013ListElement\022\016\n\006offset\030\001 \001(\005\0228\n\005child"
  "\030\002 \001(\0132).io.substrait.Expression.Referen"
  "ceSegmentB\020\n\016reference_type\032\227\n\n\016MaskExpr"
  "ession\022D\n\006select\030\001 \001(\01324.io.substrait.Ex"
  "pression.MaskExpression.StructSelect\022 \n\030"
  "maintain_singular_struct\030\002 \001(\010\032\336\001\n\006Selec"
  "t\022F\n\006struct\030\001 \001(\01324.io.substrait.Express"
  "ion.MaskExpression.StructSelectH\000\022B\n\004lis"
  "t\030\002 \001(\01322.io.substrait.Expression.MaskEx"
  "pression.ListSelectH\000\022@\n\003map\030\003 \001(\01321.io."
  "substrait.Expression.MaskExpression.MapS"
  "electH\000B\006\n\004type\032X\n\014StructSelect\022H\n\014struc"
  "t_items\030\001 \003(\01322.io.substrait.Expression."
  "MaskExpression.StructItem\032Z\n\nStructItem\022"
  "\r\n\005field\030\001 \001(\005\022=\n\005child\030\002 \001(\0132..io.subst"
  "rait.Expression.MaskExpression.Select\032\300\003"
  "\n\nListSelect\022T\n\tselection\030\001 \003(\0132A.io.sub"
  "strait.Expression.MaskExpression.ListSel"
  "ect.ListSelectItem\022=\n\005child\030\002 \001(\0132..io.s"
  "ubstrait.Expression.MaskExpression.Selec"
  "t\032\234\002\n\016ListSelectItem\022]\n\004item\030\001 \001(\0132M.io."
  "substrait.Expression.MaskExpression.List"
  "Select.ListSelectItem.ListElementH\000\022\\\n\005s"
  "lice\030\002 \001(\0132K.io.substrait.Expression.Mas"
  "kExpression.ListSelect.ListSelectItem.Li"
  "stSliceH\000\032\034\n\013ListElement\022\r\n\005field\030\001 \001(\005\032"
  "\'\n\tListSlice\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005"
  "B\006\n\004type\032\302\002\n\tMapSelect\022G\n\003key\030\001 \001(\01328.io"
  ".substrait.Expression.MaskExpression.Map"
  "Select.MapKeyH\000\022X\n\nexpression\030\002 \001(\0132B.io"
  ".substrait.Expression.MaskExpression.Map"
  "Select.MapKeyExpressionH\000\022=\n\005child\030\003 \001(\013"
  "2..io.substrait.Expression.MaskExpressio"
  "n.Select\032\031\n\006MapKey\022\017\n\007map_key\030\001 \001(\t\032.\n\020M"
  "apKeyExpression\022\032\n\022map_key_expression\030\001 "
  "\001(\tB\010\n\006select\032\315\002\n\016FieldReference\022E\n\020dire"
  "ct_reference\030\001 \001(\0132).io.substrait.Expres"
  "sion.ReferenceSegmentH\000\022C\n\020masked_refere"
  "nce\030\002 \001(\0132\'.io.substrait.Expression.Mask"
  "ExpressionH\000\022.\n\nexpression\030\003 \001(\0132\030.io.su"
  "bstrait.ExpressionH\001\022O\n\016root_reference\030\004"
  " \001(\01325.io.substrait.Expression.FieldRefe"
  "rence.RootReferenceH\001\032\017\n\rRootReferenceB\020"
  "\n\016reference_typeB\013\n\troot_typeB\n\n\010rex_typ"
  "e\"\246\002\n\tSortField\022&\n\004expr\030\001 \001(\0132\030.io.subst"
  "rait.Expression\022:\n\tdirection\030\002 \001(\0162%.io."
  "substrait.SortField.SortDirectionH\000\022\'\n\035c"
  "omparison_function_reference\030\003 \001(\rH\000\"\177\n\r"
  "SortDirection\022\013\n\007UNKNOWN\020\000\022\023\n\017ASC_NULLS_"
  "FIRST\020\001\022\022\n\016ASC_NULLS_LAST\020\002\022\024\n\020DESC_NULL"
  "S_FIRST\020\003\022\023\n\017DESC_NULLS_LAST\020\004\022\r\n\tCLUSTE"
  "RED\020\005B\013\n\tsort_kind\"\327\001\n\021AggregateFunction"
  "\022\032\n\022function_reference\030\001 \001(\r\022&\n\004args\030\002 \003"
  "(\0132\030.io.substrait.Expression\022&\n\005sorts\030\003 "
  "\003(\0132\027.io.substrait.SortField\022-\n\005phase\030\004 "
  "\001(\0162\036.io.substrait.AggregationPhase\022\'\n\013o"
  "utput_type\030\005 \001(\0132\022.io.substrait.Type*\221\001\n"
  "\020AggregationPhase\022\013\n\007UNKNOWN\020\000\022\033\n\027INITIA"
  "L_TO_INTERMEDIATE\020\001\022 \n\034INTERMEDIATE_TO_I"
  "NTERMEDIATE\020\002\022\025\n\021INITIAL_TO_RESULT\020\003\022\032\n\026"
  "INTERMEDIATE_TO_RESULT\020\004B+\n\022io.substrait"
  ".protoP\001\252\002\022Substrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_expression_2eproto_deps[1] = {
  &::descriptor_table_type_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_expression_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_expression_2eproto = {
  false, false, 7317, descriptor_table_protodef_expression_2eproto, "expression.proto", 
  &descriptor_table_expression_2eproto_once, descriptor_table_expression_2eproto_deps, 1, 49,
  schemas, file_default_instances, TableStruct_expression_2eproto::offsets,
  file_level_metadata_expression_2eproto, file_level_enum_descriptors_expression_2eproto, file_level_service_descriptors_expression_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_expression_2eproto_getter() {
  return &descriptor_table_expression_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_expression_2eproto(&descriptor_table_expression_2eproto);
namespace io {
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortField_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_expression_2eproto);
  return file_level_enum_descriptors_expression_2eproto[0];
}
bool SortField_SortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SortField_SortDirection SortField::UNKNOWN;
constexpr SortField_SortDirection SortField::ASC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::ASC_NULLS_LAST;
constexpr SortField_SortDirection SortField::DESC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::DESC_NULLS_LAST;
constexpr SortField_SortDirection SortField::CLUSTERED;
constexpr SortField_SortDirection SortField::SortDirection_MIN;
constexpr SortField_SortDirection SortField::SortDirection_MAX;
constexpr int SortField::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_expression_2eproto);
  return file_level_enum_descriptors_expression_2eproto[1];
}
bool AggregationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Expression_Enum_Empty::_Internal {
 public:
};

Expression_Enum_Empty::Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Enum.Empty)
}
Expression_Enum_Empty::Expression_Enum_Empty(const Expression_Enum_Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Enum.Empty)
}

void Expression_Enum_Empty::SharedCtor() {
}

Expression_Enum_Empty::~Expression_Enum_Empty() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Enum.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Enum_Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Enum_Empty::ArenaDtor(void* object) {
  Expression_Enum_Empty* _this = reinterpret_cast< Expression_Enum_Empty* >(object);
  (void)_this;
}
void Expression_Enum_Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Enum_Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Enum_Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Enum.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Enum_Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Enum_Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Enum.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Enum.Empty)
  return target;
}

size_t Expression_Enum_Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Enum.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Enum_Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Enum.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Enum_Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Enum_Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Enum.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Enum.Empty)
    MergeFrom(*source);
  }
}

void Expression_Enum_Empty::MergeFrom(const Expression_Enum_Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Enum.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_Enum_Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Enum.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Enum_Empty::CopyFrom(const Expression_Enum_Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Enum.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Enum_Empty::IsInitialized() const {
  return true;
}

void Expression_Enum_Empty::InternalSwap(Expression_Enum_Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum_Empty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[0]);
}

// ===================================================================

class Expression_Enum::_Internal {
 public:
  static const ::io::substrait::Expression_Enum_Empty& unspecified(const Expression_Enum* msg);
};

const ::io::substrait::Expression_Enum_Empty&
Expression_Enum::_Internal::unspecified(const Expression_Enum* msg) {
  return *msg->enum_kind_.unspecified_;
}
void Expression_Enum::set_allocated_unspecified(::io::substrait::Expression_Enum_Empty* unspecified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_enum_kind();
  if (unspecified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unspecified);
    if (message_arena != submessage_arena) {
      unspecified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unspecified, submessage_arena);
    }
    set_has_unspecified();
    enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Enum.unspecified)
}
Expression_Enum::Expression_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Enum)
}
Expression_Enum::Expression_Enum(const Expression_Enum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_enum_kind();
  switch (from.enum_kind_case()) {
    case kSpecified: {
      _internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _internal_mutable_unspecified()->::io::substrait::Expression_Enum_Empty::MergeFrom(from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Enum)
}

void Expression_Enum::SharedCtor() {
clear_has_enum_kind();
}

Expression_Enum::~Expression_Enum() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Enum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Enum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_enum_kind()) {
    clear_enum_kind();
  }
}

void Expression_Enum::ArenaDtor(void* object) {
  Expression_Enum* _this = reinterpret_cast< Expression_Enum* >(object);
  (void)_this;
}
void Expression_Enum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Enum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Enum::clear_enum_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.Enum)
  switch (enum_kind_case()) {
    case kSpecified: {
      enum_kind_.specified_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kUnspecified: {
      if (GetArena() == nullptr) {
        delete enum_kind_.unspecified_;
      }
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENUM_KIND_NOT_SET;
}


void Expression_Enum::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Enum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_enum_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Enum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string specified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_specified();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.Enum.specified"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Enum.Empty unspecified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unspecified(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Enum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Enum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string specified = 1;
  if (_internal_has_specified()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specified().data(), static_cast<int>(this->_internal_specified().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.Enum.specified");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_specified(), target);
  }

  // .io.substrait.Expression.Enum.Empty unspecified = 2;
  if (_internal_has_unspecified()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unspecified(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Enum)
  return target;
}

size_t Expression_Enum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Enum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (enum_kind_case()) {
    // string specified = 1;
    case kSpecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specified());
      break;
    }
    // .io.substrait.Expression.Enum.Empty unspecified = 2;
    case kUnspecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enum_kind_.unspecified_);
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Enum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Enum)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Enum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Enum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Enum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Enum)
    MergeFrom(*source);
  }
}

void Expression_Enum::MergeFrom(const Expression_Enum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Enum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.enum_kind_case()) {
    case kSpecified: {
      _internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _internal_mutable_unspecified()->::io::substrait::Expression_Enum_Empty::MergeFrom(from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_Enum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Enum::CopyFrom(const Expression_Enum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Enum::IsInitialized() const {
  return true;
}

void Expression_Enum::InternalSwap(Expression_Enum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enum_kind_, other->enum_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[1]);
}

// ===================================================================

class Expression_Literal_VarChar::_Internal {
 public:
};

Expression_Literal_VarChar::Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.VarChar)
}
Expression_Literal_VarChar::Expression_Literal_VarChar(const Expression_Literal_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.VarChar)
}

void Expression_Literal_VarChar::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
length_ = 0u;
}

Expression_Literal_VarChar::~Expression_Literal_VarChar() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.VarChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_VarChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_Literal_VarChar::ArenaDtor(void* object) {
  Expression_Literal_VarChar* _this = reinterpret_cast< Expression_Literal_VarChar* >(object);
  (void)_this;
}
void Expression_Literal_VarChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_VarChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_VarChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.Literal.VarChar.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_VarChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.Literal.VarChar.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.VarChar)
  return target;
}

size_t Expression_Literal_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.VarChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_VarChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_VarChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_VarChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.VarChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.VarChar)
    MergeFrom(*source);
  }
}

void Expression_Literal_VarChar::MergeFrom(const Expression_Literal_VarChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void Expression_Literal_VarChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_VarChar::CopyFrom(const Expression_Literal_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_VarChar::IsInitialized() const {
  return true;
}

void Expression_Literal_VarChar::InternalSwap(Expression_Literal_VarChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_VarChar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[2]);
}

// ===================================================================

class Expression_Literal_Decimal::_Internal {
 public:
};

Expression_Literal_Decimal::Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.Decimal)
}
Expression_Literal_Decimal::Expression_Literal_Decimal(const Expression_Literal_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.Decimal)
}

void Expression_Literal_Decimal::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&precision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
}

Expression_Literal_Decimal::~Expression_Literal_Decimal() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_Literal_Decimal::ArenaDtor(void* object) {
  Expression_Literal_Decimal* _this = reinterpret_cast< Expression_Literal_Decimal* >(object);
  (void)_this;
}
void Expression_Literal_Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.Decimal)
  return target;
}

size_t Expression_Literal_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.Decimal)
    MergeFrom(*source);
  }
}

void Expression_Literal_Decimal::MergeFrom(const Expression_Literal_Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void Expression_Literal_Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Decimal::CopyFrom(const Expression_Literal_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Decimal::IsInitialized() const {
  return true;
}

void Expression_Literal_Decimal::InternalSwap(Expression_Literal_Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, scale_)
      + sizeof(Expression_Literal_Decimal::scale_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, precision_)>(
          reinterpret_cast<char*>(&precision_),
          reinterpret_cast<char*>(&other->precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Decimal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[3]);
}

// ===================================================================

class Expression_Literal_Map_KeyValue::_Internal {
 public:
  static const ::io::substrait::Expression_Literal& key(const Expression_Literal_Map_KeyValue* msg);
  static const ::io::substrait::Expression_Literal& value(const Expression_Literal_Map_KeyValue* msg);
};

const ::io::substrait::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::key(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->key_;
}
const ::io::substrait::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::value(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->value_;
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.Map.KeyValue)
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(const Expression_Literal_Map_KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::io::substrait::Expression_Literal(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::io::substrait::Expression_Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.Map.KeyValue)
}

void Expression_Literal_Map_KeyValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Expression_Literal_Map_KeyValue::~Expression_Literal_Map_KeyValue() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.Map.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Map_KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void Expression_Literal_Map_KeyValue::ArenaDtor(void* object) {
  Expression_Literal_Map_KeyValue* _this = reinterpret_cast< Expression_Literal_Map_KeyValue* >(object);
  (void)_this;
}
void Expression_Literal_Map_KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Map_KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_Map_KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map_KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.Literal key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Map_KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .io.substrait.Expression.Literal value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.Map.KeyValue)
  return target;
}

size_t Expression_Literal_Map_KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.Map.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .io.substrait.Expression.Literal value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Map_KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Map_KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Map_KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.Map.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.Map.KeyValue)
    MergeFrom(*source);
  }
}

void Expression_Literal_Map_KeyValue::MergeFrom(const Expression_Literal_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::io::substrait::Expression_Literal::MergeFrom(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::io::substrait::Expression_Literal::MergeFrom(from._internal_value());
  }
}

void Expression_Literal_Map_KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Map_KeyValue::CopyFrom(const Expression_Literal_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map_KeyValue::IsInitialized() const {
  return true;
}

void Expression_Literal_Map_KeyValue::InternalSwap(Expression_Literal_Map_KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, value_)
      + sizeof(Expression_Literal_Map_KeyValue::value_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map_KeyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[4]);
}

// ===================================================================

class Expression_Literal_Map::_Internal {
 public:
  static const ::io::substrait::Type& key_type(const Expression_Literal_Map* msg);
  static const ::io::substrait::Type& value_type(const Expression_Literal_Map* msg);
};

const ::io::substrait::Type&
Expression_Literal_Map::_Internal::key_type(const Expression_Literal_Map* msg) {
  return *msg->key_type_;
}
const ::io::substrait::Type&
Expression_Literal_Map::_Internal::value_type(const Expression_Literal_Map* msg) {
  return *msg->value_type_;
}
void Expression_Literal_Map::clear_key_type() {
  if (GetArena() == nullptr && key_type_ != nullptr) {
    delete key_type_;
  }
  key_type_ = nullptr;
}
void Expression_Literal_Map::clear_value_type() {
  if (GetArena() == nullptr && value_type_ != nullptr) {
    delete value_type_;
  }
  value_type_ = nullptr;
}
Expression_Literal_Map::Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.Map)
}
Expression_Literal_Map::Expression_Literal_Map(const Expression_Literal_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_values_(from.key_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_type()) {
    key_type_ = new ::io::substrait::Type(*from.key_type_);
  } else {
    key_type_ = nullptr;
  }
  if (from._internal_has_value_type()) {
    value_type_ = new ::io::substrait::Type(*from.value_type_);
  } else {
    value_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.Map)
}

void Expression_Literal_Map::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&key_type_)) + sizeof(value_type_));
}

Expression_Literal_Map::~Expression_Literal_Map() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_type_;
  if (this != internal_default_instance()) delete value_type_;
}

void Expression_Literal_Map::ArenaDtor(void* object) {
  Expression_Literal_Map* _this = reinterpret_cast< Expression_Literal_Map* >(object);
  (void)_this;
}
void Expression_Literal_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_values_.Clear();
  if (GetArena() == nullptr && key_type_ != nullptr) {
    delete key_type_;
  }
  key_type_ = nullptr;
  if (GetArena() == nullptr && value_type_ != nullptr) {
    delete value_type_;
  }
  value_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.Literal.Map.KeyValue key_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type key_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal.Map.KeyValue key_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_key_values(i), target, stream);
  }

  // .io.substrait.Type key_type = 2;
  if (this->has_key_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_type(this), target, stream);
  }

  // .io.substrait.Type value_type = 3;
  if (this->has_value_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.Map)
  return target;
}

size_t Expression_Literal_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal.Map.KeyValue key_values = 1;
  total_size += 1UL * this->_internal_key_values_size();
  for (const auto& msg : this->key_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type key_type = 2;
  if (this->has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);
  }

  // .io.substrait.Type value_type = 3;
  if (this->has_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.Map)
    MergeFrom(*source);
  }
}

void Expression_Literal_Map::MergeFrom(const Expression_Literal_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_values_.MergeFrom(from.key_values_);
  if (from.has_key_type()) {
    _internal_mutable_key_type()->::io::substrait::Type::MergeFrom(from._internal_key_type());
  }
  if (from.has_value_type()) {
    _internal_mutable_value_type()->::io::substrait::Type::MergeFrom(from._internal_value_type());
  }
}

void Expression_Literal_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Map::CopyFrom(const Expression_Literal_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map::IsInitialized() const {
  return true;
}

void Expression_Literal_Map::InternalSwap(Expression_Literal_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_values_.InternalSwap(&other->key_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Map, value_type_)
      + sizeof(Expression_Literal_Map::value_type_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Map, key_type_)>(
          reinterpret_cast<char*>(&key_type_),
          reinterpret_cast<char*>(&other->key_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[5]);
}

// ===================================================================

class Expression_Literal_IntervalYearToMonth::_Internal {
 public:
};

Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.IntervalYearToMonth)
}
Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(const Expression_Literal_IntervalYearToMonth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&years_, &from.years_,
    static_cast<size_t>(reinterpret_cast<char*>(&months_) -
    reinterpret_cast<char*>(&years_)) + sizeof(months_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.IntervalYearToMonth)
}

void Expression_Literal_IntervalYearToMonth::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&years_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&months_) -
    reinterpret_cast<char*>(&years_)) + sizeof(months_));
}

Expression_Literal_IntervalYearToMonth::~Expression_Literal_IntervalYearToMonth() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.IntervalYearToMonth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_IntervalYearToMonth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_IntervalYearToMonth::ArenaDtor(void* object) {
  Expression_Literal_IntervalYearToMonth* _this = reinterpret_cast< Expression_Literal_IntervalYearToMonth* >(object);
  (void)_this;
}
void Expression_Literal_IntervalYearToMonth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_IntervalYearToMonth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_IntervalYearToMonth::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&years_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&months_) -
      reinterpret_cast<char*>(&years_)) + sizeof(months_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalYearToMonth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 years = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          years_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 months = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          months_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_IntervalYearToMonth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->years() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_years(), target);
  }

  // int32 months = 2;
  if (this->months() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_months(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.IntervalYearToMonth)
  return target;
}

size_t Expression_Literal_IntervalYearToMonth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->years() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_years());
  }

  // int32 months = 2;
  if (this->months() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_months());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_IntervalYearToMonth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_IntervalYearToMonth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_IntervalYearToMonth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.IntervalYearToMonth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.IntervalYearToMonth)
    MergeFrom(*source);
  }
}

void Expression_Literal_IntervalYearToMonth::MergeFrom(const Expression_Literal_IntervalYearToMonth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.years() != 0) {
    _internal_set_years(from._internal_years());
  }
  if (from.months() != 0) {
    _internal_set_months(from._internal_months());
  }
}

void Expression_Literal_IntervalYearToMonth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_IntervalYearToMonth::CopyFrom(const Expression_Literal_IntervalYearToMonth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.IntervalYearToMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalYearToMonth::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalYearToMonth::InternalSwap(Expression_Literal_IntervalYearToMonth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, months_)
      + sizeof(Expression_Literal_IntervalYearToMonth::months_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, years_)>(
          reinterpret_cast<char*>(&years_),
          reinterpret_cast<char*>(&other->years_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalYearToMonth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[6]);
}

// ===================================================================

class Expression_Literal_IntervalDayToSecond::_Internal {
 public:
};

Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.IntervalDayToSecond)
}
Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(const Expression_Literal_IntervalDayToSecond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&days_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.IntervalDayToSecond)
}

void Expression_Literal_IntervalDayToSecond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&days_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&days_)) + sizeof(seconds_));
}

Expression_Literal_IntervalDayToSecond::~Expression_Literal_IntervalDayToSecond() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.IntervalDayToSecond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_IntervalDayToSecond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_IntervalDayToSecond::ArenaDtor(void* object) {
  Expression_Literal_IntervalDayToSecond* _this = reinterpret_cast< Expression_Literal_IntervalDayToSecond* >(object);
  (void)_this;
}
void Expression_Literal_IntervalDayToSecond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_IntervalDayToSecond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_IntervalDayToSecond::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&days_)) + sizeof(seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalDayToSecond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_IntervalDayToSecond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_days(), target);
  }

  // int32 seconds = 2;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.IntervalDayToSecond)
  return target;
}

size_t Expression_Literal_IntervalDayToSecond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // int32 seconds = 2;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_IntervalDayToSecond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_IntervalDayToSecond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_IntervalDayToSecond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.IntervalDayToSecond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.IntervalDayToSecond)
    MergeFrom(*source);
  }
}

void Expression_Literal_IntervalDayToSecond::MergeFrom(const Expression_Literal_IntervalDayToSecond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
}

void Expression_Literal_IntervalDayToSecond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_IntervalDayToSecond::CopyFrom(const Expression_Literal_IntervalDayToSecond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.IntervalDayToSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalDayToSecond::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalDayToSecond::InternalSwap(Expression_Literal_IntervalDayToSecond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, seconds_)
      + sizeof(Expression_Literal_IntervalDayToSecond::seconds_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, days_)>(
          reinterpret_cast<char*>(&days_),
          reinterpret_cast<char*>(&other->days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalDayToSecond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[7]);
}

// ===================================================================

class Expression_Literal_Struct::_Internal {
 public:
};

Expression_Literal_Struct::Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.Struct)
}
Expression_Literal_Struct::Expression_Literal_Struct(const Expression_Literal_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.Struct)
}

void Expression_Literal_Struct::SharedCtor() {
}

Expression_Literal_Struct::~Expression_Literal_Struct() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.Struct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_Struct::ArenaDtor(void* object) {
  Expression_Literal_Struct* _this = reinterpret_cast< Expression_Literal_Struct* >(object);
  (void)_this;
}
void Expression_Literal_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.Literal fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Struct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.Struct)
  return target;
}

size_t Expression_Literal_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.Struct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Struct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Struct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Struct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.Struct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.Struct)
    MergeFrom(*source);
  }
}

void Expression_Literal_Struct::MergeFrom(const Expression_Literal_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void Expression_Literal_Struct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Struct::CopyFrom(const Expression_Literal_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Struct::IsInitialized() const {
  return true;
}

void Expression_Literal_Struct::InternalSwap(Expression_Literal_Struct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Struct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[8]);
}

// ===================================================================

class Expression_Literal_List::_Internal {
 public:
  static const ::io::substrait::Type& element_type(const Expression_Literal_List* msg);
};

const ::io::substrait::Type&
Expression_Literal_List::_Internal::element_type(const Expression_Literal_List* msg) {
  return *msg->element_type_;
}
void Expression_Literal_List::clear_element_type() {
  if (GetArena() == nullptr && element_type_ != nullptr) {
    delete element_type_;
  }
  element_type_ = nullptr;
}
Expression_Literal_List::Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal.List)
}
Expression_Literal_List::Expression_Literal_List(const Expression_Literal_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element_type()) {
    element_type_ = new ::io::substrait::Type(*from.element_type_);
  } else {
    element_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal.List)
}

void Expression_Literal_List::SharedCtor() {
element_type_ = nullptr;
}

Expression_Literal_List::~Expression_Literal_List() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete element_type_;
}

void Expression_Literal_List::ArenaDtor(void* object) {
  Expression_Literal_List* _this = reinterpret_cast< Expression_Literal_List* >(object);
  (void)_this;
}
void Expression_Literal_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal_List::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && element_type_ != nullptr) {
    delete element_type_;
  }
  element_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.Literal values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type element_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_element_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  // .io.substrait.Type element_type = 2;
  if (this->has_element_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::element_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal.List)
  return target;
}

size_t Expression_Literal_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.Literal values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type element_type = 2;
  if (this->has_element_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *element_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal.List)
    MergeFrom(*source);
  }
}

void Expression_Literal_List::MergeFrom(const Expression_Literal_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_element_type()) {
    _internal_mutable_element_type()->::io::substrait::Type::MergeFrom(from._internal_element_type());
  }
}

void Expression_Literal_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_List::CopyFrom(const Expression_Literal_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_List::IsInitialized() const {
  return true;
}

void Expression_Literal_List::InternalSwap(Expression_Literal_List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_List::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[9]);
}

// ===================================================================

class Expression_Literal::_Internal {
 public:
  static const ::io::substrait::Expression_Literal_IntervalYearToMonth& interval_year_to_month(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_IntervalDayToSecond& interval_day_to_second(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_VarChar& var_char(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_Decimal& decimal(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_Struct& struct_(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_Map& map(const Expression_Literal* msg);
  static const ::io::substrait::Type& null(const Expression_Literal* msg);
  static const ::io::substrait::Expression_Literal_List& list(const Expression_Literal* msg);
};

const ::io::substrait::Expression_Literal_IntervalYearToMonth&
Expression_Literal::_Internal::interval_year_to_month(const Expression_Literal* msg) {
  return *msg->literal_type_.interval_year_to_month_;
}
const ::io::substrait::Expression_Literal_IntervalDayToSecond&
Expression_Literal::_Internal::interval_day_to_second(const Expression_Literal* msg) {
  return *msg->literal_type_.interval_day_to_second_;
}
const ::io::substrait::Expression_Literal_VarChar&
Expression_Literal::_Internal::var_char(const Expression_Literal* msg) {
  return *msg->literal_type_.var_char_;
}
const ::io::substrait::Expression_Literal_Decimal&
Expression_Literal::_Internal::decimal(const Expression_Literal* msg) {
  return *msg->literal_type_.decimal_;
}
const ::io::substrait::Expression_Literal_Struct&
Expression_Literal::_Internal::struct_(const Expression_Literal* msg) {
  return *msg->literal_type_.struct__;
}
const ::io::substrait::Expression_Literal_Map&
Expression_Literal::_Internal::map(const Expression_Literal* msg) {
  return *msg->literal_type_.map_;
}
const ::io::substrait::Type&
Expression_Literal::_Internal::null(const Expression_Literal* msg) {
  return *msg->literal_type_.null_;
}
const ::io::substrait::Expression_Literal_List&
Expression_Literal::_Internal::list(const Expression_Literal* msg) {
  return *msg->literal_type_.list_;
}
void Expression_Literal::set_allocated_interval_year_to_month(::io::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (interval_year_to_month) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_year_to_month);
    if (message_arena != submessage_arena) {
      interval_year_to_month = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year_to_month, submessage_arena);
    }
    set_has_interval_year_to_month();
    literal_type_.interval_year_to_month_ = interval_year_to_month;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.interval_year_to_month)
}
void Expression_Literal::set_allocated_interval_day_to_second(::io::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (interval_day_to_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_day_to_second);
    if (message_arena != submessage_arena) {
      interval_day_to_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day_to_second, submessage_arena);
    }
    set_has_interval_day_to_second();
    literal_type_.interval_day_to_second_ = interval_day_to_second;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.interval_day_to_second)
}
void Expression_Literal::set_allocated_var_char(::io::substrait::Expression_Literal_VarChar* var_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (var_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_char);
    if (message_arena != submessage_arena) {
      var_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_char, submessage_arena);
    }
    set_has_var_char();
    literal_type_.var_char_ = var_char;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.var_char)
}
void Expression_Literal::set_allocated_decimal(::io::substrait::Expression_Literal_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    literal_type_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.decimal)
}
void Expression_Literal::set_allocated_struct_(::io::substrait::Expression_Literal_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    literal_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.struct)
}
void Expression_Literal::set_allocated_map(::io::substrait::Expression_Literal_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    literal_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.map)
}
void Expression_Literal::set_allocated_null(::io::substrait::Type* null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null)->GetArena();
    if (message_arena != submessage_arena) {
      null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null, submessage_arena);
    }
    set_has_null();
    literal_type_.null_ = null;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.null)
}
void Expression_Literal::clear_null() {
  if (_internal_has_null()) {
    if (GetArena() == nullptr) {
      delete literal_type_.null_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_list(::io::substrait::Expression_Literal_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    literal_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.Literal.list)
}
Expression_Literal::Expression_Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Literal)
}
Expression_Literal::Expression_Literal(const Expression_Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nullable_ = from.nullable_;
  clear_has_literal_type();
  switch (from.literal_type_case()) {
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _internal_mutable_interval_year_to_month()->::io::substrait::Expression_Literal_IntervalYearToMonth::MergeFrom(from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _internal_mutable_interval_day_to_second()->::io::substrait::Expression_Literal_IntervalDayToSecond::MergeFrom(from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _internal_mutable_var_char()->::io::substrait::Expression_Literal_VarChar::MergeFrom(from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::io::substrait::Expression_Literal_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Expression_Literal_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Expression_Literal_Map::MergeFrom(from._internal_map());
      break;
    }
    case kTimestampTz: {
      _internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _internal_mutable_null()->::io::substrait::Type::MergeFrom(from._internal_null());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Expression_Literal_List::MergeFrom(from._internal_list());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Literal)
}

void Expression_Literal::SharedCtor() {
nullable_ = false;
clear_has_literal_type();
}

Expression_Literal::~Expression_Literal() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Literal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_literal_type()) {
    clear_literal_type();
  }
}

void Expression_Literal::ArenaDtor(void* object) {
  Expression_Literal* _this = reinterpret_cast< Expression_Literal* >(object);
  (void)_this;
}
void Expression_Literal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Literal::clear_literal_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.Literal)
  switch (literal_type_case()) {
    case kBoolean: {
      // No need to clear
      break;
    }
    case kI8: {
      // No need to clear
      break;
    }
    case kI16: {
      // No need to clear
      break;
    }
    case kI32: {
      // No need to clear
      break;
    }
    case kI64: {
      // No need to clear
      break;
    }
    case kFp32: {
      // No need to clear
      break;
    }
    case kFp64: {
      // No need to clear
      break;
    }
    case kString: {
      literal_type_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kBinary: {
      literal_type_.binary_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kTimestamp: {
      // No need to clear
      break;
    }
    case kDate: {
      // No need to clear
      break;
    }
    case kTime: {
      // No need to clear
      break;
    }
    case kIntervalYearToMonth: {
      if (GetArena() == nullptr) {
        delete literal_type_.interval_year_to_month_;
      }
      break;
    }
    case kIntervalDayToSecond: {
      if (GetArena() == nullptr) {
        delete literal_type_.interval_day_to_second_;
      }
      break;
    }
    case kFixedChar: {
      literal_type_.fixed_char_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kVarChar: {
      if (GetArena() == nullptr) {
        delete literal_type_.var_char_;
      }
      break;
    }
    case kFixedBinary: {
      literal_type_.fixed_binary_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDecimal: {
      if (GetArena() == nullptr) {
        delete literal_type_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArena() == nullptr) {
        delete literal_type_.struct__;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete literal_type_.map_;
      }
      break;
    }
    case kTimestampTz: {
      // No need to clear
      break;
    }
    case kUuid: {
      literal_type_.uuid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kNull: {
      if (GetArena() == nullptr) {
        delete literal_type_.null_;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete literal_type_.list_;
      }
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LITERAL_TYPE_NOT_SET;
}


void Expression_Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nullable_ = false;
  clear_literal_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool boolean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_i8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_i16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fp32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _internal_set_fp32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double fp64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_fp64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.Literal.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _internal_set_date(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _internal_set_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year_to_month(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day_to_second(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fixed_char = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_fixed_char();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.Literal.fixed_char"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.VarChar var_char = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_char(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fixed_binary = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_fixed_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.Decimal decimal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.Struct struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.Map map = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp_tz = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type null = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_null(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Literal.List list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nullable = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool boolean = 1;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_boolean(), target);
  }

  // int32 i8 = 2;
  if (_internal_has_i8()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i8(), target);
  }

  // int32 i16 = 3;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i16(), target);
  }

  // int32 i32 = 5;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_i32(), target);
  }

  // int64 i64 = 7;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_i64(), target);
  }

  // float fp32 = 10;
  if (_internal_has_fp32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fp32(), target);
  }

  // double fp64 = 11;
  if (_internal_has_fp64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_fp64(), target);
  }

  // string string = 12;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.Literal.string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string(), target);
  }

  // bytes binary = 13;
  if (_internal_has_binary()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_binary(), target);
  }

  // int64 timestamp = 14;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // int64 date = 16;
  if (_internal_has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_date(), target);
  }

  // int64 time = 17;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_time(), target);
  }

  // .io.substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
  if (_internal_has_interval_year_to_month()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::interval_year_to_month(this), target, stream);
  }

  // .io.substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
  if (_internal_has_interval_day_to_second()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::interval_day_to_second(this), target, stream);
  }

  // string fixed_char = 21;
  if (_internal_has_fixed_char()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixed_char().data(), static_cast<int>(this->_internal_fixed_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.Literal.fixed_char");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_fixed_char(), target);
  }

  // .io.substrait.Expression.Literal.VarChar var_char = 22;
  if (_internal_has_var_char()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::var_char(this), target, stream);
  }

  // bytes fixed_binary = 23;
  if (_internal_has_fixed_binary()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_fixed_binary(), target);
  }

  // .io.substrait.Expression.Literal.Decimal decimal = 24;
  if (_internal_has_decimal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::decimal(this), target, stream);
  }

  // .io.substrait.Expression.Literal.Struct struct = 25;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::struct_(this), target, stream);
  }

  // .io.substrait.Expression.Literal.Map map = 26;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::map(this), target, stream);
  }

  // int64 timestamp_tz = 27;
  if (_internal_has_timestamp_tz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_timestamp_tz(), target);
  }

  // bytes uuid = 28;
  if (_internal_has_uuid()) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_uuid(), target);
  }

  // .io.substrait.Type null = 29;
  if (_internal_has_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::null(this), target, stream);
  }

  // .io.substrait.Expression.Literal.List list = 30;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::list(this), target, stream);
  }

  // bool nullable = 50;
  if (this->nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_nullable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Literal)
  return target;
}

size_t Expression_Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Literal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool nullable = 50;
  if (this->nullable() != 0) {
    total_size += 2 + 1;
  }

  switch (literal_type_case()) {
    // bool boolean = 1;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // int32 i8 = 2;
    case kI8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i8());
      break;
    }
    // int32 i16 = 3;
    case kI16: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i16());
      break;
    }
    // int32 i32 = 5;
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i32());
      break;
    }
    // int64 i64 = 7;
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i64());
      break;
    }
    // float fp32 = 10;
    case kFp32: {
      total_size += 1 + 4;
      break;
    }
    // double fp64 = 11;
    case kFp64: {
      total_size += 1 + 8;
      break;
    }
    // string string = 12;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // bytes binary = 13;
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary());
      break;
    }
    // int64 timestamp = 14;
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp());
      break;
    }
    // int64 date = 16;
    case kDate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_date());
      break;
    }
    // int64 time = 17;
    case kTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
      break;
    }
    // .io.substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
    case kIntervalYearToMonth: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.interval_year_to_month_);
      break;
    }
    // .io.substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
    case kIntervalDayToSecond: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.interval_day_to_second_);
      break;
    }
    // string fixed_char = 21;
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fixed_char());
      break;
    }
    // .io.substrait.Expression.Literal.VarChar var_char = 22;
    case kVarChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.var_char_);
      break;
    }
    // bytes fixed_binary = 23;
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fixed_binary());
      break;
    }
    // .io.substrait.Expression.Literal.Decimal decimal = 24;
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.decimal_);
      break;
    }
    // .io.substrait.Expression.Literal.Struct struct = 25;
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.struct__);
      break;
    }
    // .io.substrait.Expression.Literal.Map map = 26;
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.map_);
      break;
    }
    // int64 timestamp_tz = 27;
    case kTimestampTz: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_tz());
      break;
    }
    // bytes uuid = 28;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
      break;
    }
    // .io.substrait.Type null = 29;
    case kNull: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.null_);
      break;
    }
    // .io.substrait.Expression.Literal.List list = 30;
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.list_);
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Literal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Literal)
    MergeFrom(*source);
  }
}

void Expression_Literal::MergeFrom(const Expression_Literal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nullable() != 0) {
    _internal_set_nullable(from._internal_nullable());
  }
  switch (from.literal_type_case()) {
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _internal_mutable_interval_year_to_month()->::io::substrait::Expression_Literal_IntervalYearToMonth::MergeFrom(from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _internal_mutable_interval_day_to_second()->::io::substrait::Expression_Literal_IntervalDayToSecond::MergeFrom(from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _internal_mutable_var_char()->::io::substrait::Expression_Literal_VarChar::MergeFrom(from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::io::substrait::Expression_Literal_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Expression_Literal_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Expression_Literal_Map::MergeFrom(from._internal_map());
      break;
    }
    case kTimestampTz: {
      _internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _internal_mutable_null()->::io::substrait::Type::MergeFrom(from._internal_null());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Expression_Literal_List::MergeFrom(from._internal_list());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_Literal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal::CopyFrom(const Expression_Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal::IsInitialized() const {
  return true;
}

void Expression_Literal::InternalSwap(Expression_Literal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nullable_, other->nullable_);
  swap(literal_type_, other->literal_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[10]);
}

// ===================================================================

class Expression_ScalarFunction::_Internal {
 public:
  static const ::io::substrait::Type& output_type(const Expression_ScalarFunction* msg);
};

const ::io::substrait::Type&
Expression_ScalarFunction::_Internal::output_type(const Expression_ScalarFunction* msg) {
  return *msg->output_type_;
}
void Expression_ScalarFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
Expression_ScalarFunction::Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.ScalarFunction)
}
Expression_ScalarFunction::Expression_ScalarFunction(const Expression_ScalarFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::io::substrait::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  function_reference_ = from.function_reference_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.ScalarFunction)
}

void Expression_ScalarFunction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_reference_) -
    reinterpret_cast<char*>(&output_type_)) + sizeof(function_reference_));
}

Expression_ScalarFunction::~Expression_ScalarFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.ScalarFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ScalarFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
}

void Expression_ScalarFunction::ArenaDtor(void* object) {
  Expression_ScalarFunction* _this = reinterpret_cast< Expression_ScalarFunction* >(object);
  (void)_this;
}
void Expression_ScalarFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ScalarFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_ScalarFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.ScalarFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  function_reference_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ScalarFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type output_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ScalarFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.ScalarFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .io.substrait.Expression args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // .io.substrait.Type output_type = 3;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.ScalarFunction)
  return target;
}

size_t Expression_ScalarFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.ScalarFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type output_type = 3;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ScalarFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.ScalarFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ScalarFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ScalarFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.ScalarFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.ScalarFunction)
    MergeFrom(*source);
  }
}

void Expression_ScalarFunction::MergeFrom(const Expression_ScalarFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.ScalarFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::io::substrait::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
}

void Expression_ScalarFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.ScalarFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ScalarFunction::CopyFrom(const Expression_ScalarFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.ScalarFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ScalarFunction::IsInitialized() const {
  return true;
}

void Expression_ScalarFunction::InternalSwap(Expression_ScalarFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, function_reference_)
      + sizeof(Expression_ScalarFunction::function_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, output_type_)>(
          reinterpret_cast<char*>(&output_type_),
          reinterpret_cast<char*>(&other->output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ScalarFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[11]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Preceding::_Internal {
 public:
};

Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction.Bound.Preceding)
}
Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(const Expression_WindowFunction_Bound_Preceding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction.Bound.Preceding)
}

void Expression_WindowFunction_Bound_Preceding::SharedCtor() {
offset_ = PROTOBUF_LONGLONG(0);
}

Expression_WindowFunction_Bound_Preceding::~Expression_WindowFunction_Bound_Preceding() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction.Bound.Preceding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Preceding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Preceding::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Preceding* _this = reinterpret_cast< Expression_WindowFunction_Bound_Preceding* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Preceding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Preceding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_Preceding::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Preceding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Preceding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction.Bound.Preceding)
  return target;
}

size_t Expression_WindowFunction_Bound_Preceding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Preceding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Preceding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Preceding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction.Bound.Preceding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction.Bound.Preceding)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Preceding::MergeFrom(const Expression_WindowFunction_Bound_Preceding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_WindowFunction_Bound_Preceding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Preceding::CopyFrom(const Expression_WindowFunction_Bound_Preceding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Preceding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Preceding::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Preceding::InternalSwap(Expression_WindowFunction_Bound_Preceding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Preceding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[12]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Following::_Internal {
 public:
};

Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction.Bound.Following)
}
Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(const Expression_WindowFunction_Bound_Following& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction.Bound.Following)
}

void Expression_WindowFunction_Bound_Following::SharedCtor() {
offset_ = PROTOBUF_LONGLONG(0);
}

Expression_WindowFunction_Bound_Following::~Expression_WindowFunction_Bound_Following() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction.Bound.Following)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Following::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Following::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Following* _this = reinterpret_cast< Expression_WindowFunction_Bound_Following* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Following::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Following::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_Following::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction.Bound.Following)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Following::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Following::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction.Bound.Following)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction.Bound.Following)
  return target;
}

size_t Expression_WindowFunction_Bound_Following::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction.Bound.Following)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Following::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Following)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Following* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Following>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction.Bound.Following)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction.Bound.Following)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Following::MergeFrom(const Expression_WindowFunction_Bound_Following& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Following)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_WindowFunction_Bound_Following::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Following)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Following::CopyFrom(const Expression_WindowFunction_Bound_Following& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Following)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Following::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Following::InternalSwap(Expression_WindowFunction_Bound_Following* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Following::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[13]);
}

// ===================================================================

class Expression_WindowFunction_Bound_CurrentRow::_Internal {
 public:
};

Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
}
Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(const Expression_WindowFunction_Bound_CurrentRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
}

void Expression_WindowFunction_Bound_CurrentRow::SharedCtor() {
}

Expression_WindowFunction_Bound_CurrentRow::~Expression_WindowFunction_Bound_CurrentRow() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_CurrentRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_CurrentRow::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_CurrentRow* _this = reinterpret_cast< Expression_WindowFunction_Bound_CurrentRow* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_CurrentRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_CurrentRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_CurrentRow::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_CurrentRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_CurrentRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  return target;
}

size_t Expression_WindowFunction_Bound_CurrentRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_CurrentRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_CurrentRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_CurrentRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_CurrentRow::MergeFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_WindowFunction_Bound_CurrentRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_CurrentRow::CopyFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction.Bound.CurrentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_CurrentRow::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_CurrentRow::InternalSwap(Expression_WindowFunction_Bound_CurrentRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_CurrentRow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[14]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Unbounded::_Internal {
 public:
};

Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction.Bound.Unbounded)
}
Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(const Expression_WindowFunction_Bound_Unbounded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction.Bound.Unbounded)
}

void Expression_WindowFunction_Bound_Unbounded::SharedCtor() {
}

Expression_WindowFunction_Bound_Unbounded::~Expression_WindowFunction_Bound_Unbounded() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Unbounded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Unbounded::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Unbounded* _this = reinterpret_cast< Expression_WindowFunction_Bound_Unbounded* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Unbounded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Unbounded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_Unbounded::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Unbounded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Unbounded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  return target;
}

size_t Expression_WindowFunction_Bound_Unbounded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Unbounded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Unbounded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Unbounded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction.Bound.Unbounded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction.Bound.Unbounded)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Unbounded::MergeFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_WindowFunction_Bound_Unbounded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Unbounded::CopyFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction.Bound.Unbounded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Unbounded::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Unbounded::InternalSwap(Expression_WindowFunction_Bound_Unbounded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Unbounded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[15]);
}

// ===================================================================

class Expression_WindowFunction_Bound::_Internal {
 public:
  static const ::io::substrait::Expression_WindowFunction_Bound_Preceding& preceding(const Expression_WindowFunction_Bound* msg);
  static const ::io::substrait::Expression_WindowFunction_Bound_Following& following(const Expression_WindowFunction_Bound* msg);
  static const ::io::substrait::Expression_WindowFunction_Bound_CurrentRow& current_row(const Expression_WindowFunction_Bound* msg);
  static const ::io::substrait::Expression_WindowFunction_Bound_Unbounded& unbounded(const Expression_WindowFunction_Bound* msg);
};

const ::io::substrait::Expression_WindowFunction_Bound_Preceding&
Expression_WindowFunction_Bound::_Internal::preceding(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.preceding_;
}
const ::io::substrait::Expression_WindowFunction_Bound_Following&
Expression_WindowFunction_Bound::_Internal::following(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.following_;
}
const ::io::substrait::Expression_WindowFunction_Bound_CurrentRow&
Expression_WindowFunction_Bound::_Internal::current_row(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.current_row_;
}
const ::io::substrait::Expression_WindowFunction_Bound_Unbounded&
Expression_WindowFunction_Bound::_Internal::unbounded(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.unbounded_;
}
void Expression_WindowFunction_Bound::set_allocated_preceding(::io::substrait::Expression_WindowFunction_Bound_Preceding* preceding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (preceding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(preceding);
    if (message_arena != submessage_arena) {
      preceding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preceding, submessage_arena);
    }
    set_has_preceding();
    kind_.preceding_ = preceding;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.WindowFunction.Bound.preceding)
}
void Expression_WindowFunction_Bound::set_allocated_following(::io::substrait::Expression_WindowFunction_Bound_Following* following) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (following) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(following);
    if (message_arena != submessage_arena) {
      following = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, following, submessage_arena);
    }
    set_has_following();
    kind_.following_ = following;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.WindowFunction.Bound.following)
}
void Expression_WindowFunction_Bound::set_allocated_current_row(::io::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (current_row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_row);
    if (message_arena != submessage_arena) {
      current_row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_row, submessage_arena);
    }
    set_has_current_row();
    kind_.current_row_ = current_row;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.WindowFunction.Bound.current_row)
}
void Expression_WindowFunction_Bound::set_allocated_unbounded(::io::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (unbounded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unbounded);
    if (message_arena != submessage_arena) {
      unbounded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbounded, submessage_arena);
    }
    set_has_unbounded();
    kind_.unbounded_ = unbounded;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.WindowFunction.Bound.unbounded)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction.Bound)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(const Expression_WindowFunction_Bound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kPreceding: {
      _internal_mutable_preceding()->::io::substrait::Expression_WindowFunction_Bound_Preceding::MergeFrom(from._internal_preceding());
      break;
    }
    case kFollowing: {
      _internal_mutable_following()->::io::substrait::Expression_WindowFunction_Bound_Following::MergeFrom(from._internal_following());
      break;
    }
    case kCurrentRow: {
      _internal_mutable_current_row()->::io::substrait::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _internal_mutable_unbounded()->::io::substrait::Expression_WindowFunction_Bound_Unbounded::MergeFrom(from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction.Bound)
}

void Expression_WindowFunction_Bound::SharedCtor() {
clear_has_kind();
}

Expression_WindowFunction_Bound::~Expression_WindowFunction_Bound() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction.Bound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_WindowFunction_Bound::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound* _this = reinterpret_cast< Expression_WindowFunction_Bound* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction_Bound::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.WindowFunction.Bound)
  switch (kind_case()) {
    case kPreceding: {
      if (GetArena() == nullptr) {
        delete kind_.preceding_;
      }
      break;
    }
    case kFollowing: {
      if (GetArena() == nullptr) {
        delete kind_.following_;
      }
      break;
    }
    case kCurrentRow: {
      if (GetArena() == nullptr) {
        delete kind_.current_row_;
      }
      break;
    }
    case kUnbounded: {
      if (GetArena() == nullptr) {
        delete kind_.unbounded_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Expression_WindowFunction_Bound::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preceding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction.Bound.Following following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_following(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_row(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbounded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
  if (_internal_has_preceding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preceding(this), target, stream);
  }

  // .io.substrait.Expression.WindowFunction.Bound.Following following = 2;
  if (_internal_has_following()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::following(this), target, stream);
  }

  // .io.substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
  if (_internal_has_current_row()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current_row(this), target, stream);
  }

  // .io.substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
  if (_internal_has_unbounded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::unbounded(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction.Bound)
  return target;
}

size_t Expression_WindowFunction_Bound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction.Bound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .io.substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
    case kPreceding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.preceding_);
      break;
    }
    // .io.substrait.Expression.WindowFunction.Bound.Following following = 2;
    case kFollowing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.following_);
      break;
    }
    // .io.substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
    case kCurrentRow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.current_row_);
      break;
    }
    // .io.substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
    case kUnbounded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.unbounded_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction.Bound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction.Bound)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound::MergeFrom(const Expression_WindowFunction_Bound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kPreceding: {
      _internal_mutable_preceding()->::io::substrait::Expression_WindowFunction_Bound_Preceding::MergeFrom(from._internal_preceding());
      break;
    }
    case kFollowing: {
      _internal_mutable_following()->::io::substrait::Expression_WindowFunction_Bound_Following::MergeFrom(from._internal_following());
      break;
    }
    case kCurrentRow: {
      _internal_mutable_current_row()->::io::substrait::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _internal_mutable_unbounded()->::io::substrait::Expression_WindowFunction_Bound_Unbounded::MergeFrom(from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_WindowFunction_Bound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound::CopyFrom(const Expression_WindowFunction_Bound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound::InternalSwap(Expression_WindowFunction_Bound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[16]);
}

// ===================================================================

class Expression_WindowFunction::_Internal {
 public:
  static const ::io::substrait::Expression_WindowFunction_Bound& upper_bound(const Expression_WindowFunction* msg);
  static const ::io::substrait::Expression_WindowFunction_Bound& lower_bound(const Expression_WindowFunction* msg);
  static const ::io::substrait::Type& output_type(const Expression_WindowFunction* msg);
};

const ::io::substrait::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::upper_bound(const Expression_WindowFunction* msg) {
  return *msg->upper_bound_;
}
const ::io::substrait::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::lower_bound(const Expression_WindowFunction* msg) {
  return *msg->lower_bound_;
}
const ::io::substrait::Type&
Expression_WindowFunction::_Internal::output_type(const Expression_WindowFunction* msg) {
  return *msg->output_type_;
}
void Expression_WindowFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
Expression_WindowFunction::Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partitions_(arena),
  sorts_(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.WindowFunction)
}
Expression_WindowFunction::Expression_WindowFunction(const Expression_WindowFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partitions_(from.partitions_),
      sorts_(from.sorts_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upper_bound()) {
    upper_bound_ = new ::io::substrait::Expression_WindowFunction_Bound(*from.upper_bound_);
  } else {
    upper_bound_ = nullptr;
  }
  if (from._internal_has_lower_bound()) {
    lower_bound_ = new ::io::substrait::Expression_WindowFunction_Bound(*from.lower_bound_);
  } else {
    lower_bound_ = nullptr;
  }
  if (from._internal_has_output_type()) {
    output_type_ = new ::io::substrait::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  ::memcpy(&function_reference_, &from.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&function_reference_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.WindowFunction)
}

void Expression_WindowFunction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upper_bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&upper_bound_)) + sizeof(phase_));
}

Expression_WindowFunction::~Expression_WindowFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.WindowFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upper_bound_;
  if (this != internal_default_instance()) delete lower_bound_;
  if (this != internal_default_instance()) delete output_type_;
}

void Expression_WindowFunction::ArenaDtor(void* object) {
  Expression_WindowFunction* _this = reinterpret_cast< Expression_WindowFunction* >(object);
  (void)_this;
}
void Expression_WindowFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_WindowFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.WindowFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  sorts_.Clear();
  args_.Clear();
  if (GetArena() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
  if (GetArena() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  ::memset(&function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&function_reference_)) + sizeof(phase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression partitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction.Bound upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction.Bound lower_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.AggregationPhase phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::io::substrait::AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type output_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression args = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.WindowFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .io.substrait.Expression partitions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partitions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_partitions(i), target, stream);
  }

  // repeated .io.substrait.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .io.substrait.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::upper_bound(this), target, stream);
  }

  // .io.substrait.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lower_bound(this), target, stream);
  }

  // .io.substrait.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_phase(), target);
  }

  // .io.substrait.Type output_type = 7;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::output_type(this), target, stream);
  }

  // repeated .io.substrait.Expression args = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.WindowFunction)
  return target;
}

size_t Expression_WindowFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.WindowFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression partitions = 2;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.substrait.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.substrait.Expression args = 8;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_bound_);
  }

  // .io.substrait.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_bound_);
  }

  // .io.substrait.Type output_type = 7;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  // .io.substrait.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.WindowFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.WindowFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.WindowFunction)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction::MergeFrom(const Expression_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.WindowFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  sorts_.MergeFrom(from.sorts_);
  args_.MergeFrom(from.args_);
  if (from.has_upper_bound()) {
    _internal_mutable_upper_bound()->::io::substrait::Expression_WindowFunction_Bound::MergeFrom(from._internal_upper_bound());
  }
  if (from.has_lower_bound()) {
    _internal_mutable_lower_bound()->::io::substrait::Expression_WindowFunction_Bound::MergeFrom(from._internal_lower_bound());
  }
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::io::substrait::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
}

void Expression_WindowFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction::CopyFrom(const Expression_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction::IsInitialized() const {
  return true;
}

void Expression_WindowFunction::InternalSwap(Expression_WindowFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partitions_.InternalSwap(&other->partitions_);
  sorts_.InternalSwap(&other->sorts_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, phase_)
      + sizeof(Expression_WindowFunction::phase_)
      - PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, upper_bound_)>(
          reinterpret_cast<char*>(&upper_bound_),
          reinterpret_cast<char*>(&other->upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[17]);
}

// ===================================================================

class Expression_IfThen_IfClause::_Internal {
 public:
  static const ::io::substrait::Expression& if_(const Expression_IfThen_IfClause* msg);
  static const ::io::substrait::Expression& then(const Expression_IfThen_IfClause* msg);
};

const ::io::substrait::Expression&
Expression_IfThen_IfClause::_Internal::if_(const Expression_IfThen_IfClause* msg) {
  return *msg->if__;
}
const ::io::substrait::Expression&
Expression_IfThen_IfClause::_Internal::then(const Expression_IfThen_IfClause* msg) {
  return *msg->then_;
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.IfThen.IfClause)
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(const Expression_IfThen_IfClause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    if__ = new ::io::substrait::Expression(*from.if__);
  } else {
    if__ = nullptr;
  }
  if (from._internal_has_then()) {
    then_ = new ::io::substrait::Expression(*from.then_);
  } else {
    then_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.IfThen.IfClause)
}

void Expression_IfThen_IfClause::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&if__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&then_) -
    reinterpret_cast<char*>(&if__)) + sizeof(then_));
}

Expression_IfThen_IfClause::~Expression_IfThen_IfClause() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.IfThen.IfClause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_IfThen_IfClause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete if__;
  if (this != internal_default_instance()) delete then_;
}

void Expression_IfThen_IfClause::ArenaDtor(void* object) {
  Expression_IfThen_IfClause* _this = reinterpret_cast< Expression_IfThen_IfClause* >(object);
  (void)_this;
}
void Expression_IfThen_IfClause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_IfThen_IfClause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_IfThen_IfClause::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.IfThen.IfClause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen_IfClause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_IfThen_IfClause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.IfThen.IfClause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression if = 1;
  if (this->has_if_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::if_(this), target, stream);
  }

  // .io.substrait.Expression then = 2;
  if (this->has_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.IfThen.IfClause)
  return target;
}

size_t Expression_IfThen_IfClause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.IfThen.IfClause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression if = 1;
  if (this->has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *if__);
  }

  // .io.substrait.Expression then = 2;
  if (this->has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_IfThen_IfClause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.IfThen.IfClause)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_IfThen_IfClause* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_IfThen_IfClause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.IfThen.IfClause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.IfThen.IfClause)
    MergeFrom(*source);
  }
}

void Expression_IfThen_IfClause::MergeFrom(const Expression_IfThen_IfClause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.IfThen.IfClause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_()) {
    _internal_mutable_if_()->::io::substrait::Expression::MergeFrom(from._internal_if_());
  }
  if (from.has_then()) {
    _internal_mutable_then()->::io::substrait::Expression::MergeFrom(from._internal_then());
  }
}

void Expression_IfThen_IfClause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.IfThen.IfClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_IfThen_IfClause::CopyFrom(const Expression_IfThen_IfClause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.IfThen.IfClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen_IfClause::IsInitialized() const {
  return true;
}

void Expression_IfThen_IfClause::InternalSwap(Expression_IfThen_IfClause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, then_)
      + sizeof(Expression_IfThen_IfClause::then_)
      - PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, if__)>(
          reinterpret_cast<char*>(&if__),
          reinterpret_cast<char*>(&other->if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen_IfClause::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[18]);
}

// ===================================================================

class Expression_IfThen::_Internal {
 public:
  static const ::io::substrait::Expression& else_(const Expression_IfThen* msg);
};

const ::io::substrait::Expression&
Expression_IfThen::_Internal::else_(const Expression_IfThen* msg) {
  return *msg->else__;
}
Expression_IfThen::Expression_IfThen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ifs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.IfThen)
}
Expression_IfThen::Expression_IfThen(const Expression_IfThen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ifs_(from.ifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    else__ = new ::io::substrait::Expression(*from.else__);
  } else {
    else__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.IfThen)
}

void Expression_IfThen::SharedCtor() {
else__ = nullptr;
}

Expression_IfThen::~Expression_IfThen() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.IfThen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_IfThen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete else__;
}

void Expression_IfThen::ArenaDtor(void* object) {
  Expression_IfThen* _this = reinterpret_cast< Expression_IfThen* >(object);
  (void)_this;
}
void Expression_IfThen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_IfThen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_IfThen::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.IfThen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ifs_.Clear();
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.IfThen.IfClause ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_IfThen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.IfThen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.IfThen.IfClause ifs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ifs(i), target, stream);
  }

  // .io.substrait.Expression else = 2;
  if (this->has_else_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::else_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.IfThen)
  return target;
}

size_t Expression_IfThen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.IfThen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.IfThen.IfClause ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Expression else = 2;
  if (this->has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_IfThen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.IfThen)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_IfThen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_IfThen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.IfThen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.IfThen)
    MergeFrom(*source);
  }
}

void Expression_IfThen::MergeFrom(const Expression_IfThen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.IfThen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ifs_.MergeFrom(from.ifs_);
  if (from.has_else_()) {
    _internal_mutable_else_()->::io::substrait::Expression::MergeFrom(from._internal_else_());
  }
}

void Expression_IfThen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.IfThen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_IfThen::CopyFrom(const Expression_IfThen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.IfThen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen::IsInitialized() const {
  return true;
}

void Expression_IfThen::InternalSwap(Expression_IfThen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ifs_.InternalSwap(&other->ifs_);
  swap(else__, other->else__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[19]);
}

// ===================================================================

class Expression_Cast::_Internal {
 public:
  static const ::io::substrait::Type& type(const Expression_Cast* msg);
  static const ::io::substrait::Expression& input(const Expression_Cast* msg);
};

const ::io::substrait::Type&
Expression_Cast::_Internal::type(const Expression_Cast* msg) {
  return *msg->type_;
}
const ::io::substrait::Expression&
Expression_Cast::_Internal::input(const Expression_Cast* msg) {
  return *msg->input_;
}
void Expression_Cast::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
Expression_Cast::Expression_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.Cast)
}
Expression_Cast::Expression_Cast(const Expression_Cast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::io::substrait::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::io::substrait::Expression(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.Cast)
}

void Expression_Cast::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&type_)) + sizeof(input_));
}

Expression_Cast::~Expression_Cast() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.Cast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Cast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete input_;
}

void Expression_Cast::ArenaDtor(void* object) {
  Expression_Cast* _this = reinterpret_cast< Expression_Cast* >(object);
  (void)_this;
}
void Expression_Cast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Cast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_Cast::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Cast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Cast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Type type = 1;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // .io.substrait.Expression input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.Cast)
  return target;
}

size_t Expression_Cast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.Cast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .io.substrait.Expression input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Cast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Cast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Cast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.Cast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.Cast)
    MergeFrom(*source);
  }
}

void Expression_Cast::MergeFrom(const Expression_Cast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::io::substrait::Type::MergeFrom(from._internal_type());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::io::substrait::Expression::MergeFrom(from._internal_input());
  }
}

void Expression_Cast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Cast::CopyFrom(const Expression_Cast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Cast::IsInitialized() const {
  return true;
}

void Expression_Cast::InternalSwap(Expression_Cast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Cast, input_)
      + sizeof(Expression_Cast::input_)
      - PROTOBUF_FIELD_OFFSET(Expression_Cast, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Cast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[20]);
}

// ===================================================================

class Expression_SwitchExpression_IfValue::_Internal {
 public:
  static const ::io::substrait::Expression_Literal& if_(const Expression_SwitchExpression_IfValue* msg);
  static const ::io::substrait::Expression& then(const Expression_SwitchExpression_IfValue* msg);
};

const ::io::substrait::Expression_Literal&
Expression_SwitchExpression_IfValue::_Internal::if_(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->if__;
}
const ::io::substrait::Expression&
Expression_SwitchExpression_IfValue::_Internal::then(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->then_;
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.SwitchExpression.IfValue)
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(const Expression_SwitchExpression_IfValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    if__ = new ::io::substrait::Expression_Literal(*from.if__);
  } else {
    if__ = nullptr;
  }
  if (from._internal_has_then()) {
    then_ = new ::io::substrait::Expression(*from.then_);
  } else {
    then_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.SwitchExpression.IfValue)
}

void Expression_SwitchExpression_IfValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&if__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&then_) -
    reinterpret_cast<char*>(&if__)) + sizeof(then_));
}

Expression_SwitchExpression_IfValue::~Expression_SwitchExpression_IfValue() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.SwitchExpression.IfValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SwitchExpression_IfValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete if__;
  if (this != internal_default_instance()) delete then_;
}

void Expression_SwitchExpression_IfValue::ArenaDtor(void* object) {
  Expression_SwitchExpression_IfValue* _this = reinterpret_cast< Expression_SwitchExpression_IfValue* >(object);
  (void)_this;
}
void Expression_SwitchExpression_IfValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SwitchExpression_IfValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_SwitchExpression_IfValue::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.SwitchExpression.IfValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression_IfValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.Literal if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SwitchExpression_IfValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.SwitchExpression.IfValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal if = 1;
  if (this->has_if_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::if_(this), target, stream);
  }

  // .io.substrait.Expression then = 2;
  if (this->has_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.SwitchExpression.IfValue)
  return target;
}

size_t Expression_SwitchExpression_IfValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.SwitchExpression.IfValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal if = 1;
  if (this->has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *if__);
  }

  // .io.substrait.Expression then = 2;
  if (this->has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SwitchExpression_IfValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.SwitchExpression.IfValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SwitchExpression_IfValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SwitchExpression_IfValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.SwitchExpression.IfValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.SwitchExpression.IfValue)
    MergeFrom(*source);
  }
}

void Expression_SwitchExpression_IfValue::MergeFrom(const Expression_SwitchExpression_IfValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.SwitchExpression.IfValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_()) {
    _internal_mutable_if_()->::io::substrait::Expression_Literal::MergeFrom(from._internal_if_());
  }
  if (from.has_then()) {
    _internal_mutable_then()->::io::substrait::Expression::MergeFrom(from._internal_then());
  }
}

void Expression_SwitchExpression_IfValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.SwitchExpression.IfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SwitchExpression_IfValue::CopyFrom(const Expression_SwitchExpression_IfValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.SwitchExpression.IfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression_IfValue::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression_IfValue::InternalSwap(Expression_SwitchExpression_IfValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, then_)
      + sizeof(Expression_SwitchExpression_IfValue::then_)
      - PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, if__)>(
          reinterpret_cast<char*>(&if__),
          reinterpret_cast<char*>(&other->if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression_IfValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[21]);
}

// ===================================================================

class Expression_SwitchExpression::_Internal {
 public:
  static const ::io::substrait::Expression& else_(const Expression_SwitchExpression* msg);
};

const ::io::substrait::Expression&
Expression_SwitchExpression::_Internal::else_(const Expression_SwitchExpression* msg) {
  return *msg->else__;
}
Expression_SwitchExpression::Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ifs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.SwitchExpression)
}
Expression_SwitchExpression::Expression_SwitchExpression(const Expression_SwitchExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ifs_(from.ifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    else__ = new ::io::substrait::Expression(*from.else__);
  } else {
    else__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.SwitchExpression)
}

void Expression_SwitchExpression::SharedCtor() {
else__ = nullptr;
}

Expression_SwitchExpression::~Expression_SwitchExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.SwitchExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SwitchExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete else__;
}

void Expression_SwitchExpression::ArenaDtor(void* object) {
  Expression_SwitchExpression* _this = reinterpret_cast< Expression_SwitchExpression* >(object);
  (void)_this;
}
void Expression_SwitchExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SwitchExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_SwitchExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.SwitchExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ifs_.Clear();
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.SwitchExpression.IfValue ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SwitchExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.SwitchExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.SwitchExpression.IfValue ifs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ifs(i), target, stream);
  }

  // .io.substrait.Expression else = 2;
  if (this->has_else_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::else_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.SwitchExpression)
  return target;
}

size_t Expression_SwitchExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.SwitchExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.SwitchExpression.IfValue ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Expression else = 2;
  if (this->has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SwitchExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.SwitchExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SwitchExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SwitchExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.SwitchExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.SwitchExpression)
    MergeFrom(*source);
  }
}

void Expression_SwitchExpression::MergeFrom(const Expression_SwitchExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.SwitchExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ifs_.MergeFrom(from.ifs_);
  if (from.has_else_()) {
    _internal_mutable_else_()->::io::substrait::Expression::MergeFrom(from._internal_else_());
  }
}

void Expression_SwitchExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.SwitchExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SwitchExpression::CopyFrom(const Expression_SwitchExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.SwitchExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression::InternalSwap(Expression_SwitchExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ifs_.InternalSwap(&other->ifs_);
  swap(else__, other->else__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[22]);
}

// ===================================================================

class Expression_SingularOrList::_Internal {
 public:
  static const ::io::substrait::Expression& value(const Expression_SingularOrList* msg);
};

const ::io::substrait::Expression&
Expression_SingularOrList::_Internal::value(const Expression_SingularOrList* msg) {
  return *msg->value_;
}
Expression_SingularOrList::Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.SingularOrList)
}
Expression_SingularOrList::Expression_SingularOrList(const Expression_SingularOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::io::substrait::Expression(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.SingularOrList)
}

void Expression_SingularOrList::SharedCtor() {
value_ = nullptr;
}

Expression_SingularOrList::~Expression_SingularOrList() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.SingularOrList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SingularOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Expression_SingularOrList::ArenaDtor(void* object) {
  Expression_SingularOrList* _this = reinterpret_cast< Expression_SingularOrList* >(object);
  (void)_this;
}
void Expression_SingularOrList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SingularOrList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_SingularOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.SingularOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SingularOrList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SingularOrList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.SingularOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // repeated .io.substrait.Expression options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.SingularOrList)
  return target;
}

size_t Expression_SingularOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.SingularOrList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Expression value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SingularOrList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.SingularOrList)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SingularOrList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SingularOrList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.SingularOrList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.SingularOrList)
    MergeFrom(*source);
  }
}

void Expression_SingularOrList::MergeFrom(const Expression_SingularOrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.SingularOrList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.has_value()) {
    _internal_mutable_value()->::io::substrait::Expression::MergeFrom(from._internal_value());
  }
}

void Expression_SingularOrList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.SingularOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SingularOrList::CopyFrom(const Expression_SingularOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.SingularOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SingularOrList::IsInitialized() const {
  return true;
}

void Expression_SingularOrList::InternalSwap(Expression_SingularOrList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SingularOrList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[23]);
}

// ===================================================================

class Expression_MultiOrList_Record::_Internal {
 public:
};

Expression_MultiOrList_Record::Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MultiOrList.Record)
}
Expression_MultiOrList_Record::Expression_MultiOrList_Record(const Expression_MultiOrList_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MultiOrList.Record)
}

void Expression_MultiOrList_Record::SharedCtor() {
}

Expression_MultiOrList_Record::~Expression_MultiOrList_Record() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MultiOrList.Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MultiOrList_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MultiOrList_Record::ArenaDtor(void* object) {
  Expression_MultiOrList_Record* _this = reinterpret_cast< Expression_MultiOrList_Record* >(object);
  (void)_this;
}
void Expression_MultiOrList_Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MultiOrList_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MultiOrList_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MultiOrList.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList_Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MultiOrList_Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MultiOrList.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MultiOrList.Record)
  return target;
}

size_t Expression_MultiOrList_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MultiOrList.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MultiOrList_Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MultiOrList.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MultiOrList_Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MultiOrList_Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MultiOrList.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MultiOrList.Record)
    MergeFrom(*source);
  }
}

void Expression_MultiOrList_Record::MergeFrom(const Expression_MultiOrList_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MultiOrList.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void Expression_MultiOrList_Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MultiOrList.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MultiOrList_Record::CopyFrom(const Expression_MultiOrList_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MultiOrList.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList_Record::IsInitialized() const {
  return true;
}

void Expression_MultiOrList_Record::InternalSwap(Expression_MultiOrList_Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList_Record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[24]);
}

// ===================================================================

class Expression_MultiOrList::_Internal {
 public:
};

Expression_MultiOrList::Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MultiOrList)
}
Expression_MultiOrList::Expression_MultiOrList(const Expression_MultiOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MultiOrList)
}

void Expression_MultiOrList::SharedCtor() {
}

Expression_MultiOrList::~Expression_MultiOrList() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MultiOrList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MultiOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MultiOrList::ArenaDtor(void* object) {
  Expression_MultiOrList* _this = reinterpret_cast< Expression_MultiOrList* >(object);
  (void)_this;
}
void Expression_MultiOrList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MultiOrList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MultiOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MultiOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression.MultiOrList.Record options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MultiOrList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MultiOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  // repeated .io.substrait.Expression.MultiOrList.Record options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MultiOrList)
  return target;
}

size_t Expression_MultiOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MultiOrList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.substrait.Expression.MultiOrList.Record options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MultiOrList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MultiOrList)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MultiOrList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MultiOrList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MultiOrList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MultiOrList)
    MergeFrom(*source);
  }
}

void Expression_MultiOrList::MergeFrom(const Expression_MultiOrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MultiOrList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  options_.MergeFrom(from.options_);
}

void Expression_MultiOrList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MultiOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MultiOrList::CopyFrom(const Expression_MultiOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MultiOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList::IsInitialized() const {
  return true;
}

void Expression_MultiOrList::InternalSwap(Expression_MultiOrList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  options_.InternalSwap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[25]);
}

// ===================================================================

class Expression_EmbeddedFunction_PythonPickleFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prerequisite_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
}
Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(const Expression_EmbeddedFunction_PythonPickleFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prerequisite_(from.prerequisite_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function().empty()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
}

void Expression_EmbeddedFunction_PythonPickleFunction::SharedCtor() {
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_EmbeddedFunction_PythonPickleFunction::~Expression_EmbeddedFunction_PythonPickleFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction_PythonPickleFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_EmbeddedFunction_PythonPickleFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction_PythonPickleFunction* _this = reinterpret_cast< Expression_EmbeddedFunction_PythonPickleFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction_PythonPickleFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction_PythonPickleFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_EmbeddedFunction_PythonPickleFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prerequisite_.Clear();
  function_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_PythonPickleFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction_PythonPickleFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes function = 1;
  if (this->function().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_function(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  return target;
}

size_t Expression_EmbeddedFunction_PythonPickleFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prerequisite_.size());
  for (int i = 0, n = prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prerequisite_.Get(i));
  }

  // bytes function = 1;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction_PythonPickleFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction_PythonPickleFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prerequisite_.MergeFrom(from.prerequisite_);
  if (from.function().size() > 0) {
    _internal_set_function(from._internal_function());
  }
}

void Expression_EmbeddedFunction_PythonPickleFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction_PythonPickleFunction::CopyFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_PythonPickleFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_PythonPickleFunction::InternalSwap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prerequisite_.InternalSwap(&other->prerequisite_);
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_PythonPickleFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[26]);
}

// ===================================================================

class Expression_EmbeddedFunction_WebAssemblyFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prerequisite_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
}
Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(const Expression_EmbeddedFunction_WebAssemblyFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prerequisite_(from.prerequisite_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
}

void Expression_EmbeddedFunction_WebAssemblyFunction::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_EmbeddedFunction_WebAssemblyFunction::~Expression_EmbeddedFunction_WebAssemblyFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction_WebAssemblyFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_EmbeddedFunction_WebAssemblyFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction_WebAssemblyFunction* _this = reinterpret_cast< Expression_EmbeddedFunction_WebAssemblyFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction_WebAssemblyFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction_WebAssemblyFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_EmbeddedFunction_WebAssemblyFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prerequisite_.Clear();
  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  return target;
}

size_t Expression_EmbeddedFunction_WebAssemblyFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prerequisite_.size());
  for (int i = 0, n = prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prerequisite_.Get(i));
  }

  // bytes script = 1;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction_WebAssemblyFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction_WebAssemblyFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prerequisite_.MergeFrom(from.prerequisite_);
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void Expression_EmbeddedFunction_WebAssemblyFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction_WebAssemblyFunction::CopyFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_WebAssemblyFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_WebAssemblyFunction::InternalSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prerequisite_.InternalSwap(&other->prerequisite_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_WebAssemblyFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[27]);
}

// ===================================================================

class Expression_EmbeddedFunction::_Internal {
 public:
  static const ::io::substrait::Type& output_type(const Expression_EmbeddedFunction* msg);
  static const ::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction& python_pickle_function(const Expression_EmbeddedFunction* msg);
  static const ::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& web_assembly_function(const Expression_EmbeddedFunction* msg);
};

const ::io::substrait::Type&
Expression_EmbeddedFunction::_Internal::output_type(const Expression_EmbeddedFunction* msg) {
  return *msg->output_type_;
}
const ::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction&
Expression_EmbeddedFunction::_Internal::python_pickle_function(const Expression_EmbeddedFunction* msg) {
  return *msg->kind_.python_pickle_function_;
}
const ::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction&
Expression_EmbeddedFunction::_Internal::web_assembly_function(const Expression_EmbeddedFunction* msg) {
  return *msg->kind_.web_assembly_function_;
}
void Expression_EmbeddedFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
void Expression_EmbeddedFunction::set_allocated_python_pickle_function(::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (python_pickle_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(python_pickle_function);
    if (message_arena != submessage_arena) {
      python_pickle_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_pickle_function, submessage_arena);
    }
    set_has_python_pickle_function();
    kind_.python_pickle_function_ = python_pickle_function;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.EmbeddedFunction.python_pickle_function)
}
void Expression_EmbeddedFunction::set_allocated_web_assembly_function(::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (web_assembly_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(web_assembly_function);
    if (message_arena != submessage_arena) {
      web_assembly_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_assembly_function, submessage_arena);
    }
    set_has_web_assembly_function();
    kind_.web_assembly_function_ = web_assembly_function;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.EmbeddedFunction.web_assembly_function)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.EmbeddedFunction)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(const Expression_EmbeddedFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::io::substrait::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _internal_mutable_python_pickle_function()->::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _internal_mutable_web_assembly_function()->::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.EmbeddedFunction)
}

void Expression_EmbeddedFunction::SharedCtor() {
output_type_ = nullptr;
clear_has_kind();
}

Expression_EmbeddedFunction::~Expression_EmbeddedFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.EmbeddedFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_EmbeddedFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction* _this = reinterpret_cast< Expression_EmbeddedFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_EmbeddedFunction::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.EmbeddedFunction)
  switch (kind_case()) {
    case kPythonPickleFunction: {
      if (GetArena() == nullptr) {
        delete kind_.python_pickle_function_;
      }
      break;
    }
    case kWebAssemblyFunction: {
      if (GetArena() == nullptr) {
        delete kind_.web_assembly_function_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Expression_EmbeddedFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.EmbeddedFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression arguments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type output_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_pickle_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_assembly_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.EmbeddedFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression arguments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arguments(i), target, stream);
  }

  // .io.substrait.Type output_type = 2;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_type(this), target, stream);
  }

  // .io.substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
  if (_internal_has_python_pickle_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::python_pickle_function(this), target, stream);
  }

  // .io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
  if (_internal_has_web_assembly_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::web_assembly_function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.EmbeddedFunction)
  return target;
}

size_t Expression_EmbeddedFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.EmbeddedFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression arguments = 1;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type output_type = 2;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  switch (kind_case()) {
    // .io.substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
    case kPythonPickleFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.python_pickle_function_);
      break;
    }
    // .io.substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
    case kWebAssemblyFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.web_assembly_function_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.EmbeddedFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.EmbeddedFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.EmbeddedFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction::MergeFrom(const Expression_EmbeddedFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.EmbeddedFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::io::substrait::Type::MergeFrom(from._internal_output_type());
  }
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _internal_mutable_python_pickle_function()->::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _internal_mutable_web_assembly_function()->::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_EmbeddedFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.EmbeddedFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction::CopyFrom(const Expression_EmbeddedFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.EmbeddedFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction::InternalSwap(Expression_EmbeddedFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  swap(output_type_, other->output_type_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[28]);
}

// ===================================================================

class Expression_ReferenceSegment_MapKey::_Internal {
 public:
  static const ::io::substrait::Expression_Literal& map_key(const Expression_ReferenceSegment_MapKey* msg);
  static const ::io::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_MapKey* msg);
};

const ::io::substrait::Expression_Literal&
Expression_ReferenceSegment_MapKey::_Internal::map_key(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->map_key_;
}
const ::io::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_MapKey::_Internal::child(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.ReferenceSegment.MapKey)
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(const Expression_ReferenceSegment_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_key()) {
    map_key_ = new ::io::substrait::Expression_Literal(*from.map_key_);
  } else {
    map_key_ = nullptr;
  }
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.ReferenceSegment.MapKey)
}

void Expression_ReferenceSegment_MapKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&child_) -
    reinterpret_cast<char*>(&map_key_)) + sizeof(child_));
}

Expression_ReferenceSegment_MapKey::~Expression_ReferenceSegment_MapKey() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.ReferenceSegment.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete map_key_;
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_MapKey::ArenaDtor(void* object) {
  Expression_ReferenceSegment_MapKey* _this = reinterpret_cast< Expression_ReferenceSegment_MapKey* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_ReferenceSegment_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && map_key_ != nullptr) {
    delete map_key_;
  }
  map_key_ = nullptr;
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.Literal map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal map_key = 1;
  if (this->has_map_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_key(this), target, stream);
  }

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.ReferenceSegment.MapKey)
  return target;
}

size_t Expression_ReferenceSegment_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.ReferenceSegment.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal map_key = 1;
  if (this->has_map_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key_);
  }

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.ReferenceSegment.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.ReferenceSegment.MapKey)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_MapKey::MergeFrom(const Expression_ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_key()) {
    _internal_mutable_map_key()->::io::substrait::Expression_Literal::MergeFrom(from._internal_map_key());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
}

void Expression_ReferenceSegment_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_MapKey::CopyFrom(const Expression_ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_MapKey::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_MapKey::InternalSwap(Expression_ReferenceSegment_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, child_)
      + sizeof(Expression_ReferenceSegment_MapKey::child_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, map_key_)>(
          reinterpret_cast<char*>(&map_key_),
          reinterpret_cast<char*>(&other->map_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_MapKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[29]);
}

// ===================================================================

class Expression_ReferenceSegment_StructField::_Internal {
 public:
  static const ::io::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_StructField* msg);
};

const ::io::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_StructField::_Internal::child(const Expression_ReferenceSegment_StructField* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.ReferenceSegment.StructField)
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(const Expression_ReferenceSegment_StructField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.ReferenceSegment.StructField)
}

void Expression_ReferenceSegment_StructField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

Expression_ReferenceSegment_StructField::~Expression_ReferenceSegment_StructField() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.ReferenceSegment.StructField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_StructField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_StructField::ArenaDtor(void* object) {
  Expression_ReferenceSegment_StructField* _this = reinterpret_cast< Expression_ReferenceSegment_StructField* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_StructField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_StructField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_ReferenceSegment_StructField::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_StructField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_StructField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.ReferenceSegment.StructField)
  return target;
}

size_t Expression_ReferenceSegment_StructField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.ReferenceSegment.StructField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_StructField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_StructField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_StructField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.ReferenceSegment.StructField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.ReferenceSegment.StructField)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_StructField::MergeFrom(const Expression_ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_ReferenceSegment_StructField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_StructField::CopyFrom(const Expression_ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_StructField::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_StructField::InternalSwap(Expression_ReferenceSegment_StructField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, field_)
      + sizeof(Expression_ReferenceSegment_StructField::field_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_StructField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[30]);
}

// ===================================================================

class Expression_ReferenceSegment_ListElement::_Internal {
 public:
  static const ::io::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_ListElement* msg);
};

const ::io::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_ListElement::_Internal::child(const Expression_ReferenceSegment_ListElement* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.ReferenceSegment.ListElement)
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(const Expression_ReferenceSegment_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.ReferenceSegment.ListElement)
}

void Expression_ReferenceSegment_ListElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&child_)) + sizeof(offset_));
}

Expression_ReferenceSegment_ListElement::~Expression_ReferenceSegment_ListElement() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.ReferenceSegment.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_ListElement::ArenaDtor(void* object) {
  Expression_ReferenceSegment_ListElement* _this = reinterpret_cast< Expression_ReferenceSegment_ListElement* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_ReferenceSegment_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.ReferenceSegment.ListElement)
  return target;
}

size_t Expression_ReferenceSegment_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.ReferenceSegment.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.ReferenceSegment.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.ReferenceSegment.ListElement)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_ListElement::MergeFrom(const Expression_ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_ReferenceSegment_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_ListElement::CopyFrom(const Expression_ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_ListElement::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_ListElement::InternalSwap(Expression_ReferenceSegment_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, offset_)
      + sizeof(Expression_ReferenceSegment_ListElement::offset_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_ListElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[31]);
}

// ===================================================================

class Expression_ReferenceSegment::_Internal {
 public:
  static const ::io::substrait::Expression_ReferenceSegment_MapKey& map_key(const Expression_ReferenceSegment* msg);
  static const ::io::substrait::Expression_ReferenceSegment_StructField& struct_field(const Expression_ReferenceSegment* msg);
  static const ::io::substrait::Expression_ReferenceSegment_ListElement& list_element(const Expression_ReferenceSegment* msg);
};

const ::io::substrait::Expression_ReferenceSegment_MapKey&
Expression_ReferenceSegment::_Internal::map_key(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.map_key_;
}
const ::io::substrait::Expression_ReferenceSegment_StructField&
Expression_ReferenceSegment::_Internal::struct_field(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.struct_field_;
}
const ::io::substrait::Expression_ReferenceSegment_ListElement&
Expression_ReferenceSegment::_Internal::list_element(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.list_element_;
}
void Expression_ReferenceSegment::set_allocated_map_key(::io::substrait::Expression_ReferenceSegment_MapKey* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    set_has_map_key();
    reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.ReferenceSegment.map_key)
}
void Expression_ReferenceSegment::set_allocated_struct_field(::io::substrait::Expression_ReferenceSegment_StructField* struct_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (struct_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_field);
    if (message_arena != submessage_arena) {
      struct_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_field, submessage_arena);
    }
    set_has_struct_field();
    reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.ReferenceSegment.struct_field)
}
void Expression_ReferenceSegment::set_allocated_list_element(::io::substrait::Expression_ReferenceSegment_ListElement* list_element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (list_element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_element);
    if (message_arena != submessage_arena) {
      list_element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_element, submessage_arena);
    }
    set_has_list_element();
    reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.ReferenceSegment.list_element)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.ReferenceSegment)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(const Expression_ReferenceSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::io::substrait::Expression_ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::io::substrait::Expression_ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::io::substrait::Expression_ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.ReferenceSegment)
}

void Expression_ReferenceSegment::SharedCtor() {
clear_has_reference_type();
}

Expression_ReferenceSegment::~Expression_ReferenceSegment() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.ReferenceSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
}

void Expression_ReferenceSegment::ArenaDtor(void* object) {
  Expression_ReferenceSegment* _this = reinterpret_cast< Expression_ReferenceSegment* >(object);
  (void)_this;
}
void Expression_ReferenceSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_ReferenceSegment::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.ReferenceSegment)
  switch (reference_type_case()) {
    case kMapKey: {
      if (GetArena() == nullptr) {
        delete reference_type_.map_key_;
      }
      break;
    }
    case kStructField: {
      if (GetArena() == nullptr) {
        delete reference_type_.struct_field_;
      }
      break;
    }
    case kListElement: {
      if (GetArena() == nullptr) {
        delete reference_type_.list_element_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}


void Expression_ReferenceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.ReferenceSegment.MapKey map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ReferenceSegment.StructField struct_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ReferenceSegment.ListElement list_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.ReferenceSegment.MapKey map_key = 1;
  if (_internal_has_map_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_key(this), target, stream);
  }

  // .io.substrait.Expression.ReferenceSegment.StructField struct_field = 2;
  if (_internal_has_struct_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::struct_field(this), target, stream);
  }

  // .io.substrait.Expression.ReferenceSegment.ListElement list_element = 3;
  if (_internal_has_list_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::list_element(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.ReferenceSegment)
  return target;
}

size_t Expression_ReferenceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.ReferenceSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .io.substrait.Expression.ReferenceSegment.MapKey map_key = 1;
    case kMapKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.map_key_);
      break;
    }
    // .io.substrait.Expression.ReferenceSegment.StructField struct_field = 2;
    case kStructField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.struct_field_);
      break;
    }
    // .io.substrait.Expression.ReferenceSegment.ListElement list_element = 3;
    case kListElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.list_element_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.ReferenceSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.ReferenceSegment)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment::MergeFrom(const Expression_ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::io::substrait::Expression_ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::io::substrait::Expression_ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::io::substrait::Expression_ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_ReferenceSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment::CopyFrom(const Expression_ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment::InternalSwap(Expression_ReferenceSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[32]);
}

// ===================================================================

class Expression_MaskExpression_Select::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_StructSelect& struct_(const Expression_MaskExpression_Select* msg);
  static const ::io::substrait::Expression_MaskExpression_ListSelect& list(const Expression_MaskExpression_Select* msg);
  static const ::io::substrait::Expression_MaskExpression_MapSelect& map(const Expression_MaskExpression_Select* msg);
};

const ::io::substrait::Expression_MaskExpression_StructSelect&
Expression_MaskExpression_Select::_Internal::struct_(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.struct__;
}
const ::io::substrait::Expression_MaskExpression_ListSelect&
Expression_MaskExpression_Select::_Internal::list(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.list_;
}
const ::io::substrait::Expression_MaskExpression_MapSelect&
Expression_MaskExpression_Select::_Internal::map(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.map_;
}
void Expression_MaskExpression_Select::set_allocated_struct_(::io::substrait::Expression_MaskExpression_StructSelect* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.Select.struct)
}
void Expression_MaskExpression_Select::set_allocated_list(::io::substrait::Expression_MaskExpression_ListSelect* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.Select.list)
}
void Expression_MaskExpression_Select::set_allocated_map(::io::substrait::Expression_MaskExpression_MapSelect* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.Select.map)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.Select)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(const Expression_MaskExpression_Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Expression_MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Expression_MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.Select)
}

void Expression_MaskExpression_Select::SharedCtor() {
clear_has_type();
}

Expression_MaskExpression_Select::~Expression_MaskExpression_Select() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.Select)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_Select::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_Select::ArenaDtor(void* object) {
  Expression_MaskExpression_Select* _this = reinterpret_cast< Expression_MaskExpression_Select* >(object);
  (void)_this;
}
void Expression_MaskExpression_Select::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_Select::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.MaskExpression.Select)
  switch (type_case()) {
    case kStruct: {
      if (GetArena() == nullptr) {
        delete type_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete type_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete type_.map_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_Select::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_Select::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.MaskExpression.StructSelect struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.ListSelect list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.MapSelect map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_Select::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.StructSelect struct = 1;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::struct_(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.ListSelect list = 2;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::list(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.MapSelect map = 3;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.Select)
  return target;
}

size_t Expression_MaskExpression_Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.Select)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.substrait.Expression.MaskExpression.StructSelect struct = 1;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.struct__);
      break;
    }
    // .io.substrait.Expression.MaskExpression.ListSelect list = 2;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.list_);
      break;
    }
    // .io.substrait.Expression.MaskExpression.MapSelect map = 3;
    case kMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.map_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_Select::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_Select* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_Select>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.Select)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.Select)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_Select::MergeFrom(const Expression_MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::io::substrait::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::io::substrait::Expression_MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::io::substrait::Expression_MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_Select::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_Select::CopyFrom(const Expression_MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_Select::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_Select::InternalSwap(Expression_MaskExpression_Select* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_Select::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[33]);
}

// ===================================================================

class Expression_MaskExpression_StructSelect::_Internal {
 public:
};

Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  struct_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.StructSelect)
}
Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(const Expression_MaskExpression_StructSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      struct_items_(from.struct_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.StructSelect)
}

void Expression_MaskExpression_StructSelect::SharedCtor() {
}

Expression_MaskExpression_StructSelect::~Expression_MaskExpression_StructSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.StructSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_StructSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_StructSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_StructSelect* _this = reinterpret_cast< Expression_MaskExpression_StructSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_StructSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_StructSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_StructSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  struct_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.MaskExpression.StructItem struct_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_struct_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_StructSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.MaskExpression.StructItem struct_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_struct_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_struct_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.StructSelect)
  return target;
}

size_t Expression_MaskExpression_StructSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.StructSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.MaskExpression.StructItem struct_items = 1;
  total_size += 1UL * this->_internal_struct_items_size();
  for (const auto& msg : this->struct_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_StructSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_StructSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_StructSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.StructSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.StructSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_StructSelect::MergeFrom(const Expression_MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  struct_items_.MergeFrom(from.struct_items_);
}

void Expression_MaskExpression_StructSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_StructSelect::CopyFrom(const Expression_MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructSelect::InternalSwap(Expression_MaskExpression_StructSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  struct_items_.InternalSwap(&other->struct_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[34]);
}

// ===================================================================

class Expression_MaskExpression_StructItem::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_StructItem* msg);
};

const ::io::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_StructItem::_Internal::child(const Expression_MaskExpression_StructItem* msg) {
  return *msg->child_;
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.StructItem)
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(const Expression_MaskExpression_StructItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.StructItem)
}

void Expression_MaskExpression_StructItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

Expression_MaskExpression_StructItem::~Expression_MaskExpression_StructItem() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.StructItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_StructItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_MaskExpression_StructItem::ArenaDtor(void* object) {
  Expression_MaskExpression_StructItem* _this = reinterpret_cast< Expression_MaskExpression_StructItem* >(object);
  (void)_this;
}
void Expression_MaskExpression_StructItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_StructItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_StructItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_StructItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .io.substrait.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.StructItem)
  return target;
}

size_t Expression_MaskExpression_StructItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.StructItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_StructItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_StructItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_StructItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.StructItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.StructItem)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_StructItem::MergeFrom(const Expression_MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_MaskExpression_StructItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_StructItem::CopyFrom(const Expression_MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructItem::InternalSwap(Expression_MaskExpression_StructItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, field_)
      + sizeof(Expression_MaskExpression_StructItem::field_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[35]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedCtor() {
field_ = 0;
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::~Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[36]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::~Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, end_)
      + sizeof(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::end_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[37]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
  static const ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
};

const ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.item_;
}
const ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.slice_;
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_item(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    type_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_slice(::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (slice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice);
    if (message_arena != submessage_arena) {
      slice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
    type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(const Expression_MaskExpression_ListSelect_ListSelectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
}

void Expression_MaskExpression_ListSelect_ListSelectItem::SharedCtor() {
clear_has_type();
}

Expression_MaskExpression_ListSelect_ListSelectItem::~Expression_MaskExpression_ListSelect_ListSelectItem() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  switch (type_case()) {
    case kItem: {
      if (GetArena() == nullptr) {
        delete type_.item_;
      }
      break;
    }
    case kSlice: {
      if (GetArena() == nullptr) {
        delete type_.slice_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_ListSelect_ListSelectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
  if (_internal_has_slice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.item_);
      break;
    }
    // .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
    case kSlice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.slice_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[38]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_ListSelect* msg);
};

const ::io::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_ListSelect::_Internal::child(const Expression_MaskExpression_ListSelect* msg) {
  return *msg->child_;
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.ListSelect)
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(const Expression_MaskExpression_ListSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selection_(from.selection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.ListSelect)
}

void Expression_MaskExpression_ListSelect::SharedCtor() {
child_ = nullptr;
}

Expression_MaskExpression_ListSelect::~Expression_MaskExpression_ListSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.ListSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_MaskExpression_ListSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect* _this = reinterpret_cast< Expression_MaskExpression_ListSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_.Clear();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_selection(i), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.ListSelect)
  return target;
}

size_t Expression_MaskExpression_ListSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.ListSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  total_size += 1UL * this->_internal_selection_size();
  for (const auto& msg : this->selection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.ListSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.ListSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect::MergeFrom(const Expression_MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_.MergeFrom(from.selection_);
  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
}

void Expression_MaskExpression_ListSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect::CopyFrom(const Expression_MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect::InternalSwap(Expression_MaskExpression_ListSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selection_.InternalSwap(&other->selection_);
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[39]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect_MapKey::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
}
Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(const Expression_MaskExpression_MapSelect_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key().empty()) {
    map_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
}

void Expression_MaskExpression_MapSelect_MapKey::SharedCtor() {
map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_MaskExpression_MapSelect_MapKey::~Expression_MaskExpression_MapSelect_MapKey() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_MaskExpression_MapSelect_MapKey::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect_MapKey* _this = reinterpret_cast< Expression_MaskExpression_MapSelect_MapKey* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.MaskExpression.MapSelect.MapKey.map_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key().data(), static_cast<int>(this->_internal_map_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.MaskExpression.MapSelect.MapKey.map_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect_MapKey::MergeFrom(const Expression_MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key().size() > 0) {
    _internal_set_map_key(from._internal_map_key());
  }
}

void Expression_MaskExpression_MapSelect_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect_MapKey::CopyFrom(const Expression_MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKey::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKey::InternalSwap(Expression_MaskExpression_MapSelect_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_.Swap(&other->map_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[40]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect_MapKeyExpression::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
}
Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(const Expression_MaskExpression_MapSelect_MapKeyExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key_expression().empty()) {
    map_key_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_key_expression(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedCtor() {
map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_MaskExpression_MapSelect_MapKeyExpression::~Expression_MaskExpression_MapSelect_MapKeyExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect_MapKeyExpression* _this = reinterpret_cast< Expression_MaskExpression_MapSelect_MapKeyExpression* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect_MapKeyExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect_MapKeyExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_expression_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key_expression().data(), static_cast<int>(this->_internal_map_key_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKeyExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key_expression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect_MapKeyExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect_MapKeyExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key_expression().size() > 0) {
    _internal_set_map_key_expression(from._internal_map_key_expression());
  }
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKeyExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::InternalSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_expression_.Swap(&other->map_key_expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKeyExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[41]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_MapSelect_MapKey& key(const Expression_MaskExpression_MapSelect* msg);
  static const ::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& expression(const Expression_MaskExpression_MapSelect* msg);
  static const ::io::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_MapSelect* msg);
};

const ::io::substrait::Expression_MaskExpression_MapSelect_MapKey&
Expression_MaskExpression_MapSelect::_Internal::key(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->select_.key_;
}
const ::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression&
Expression_MaskExpression_MapSelect::_Internal::expression(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->select_.expression_;
}
const ::io::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_MapSelect::_Internal::child(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->child_;
}
void Expression_MaskExpression_MapSelect::set_allocated_key(::io::substrait::Expression_MaskExpression_MapSelect_MapKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    select_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.MapSelect.key)
}
void Expression_MaskExpression_MapSelect::set_allocated_expression(::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.MaskExpression.MapSelect.expression)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression.MapSelect)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(const Expression_MaskExpression_MapSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::io::substrait::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  clear_has_select();
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::io::substrait::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression.MapSelect)
}

void Expression_MaskExpression_MapSelect::SharedCtor() {
child_ = nullptr;
clear_has_select();
}

Expression_MaskExpression_MapSelect::~Expression_MaskExpression_MapSelect() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression.MapSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (has_select()) {
    clear_select();
  }
}

void Expression_MaskExpression_MapSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect* _this = reinterpret_cast< Expression_MaskExpression_MapSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect::clear_select() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.MaskExpression.MapSelect)
  switch (select_case()) {
    case kKey: {
      if (GetArena() == nullptr) {
        delete select_.key_;
      }
      break;
    }
    case kExpression: {
      if (GetArena() == nullptr) {
        delete select_.expression_;
      }
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SELECT_NOT_SET;
}


void Expression_MaskExpression_MapSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  clear_select();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression.Select child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression.Select child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression.MapSelect)
  return target;
}

size_t Expression_MaskExpression_MapSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression.MapSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.Select child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  switch (select_case()) {
    // .io.substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.key_);
      break;
    }
    // .io.substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.expression_);
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression.MapSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression.MapSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect::MergeFrom(const Expression_MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::io::substrait::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::io::substrait::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_MapSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect::CopyFrom(const Expression_MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect::InternalSwap(Expression_MaskExpression_MapSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(child_, other->child_);
  swap(select_, other->select_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[42]);
}

// ===================================================================

class Expression_MaskExpression::_Internal {
 public:
  static const ::io::substrait::Expression_MaskExpression_StructSelect& select(const Expression_MaskExpression* msg);
};

const ::io::substrait::Expression_MaskExpression_StructSelect&
Expression_MaskExpression::_Internal::select(const Expression_MaskExpression* msg) {
  return *msg->select_;
}
Expression_MaskExpression::Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.MaskExpression)
}
Expression_MaskExpression::Expression_MaskExpression(const Expression_MaskExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select()) {
    select_ = new ::io::substrait::Expression_MaskExpression_StructSelect(*from.select_);
  } else {
    select_ = nullptr;
  }
  maintain_singular_struct_ = from.maintain_singular_struct_;
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.MaskExpression)
}

void Expression_MaskExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maintain_singular_struct_) -
    reinterpret_cast<char*>(&select_)) + sizeof(maintain_singular_struct_));
}

Expression_MaskExpression::~Expression_MaskExpression() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.MaskExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_;
}

void Expression_MaskExpression::ArenaDtor(void* object) {
  Expression_MaskExpression* _this = reinterpret_cast< Expression_MaskExpression* >(object);
  (void)_this;
}
void Expression_MaskExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_MaskExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_ != nullptr) {
    delete select_;
  }
  select_ = nullptr;
  maintain_singular_struct_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.MaskExpression.StructSelect select = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool maintain_singular_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maintain_singular_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select(this), target, stream);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_maintain_singular_struct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.MaskExpression)
  return target;
}

size_t Expression_MaskExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.MaskExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.MaskExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.MaskExpression)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression::MergeFrom(const Expression_MaskExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select()) {
    _internal_mutable_select()->::io::substrait::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_select());
  }
  if (from.maintain_singular_struct() != 0) {
    _internal_set_maintain_singular_struct(from._internal_maintain_singular_struct());
  }
}

void Expression_MaskExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression::CopyFrom(const Expression_MaskExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression::InternalSwap(Expression_MaskExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, maintain_singular_struct_)
      + sizeof(Expression_MaskExpression::maintain_singular_struct_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, select_)>(
          reinterpret_cast<char*>(&select_),
          reinterpret_cast<char*>(&other->select_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[43]);
}

// ===================================================================

class Expression_FieldReference_RootReference::_Internal {
 public:
};

Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.FieldReference.RootReference)
}
Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(const Expression_FieldReference_RootReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.FieldReference.RootReference)
}

void Expression_FieldReference_RootReference::SharedCtor() {
}

Expression_FieldReference_RootReference::~Expression_FieldReference_RootReference() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.FieldReference.RootReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_FieldReference_RootReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_FieldReference_RootReference::ArenaDtor(void* object) {
  Expression_FieldReference_RootReference* _this = reinterpret_cast< Expression_FieldReference_RootReference* >(object);
  (void)_this;
}
void Expression_FieldReference_RootReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_FieldReference_RootReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_FieldReference_RootReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.FieldReference.RootReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference_RootReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_FieldReference_RootReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.FieldReference.RootReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.FieldReference.RootReference)
  return target;
}

size_t Expression_FieldReference_RootReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.FieldReference.RootReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_FieldReference_RootReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.FieldReference.RootReference)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_FieldReference_RootReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_FieldReference_RootReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.FieldReference.RootReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.FieldReference.RootReference)
    MergeFrom(*source);
  }
}

void Expression_FieldReference_RootReference::MergeFrom(const Expression_FieldReference_RootReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.FieldReference.RootReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_FieldReference_RootReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.FieldReference.RootReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_FieldReference_RootReference::CopyFrom(const Expression_FieldReference_RootReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.FieldReference.RootReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference_RootReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference_RootReference::InternalSwap(Expression_FieldReference_RootReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference_RootReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[44]);
}

// ===================================================================

class Expression_FieldReference::_Internal {
 public:
  static const ::io::substrait::Expression_ReferenceSegment& direct_reference(const Expression_FieldReference* msg);
  static const ::io::substrait::Expression_MaskExpression& masked_reference(const Expression_FieldReference* msg);
  static const ::io::substrait::Expression& expression(const Expression_FieldReference* msg);
  static const ::io::substrait::Expression_FieldReference_RootReference& root_reference(const Expression_FieldReference* msg);
};

const ::io::substrait::Expression_ReferenceSegment&
Expression_FieldReference::_Internal::direct_reference(const Expression_FieldReference* msg) {
  return *msg->reference_type_.direct_reference_;
}
const ::io::substrait::Expression_MaskExpression&
Expression_FieldReference::_Internal::masked_reference(const Expression_FieldReference* msg) {
  return *msg->reference_type_.masked_reference_;
}
const ::io::substrait::Expression&
Expression_FieldReference::_Internal::expression(const Expression_FieldReference* msg) {
  return *msg->root_type_.expression_;
}
const ::io::substrait::Expression_FieldReference_RootReference&
Expression_FieldReference::_Internal::root_reference(const Expression_FieldReference* msg) {
  return *msg->root_type_.root_reference_;
}
void Expression_FieldReference::set_allocated_direct_reference(::io::substrait::Expression_ReferenceSegment* direct_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (direct_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct_reference);
    if (message_arena != submessage_arena) {
      direct_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_reference, submessage_arena);
    }
    set_has_direct_reference();
    reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.FieldReference.direct_reference)
}
void Expression_FieldReference::set_allocated_masked_reference(::io::substrait::Expression_MaskExpression* masked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (masked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(masked_reference);
    if (message_arena != submessage_arena) {
      masked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_reference, submessage_arena);
    }
    set_has_masked_reference();
    reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.FieldReference.masked_reference)
}
void Expression_FieldReference::set_allocated_expression(::io::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_root_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    root_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.FieldReference.expression)
}
void Expression_FieldReference::set_allocated_root_reference(::io::substrait::Expression_FieldReference_RootReference* root_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_root_type();
  if (root_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_reference);
    if (message_arena != submessage_arena) {
      root_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_reference, submessage_arena);
    }
    set_has_root_reference();
    root_type_.root_reference_ = root_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.FieldReference.root_reference)
}
Expression_FieldReference::Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression.FieldReference)
}
Expression_FieldReference::Expression_FieldReference(const Expression_FieldReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::io::substrait::Expression_ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::io::substrait::Expression_MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_root_type();
  switch (from.root_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kRootReference: {
      _internal_mutable_root_reference()->::io::substrait::Expression_FieldReference_RootReference::MergeFrom(from._internal_root_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression.FieldReference)
}

void Expression_FieldReference::SharedCtor() {
clear_has_reference_type();
clear_has_root_type();
}

Expression_FieldReference::~Expression_FieldReference() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression.FieldReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_FieldReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
  if (has_root_type()) {
    clear_root_type();
  }
}

void Expression_FieldReference::ArenaDtor(void* object) {
  Expression_FieldReference* _this = reinterpret_cast< Expression_FieldReference* >(object);
  (void)_this;
}
void Expression_FieldReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_FieldReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression_FieldReference::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.FieldReference)
  switch (reference_type_case()) {
    case kDirectReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.direct_reference_;
      }
      break;
    }
    case kMaskedReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.masked_reference_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}

void Expression_FieldReference::clear_root_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression.FieldReference)
  switch (root_type_case()) {
    case kExpression: {
      if (GetArena() == nullptr) {
        delete root_type_.expression_;
      }
      break;
    }
    case kRootReference: {
      if (GetArena() == nullptr) {
        delete root_type_.root_reference_;
      }
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ROOT_TYPE_NOT_SET;
}


void Expression_FieldReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  clear_root_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.ReferenceSegment direct_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MaskExpression masked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression expression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.FieldReference.RootReference root_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_FieldReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.ReferenceSegment direct_reference = 1;
  if (_internal_has_direct_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct_reference(this), target, stream);
  }

  // .io.substrait.Expression.MaskExpression masked_reference = 2;
  if (_internal_has_masked_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::masked_reference(this), target, stream);
  }

  // .io.substrait.Expression expression = 3;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expression(this), target, stream);
  }

  // .io.substrait.Expression.FieldReference.RootReference root_reference = 4;
  if (_internal_has_root_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::root_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression.FieldReference)
  return target;
}

size_t Expression_FieldReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression.FieldReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .io.substrait.Expression.ReferenceSegment direct_reference = 1;
    case kDirectReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.direct_reference_);
      break;
    }
    // .io.substrait.Expression.MaskExpression masked_reference = 2;
    case kMaskedReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.masked_reference_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (root_type_case()) {
    // .io.substrait.Expression expression = 3;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_type_.expression_);
      break;
    }
    // .io.substrait.Expression.FieldReference.RootReference root_reference = 4;
    case kRootReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_type_.root_reference_);
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_FieldReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_FieldReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_FieldReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression.FieldReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression.FieldReference)
    MergeFrom(*source);
  }
}

void Expression_FieldReference::MergeFrom(const Expression_FieldReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::io::substrait::Expression_ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::io::substrait::Expression_MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.root_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::io::substrait::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kRootReference: {
      _internal_mutable_root_reference()->::io::substrait::Expression_FieldReference_RootReference::MergeFrom(from._internal_root_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_FieldReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_FieldReference::CopyFrom(const Expression_FieldReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference::InternalSwap(Expression_FieldReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(root_type_, other->root_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[45]);
}

// ===================================================================

class Expression::_Internal {
 public:
  static const ::io::substrait::Expression_Literal& literal(const Expression* msg);
  static const ::io::substrait::Expression_FieldReference& selection(const Expression* msg);
  static const ::io::substrait::Expression_ScalarFunction& scalar_function(const Expression* msg);
  static const ::io::substrait::Expression_WindowFunction& window_function(const Expression* msg);
  static const ::io::substrait::Expression_IfThen& if_then(const Expression* msg);
  static const ::io::substrait::Expression_SwitchExpression& switch_expression(const Expression* msg);
  static const ::io::substrait::Expression_SingularOrList& singular_or_list(const Expression* msg);
  static const ::io::substrait::Expression_MultiOrList& multi_or_list(const Expression* msg);
  static const ::io::substrait::Expression_Enum& enum_(const Expression* msg);
  static const ::io::substrait::Expression_Cast& cast(const Expression* msg);
};

const ::io::substrait::Expression_Literal&
Expression::_Internal::literal(const Expression* msg) {
  return *msg->rex_type_.literal_;
}
const ::io::substrait::Expression_FieldReference&
Expression::_Internal::selection(const Expression* msg) {
  return *msg->rex_type_.selection_;
}
const ::io::substrait::Expression_ScalarFunction&
Expression::_Internal::scalar_function(const Expression* msg) {
  return *msg->rex_type_.scalar_function_;
}
const ::io::substrait::Expression_WindowFunction&
Expression::_Internal::window_function(const Expression* msg) {
  return *msg->rex_type_.window_function_;
}
const ::io::substrait::Expression_IfThen&
Expression::_Internal::if_then(const Expression* msg) {
  return *msg->rex_type_.if_then_;
}
const ::io::substrait::Expression_SwitchExpression&
Expression::_Internal::switch_expression(const Expression* msg) {
  return *msg->rex_type_.switch_expression_;
}
const ::io::substrait::Expression_SingularOrList&
Expression::_Internal::singular_or_list(const Expression* msg) {
  return *msg->rex_type_.singular_or_list_;
}
const ::io::substrait::Expression_MultiOrList&
Expression::_Internal::multi_or_list(const Expression* msg) {
  return *msg->rex_type_.multi_or_list_;
}
const ::io::substrait::Expression_Enum&
Expression::_Internal::enum_(const Expression* msg) {
  return *msg->rex_type_.enum__;
}
const ::io::substrait::Expression_Cast&
Expression::_Internal::cast(const Expression* msg) {
  return *msg->rex_type_.cast_;
}
void Expression::set_allocated_literal(::io::substrait::Expression_Literal* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(literal);
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    set_has_literal();
    rex_type_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.literal)
}
void Expression::set_allocated_selection(::io::substrait::Expression_FieldReference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    set_has_selection();
    rex_type_.selection_ = selection;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.selection)
}
void Expression::set_allocated_scalar_function(::io::substrait::Expression_ScalarFunction* scalar_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (scalar_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalar_function);
    if (message_arena != submessage_arena) {
      scalar_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar_function, submessage_arena);
    }
    set_has_scalar_function();
    rex_type_.scalar_function_ = scalar_function;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.scalar_function)
}
void Expression::set_allocated_window_function(::io::substrait::Expression_WindowFunction* window_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (window_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_function);
    if (message_arena != submessage_arena) {
      window_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_function, submessage_arena);
    }
    set_has_window_function();
    rex_type_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.window_function)
}
void Expression::set_allocated_if_then(::io::substrait::Expression_IfThen* if_then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (if_then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(if_then);
    if (message_arena != submessage_arena) {
      if_then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_then, submessage_arena);
    }
    set_has_if_then();
    rex_type_.if_then_ = if_then;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.if_then)
}
void Expression::set_allocated_switch_expression(::io::substrait::Expression_SwitchExpression* switch_expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (switch_expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(switch_expression);
    if (message_arena != submessage_arena) {
      switch_expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_expression, submessage_arena);
    }
    set_has_switch_expression();
    rex_type_.switch_expression_ = switch_expression;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.switch_expression)
}
void Expression::set_allocated_singular_or_list(::io::substrait::Expression_SingularOrList* singular_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (singular_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(singular_or_list);
    if (message_arena != submessage_arena) {
      singular_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singular_or_list, submessage_arena);
    }
    set_has_singular_or_list();
    rex_type_.singular_or_list_ = singular_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.singular_or_list)
}
void Expression::set_allocated_multi_or_list(::io::substrait::Expression_MultiOrList* multi_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (multi_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi_or_list);
    if (message_arena != submessage_arena) {
      multi_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_or_list, submessage_arena);
    }
    set_has_multi_or_list();
    rex_type_.multi_or_list_ = multi_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.multi_or_list)
}
void Expression::set_allocated_enum_(::io::substrait::Expression_Enum* enum_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (enum_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(enum_);
    if (message_arena != submessage_arena) {
      enum_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    rex_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.enum)
}
void Expression::set_allocated_cast(::io::substrait::Expression_Cast* cast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (cast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cast);
    if (message_arena != submessage_arena) {
      cast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast, submessage_arena);
    }
    set_has_cast();
    rex_type_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Expression.cast)
}
Expression::Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.Expression)
}
Expression::Expression(const Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rex_type();
  switch (from.rex_type_case()) {
    case kLiteral: {
      _internal_mutable_literal()->::io::substrait::Expression_Literal::MergeFrom(from._internal_literal());
      break;
    }
    case kSelection: {
      _internal_mutable_selection()->::io::substrait::Expression_FieldReference::MergeFrom(from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _internal_mutable_scalar_function()->::io::substrait::Expression_ScalarFunction::MergeFrom(from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _internal_mutable_window_function()->::io::substrait::Expression_WindowFunction::MergeFrom(from._internal_window_function());
      break;
    }
    case kIfThen: {
      _internal_mutable_if_then()->::io::substrait::Expression_IfThen::MergeFrom(from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _internal_mutable_switch_expression()->::io::substrait::Expression_SwitchExpression::MergeFrom(from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _internal_mutable_singular_or_list()->::io::substrait::Expression_SingularOrList::MergeFrom(from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _internal_mutable_multi_or_list()->::io::substrait::Expression_MultiOrList::MergeFrom(from._internal_multi_or_list());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::io::substrait::Expression_Enum::MergeFrom(from._internal_enum_());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::io::substrait::Expression_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.Expression)
}

void Expression::SharedCtor() {
clear_has_rex_type();
}

Expression::~Expression() {
  // @@protoc_insertion_point(destructor:io.substrait.Expression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_rex_type()) {
    clear_rex_type();
  }
}

void Expression::ArenaDtor(void* object) {
  Expression* _this = reinterpret_cast< Expression* >(object);
  (void)_this;
}
void Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression::clear_rex_type() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.Expression)
  switch (rex_type_case()) {
    case kLiteral: {
      if (GetArena() == nullptr) {
        delete rex_type_.literal_;
      }
      break;
    }
    case kSelection: {
      if (GetArena() == nullptr) {
        delete rex_type_.selection_;
      }
      break;
    }
    case kScalarFunction: {
      if (GetArena() == nullptr) {
        delete rex_type_.scalar_function_;
      }
      break;
    }
    case kWindowFunction: {
      if (GetArena() == nullptr) {
        delete rex_type_.window_function_;
      }
      break;
    }
    case kIfThen: {
      if (GetArena() == nullptr) {
        delete rex_type_.if_then_;
      }
      break;
    }
    case kSwitchExpression: {
      if (GetArena() == nullptr) {
        delete rex_type_.switch_expression_;
      }
      break;
    }
    case kSingularOrList: {
      if (GetArena() == nullptr) {
        delete rex_type_.singular_or_list_;
      }
      break;
    }
    case kMultiOrList: {
      if (GetArena() == nullptr) {
        delete rex_type_.multi_or_list_;
      }
      break;
    }
    case kEnum: {
      if (GetArena() == nullptr) {
        delete rex_type_.enum__;
      }
      break;
    }
    case kCast: {
      if (GetArena() == nullptr) {
        delete rex_type_.cast_;
      }
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REX_TYPE_NOT_SET;
}


void Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rex_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression.Literal literal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.FieldReference selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.ScalarFunction scalar_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.WindowFunction window_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.IfThen if_then = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.SwitchExpression switch_expression = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.SingularOrList singular_or_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_singular_or_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.MultiOrList multi_or_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_or_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Enum enum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.Expression.Cast cast = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression.Literal literal = 1;
  if (_internal_has_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::literal(this), target, stream);
  }

  // .io.substrait.Expression.FieldReference selection = 2;
  if (_internal_has_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection(this), target, stream);
  }

  // .io.substrait.Expression.ScalarFunction scalar_function = 3;
  if (_internal_has_scalar_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scalar_function(this), target, stream);
  }

  // .io.substrait.Expression.WindowFunction window_function = 5;
  if (_internal_has_window_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::window_function(this), target, stream);
  }

  // .io.substrait.Expression.IfThen if_then = 6;
  if (_internal_has_if_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::if_then(this), target, stream);
  }

  // .io.substrait.Expression.SwitchExpression switch_expression = 7;
  if (_internal_has_switch_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::switch_expression(this), target, stream);
  }

  // .io.substrait.Expression.SingularOrList singular_or_list = 8;
  if (_internal_has_singular_or_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::singular_or_list(this), target, stream);
  }

  // .io.substrait.Expression.MultiOrList multi_or_list = 9;
  if (_internal_has_multi_or_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::multi_or_list(this), target, stream);
  }

  // .io.substrait.Expression.Enum enum = 10;
  if (_internal_has_enum_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::enum_(this), target, stream);
  }

  // .io.substrait.Expression.Cast cast = 11;
  if (_internal_has_cast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cast(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.Expression)
  return target;
}

size_t Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rex_type_case()) {
    // .io.substrait.Expression.Literal literal = 1;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.literal_);
      break;
    }
    // .io.substrait.Expression.FieldReference selection = 2;
    case kSelection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.selection_);
      break;
    }
    // .io.substrait.Expression.ScalarFunction scalar_function = 3;
    case kScalarFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.scalar_function_);
      break;
    }
    // .io.substrait.Expression.WindowFunction window_function = 5;
    case kWindowFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.window_function_);
      break;
    }
    // .io.substrait.Expression.IfThen if_then = 6;
    case kIfThen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.if_then_);
      break;
    }
    // .io.substrait.Expression.SwitchExpression switch_expression = 7;
    case kSwitchExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.switch_expression_);
      break;
    }
    // .io.substrait.Expression.SingularOrList singular_or_list = 8;
    case kSingularOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.singular_or_list_);
      break;
    }
    // .io.substrait.Expression.MultiOrList multi_or_list = 9;
    case kMultiOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.multi_or_list_);
      break;
    }
    // .io.substrait.Expression.Enum enum = 10;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.enum__);
      break;
    }
    // .io.substrait.Expression.Cast cast = 11;
    case kCast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.cast_);
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.Expression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.Expression)
    MergeFrom(*source);
  }
}

void Expression::MergeFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rex_type_case()) {
    case kLiteral: {
      _internal_mutable_literal()->::io::substrait::Expression_Literal::MergeFrom(from._internal_literal());
      break;
    }
    case kSelection: {
      _internal_mutable_selection()->::io::substrait::Expression_FieldReference::MergeFrom(from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _internal_mutable_scalar_function()->::io::substrait::Expression_ScalarFunction::MergeFrom(from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _internal_mutable_window_function()->::io::substrait::Expression_WindowFunction::MergeFrom(from._internal_window_function());
      break;
    }
    case kIfThen: {
      _internal_mutable_if_then()->::io::substrait::Expression_IfThen::MergeFrom(from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _internal_mutable_switch_expression()->::io::substrait::Expression_SwitchExpression::MergeFrom(from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _internal_mutable_singular_or_list()->::io::substrait::Expression_SingularOrList::MergeFrom(from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _internal_mutable_multi_or_list()->::io::substrait::Expression_MultiOrList::MergeFrom(from._internal_multi_or_list());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::io::substrait::Expression_Enum::MergeFrom(from._internal_enum_());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::io::substrait::Expression_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression::CopyFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  return true;
}

void Expression::InternalSwap(Expression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rex_type_, other->rex_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[46]);
}

// ===================================================================

class SortField::_Internal {
 public:
  static const ::io::substrait::Expression& expr(const SortField* msg);
};

const ::io::substrait::Expression&
SortField::_Internal::expr(const SortField* msg) {
  return *msg->expr_;
}
SortField::SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.SortField)
}
SortField::SortField(const SortField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expr()) {
    expr_ = new ::io::substrait::Expression(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  clear_has_sort_kind();
  switch (from.sort_kind_case()) {
    case kDirection: {
      _internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.substrait.SortField)
}

void SortField::SharedCtor() {
expr_ = nullptr;
clear_has_sort_kind();
}

SortField::~SortField() {
  // @@protoc_insertion_point(destructor:io.substrait.SortField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expr_;
  if (has_sort_kind()) {
    clear_sort_kind();
  }
}

void SortField::ArenaDtor(void* object) {
  SortField* _this = reinterpret_cast< SortField* >(object);
  (void)_this;
}
void SortField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortField::clear_sort_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.substrait.SortField)
  switch (sort_kind_case()) {
    case kDirection: {
      // No need to clear
      break;
    }
    case kComparisonFunctionReference: {
      // No need to clear
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SORT_KIND_NOT_SET;
}


void SortField::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.SortField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
  clear_sort_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.substrait.Expression expr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.substrait.SortField.SortDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::io::substrait::SortField_SortDirection>(val));
        } else goto handle_unusual;
        continue;
      // uint32 comparison_function_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.SortField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.substrait.Expression expr = 1;
  if (this->has_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expr(this), target, stream);
  }

  // .io.substrait.SortField.SortDirection direction = 2;
  if (_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // uint32 comparison_function_reference = 3;
  if (_internal_has_comparison_function_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_comparison_function_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.SortField)
  return target;
}

size_t SortField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.SortField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.substrait.Expression expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  switch (sort_kind_case()) {
    // .io.substrait.SortField.SortDirection direction = 2;
    case kDirection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
      break;
    }
    // uint32 comparison_function_reference = 3;
    case kComparisonFunctionReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.SortField)
  GOOGLE_DCHECK_NE(&from, this);
  const SortField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.SortField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.SortField)
    MergeFrom(*source);
  }
}

void SortField::MergeFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.SortField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    _internal_mutable_expr()->::io::substrait::Expression::MergeFrom(from._internal_expr());
  }
  switch (from.sort_kind_case()) {
    case kDirection: {
      _internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
}

void SortField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortField::CopyFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortField::IsInitialized() const {
  return true;
}

void SortField::InternalSwap(SortField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(expr_, other->expr_);
  swap(sort_kind_, other->sort_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[47]);
}

// ===================================================================

class AggregateFunction::_Internal {
 public:
  static const ::io::substrait::Type& output_type(const AggregateFunction* msg);
};

const ::io::substrait::Type&
AggregateFunction::_Internal::output_type(const AggregateFunction* msg) {
  return *msg->output_type_;
}
void AggregateFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
AggregateFunction::AggregateFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena),
  sorts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.substrait.AggregateFunction)
}
AggregateFunction::AggregateFunction(const AggregateFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::io::substrait::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  ::memcpy(&function_reference_, &from.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&function_reference_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:io.substrait.AggregateFunction)
}

void AggregateFunction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&output_type_)) + sizeof(phase_));
}

AggregateFunction::~AggregateFunction() {
  // @@protoc_insertion_point(destructor:io.substrait.AggregateFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
}

void AggregateFunction::ArenaDtor(void* object) {
  AggregateFunction* _this = reinterpret_cast< AggregateFunction* >(object);
  (void)_this;
}
void AggregateFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:io.substrait.AggregateFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  sorts_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  ::memset(&function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&function_reference_)) + sizeof(phase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.Expression args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.substrait.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.substrait.AggregationPhase phase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::io::substrait::AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      // .io.substrait.Type output_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.substrait.AggregateFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .io.substrait.Expression args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // repeated .io.substrait.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .io.substrait.AggregationPhase phase = 4;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_phase(), target);
  }

  // .io.substrait.Type output_type = 5;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::output_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.substrait.AggregateFunction)
  return target;
}

size_t AggregateFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.substrait.AggregateFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.substrait.Expression args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.substrait.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.substrait.Type output_type = 5;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  // .io.substrait.AggregationPhase phase = 4;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.substrait.AggregateFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.substrait.AggregateFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.substrait.AggregateFunction)
    MergeFrom(*source);
  }
}

void AggregateFunction::MergeFrom(const AggregateFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.substrait.AggregateFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  sorts_.MergeFrom(from.sorts_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::io::substrait::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
}

void AggregateFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.substrait.AggregateFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateFunction::CopyFrom(const AggregateFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.substrait.AggregateFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateFunction::IsInitialized() const {
  return true;
}

void AggregateFunction::InternalSwap(AggregateFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateFunction, phase_)
      + sizeof(AggregateFunction::phase_)
      - PROTOBUF_FIELD_OFFSET(AggregateFunction, output_type_)>(
          reinterpret_cast<char*>(&output_type_),
          reinterpret_cast<char*>(&other->output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_expression_2eproto_getter, &descriptor_table_expression_2eproto_once,
      file_level_metadata_expression_2eproto[48]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Enum_Empty* Arena::CreateMaybeMessage< ::io::substrait::Expression_Enum_Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Enum_Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Enum* Arena::CreateMaybeMessage< ::io::substrait::Expression_Enum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Enum >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_VarChar* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_Decimal* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_Map_KeyValue* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_Map_KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_Map_KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_Map* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_IntervalYearToMonth* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_IntervalYearToMonth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_IntervalYearToMonth >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_IntervalDayToSecond* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_IntervalDayToSecond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_IntervalDayToSecond >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_Struct* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal_List* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal_List >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Literal* Arena::CreateMaybeMessage< ::io::substrait::Expression_Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_ScalarFunction* Arena::CreateMaybeMessage< ::io::substrait::Expression_ScalarFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_ScalarFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction_Bound_Preceding* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction_Bound_Preceding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction_Bound_Preceding >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction_Bound_Following* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction_Bound_Following >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction_Bound_Following >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction_Bound_CurrentRow* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction_Bound_CurrentRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction_Bound_CurrentRow >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction_Bound_Unbounded* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction_Bound_Unbounded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction_Bound_Unbounded >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction_Bound* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction_Bound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction_Bound >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_WindowFunction* Arena::CreateMaybeMessage< ::io::substrait::Expression_WindowFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_WindowFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_IfThen_IfClause* Arena::CreateMaybeMessage< ::io::substrait::Expression_IfThen_IfClause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_IfThen_IfClause >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_IfThen* Arena::CreateMaybeMessage< ::io::substrait::Expression_IfThen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_IfThen >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_Cast* Arena::CreateMaybeMessage< ::io::substrait::Expression_Cast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_Cast >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_SwitchExpression_IfValue* Arena::CreateMaybeMessage< ::io::substrait::Expression_SwitchExpression_IfValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_SwitchExpression_IfValue >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_SwitchExpression* Arena::CreateMaybeMessage< ::io::substrait::Expression_SwitchExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_SwitchExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_SingularOrList* Arena::CreateMaybeMessage< ::io::substrait::Expression_SingularOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_SingularOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MultiOrList_Record* Arena::CreateMaybeMessage< ::io::substrait::Expression_MultiOrList_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MultiOrList_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MultiOrList* Arena::CreateMaybeMessage< ::io::substrait::Expression_MultiOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MultiOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Arena::CreateMaybeMessage< ::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_EmbeddedFunction_PythonPickleFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Arena::CreateMaybeMessage< ::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_EmbeddedFunction_WebAssemblyFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_EmbeddedFunction* Arena::CreateMaybeMessage< ::io::substrait::Expression_EmbeddedFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_EmbeddedFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_ReferenceSegment_MapKey* Arena::CreateMaybeMessage< ::io::substrait::Expression_ReferenceSegment_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_ReferenceSegment_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_ReferenceSegment_StructField* Arena::CreateMaybeMessage< ::io::substrait::Expression_ReferenceSegment_StructField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_ReferenceSegment_StructField >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_ReferenceSegment_ListElement* Arena::CreateMaybeMessage< ::io::substrait::Expression_ReferenceSegment_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_ReferenceSegment_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_ReferenceSegment* Arena::CreateMaybeMessage< ::io::substrait::Expression_ReferenceSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_ReferenceSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_Select* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_Select >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_StructSelect* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_StructSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_StructSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_StructItem* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_StructItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_StructItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_ListSelect* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_ListSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_ListSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_MapSelect_MapKey* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_MapSelect_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_MapSelect_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression_MapSelect* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression_MapSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression_MapSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_MaskExpression* Arena::CreateMaybeMessage< ::io::substrait::Expression_MaskExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_MaskExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_FieldReference_RootReference* Arena::CreateMaybeMessage< ::io::substrait::Expression_FieldReference_RootReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_FieldReference_RootReference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression_FieldReference* Arena::CreateMaybeMessage< ::io::substrait::Expression_FieldReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression_FieldReference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::Expression* Arena::CreateMaybeMessage< ::io::substrait::Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::SortField* Arena::CreateMaybeMessage< ::io::substrait::SortField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::SortField >(arena);
}
template<> PROTOBUF_NOINLINE ::io::substrait::AggregateFunction* Arena::CreateMaybeMessage< ::io::substrait::AggregateFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::substrait::AggregateFunction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
