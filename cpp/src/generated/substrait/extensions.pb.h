// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extensions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extensions_2eproto;
namespace io {
namespace substrait {
class Extensions;
struct ExtensionsDefaultTypeInternal;
extern ExtensionsDefaultTypeInternal _Extensions_default_instance_;
class Extensions_Extension;
struct Extensions_ExtensionDefaultTypeInternal;
extern Extensions_ExtensionDefaultTypeInternal _Extensions_Extension_default_instance_;
class Extensions_ExtensionId;
struct Extensions_ExtensionIdDefaultTypeInternal;
extern Extensions_ExtensionIdDefaultTypeInternal _Extensions_ExtensionId_default_instance_;
class Extensions_Extension_FunctionExtension;
struct Extensions_Extension_FunctionExtensionDefaultTypeInternal;
extern Extensions_Extension_FunctionExtensionDefaultTypeInternal _Extensions_Extension_FunctionExtension_default_instance_;
class Extensions_Extension_TypeExtension;
struct Extensions_Extension_TypeExtensionDefaultTypeInternal;
extern Extensions_Extension_TypeExtensionDefaultTypeInternal _Extensions_Extension_TypeExtension_default_instance_;
class Extensions_FunctionId;
struct Extensions_FunctionIdDefaultTypeInternal;
extern Extensions_FunctionIdDefaultTypeInternal _Extensions_FunctionId_default_instance_;
class Extensions_Mapping;
struct Extensions_MappingDefaultTypeInternal;
extern Extensions_MappingDefaultTypeInternal _Extensions_Mapping_default_instance_;
class Extensions_Mapping_FunctionMapping;
struct Extensions_Mapping_FunctionMappingDefaultTypeInternal;
extern Extensions_Mapping_FunctionMappingDefaultTypeInternal _Extensions_Mapping_FunctionMapping_default_instance_;
class Extensions_Mapping_FunctionMapping_Option;
struct Extensions_Mapping_FunctionMapping_OptionDefaultTypeInternal;
extern Extensions_Mapping_FunctionMapping_OptionDefaultTypeInternal _Extensions_Mapping_FunctionMapping_Option_default_instance_;
class Extensions_Mapping_TypeMapping;
struct Extensions_Mapping_TypeMappingDefaultTypeInternal;
extern Extensions_Mapping_TypeMappingDefaultTypeInternal _Extensions_Mapping_TypeMapping_default_instance_;
class Extensions_TypeId;
struct Extensions_TypeIdDefaultTypeInternal;
extern Extensions_TypeIdDefaultTypeInternal _Extensions_TypeId_default_instance_;
}  // namespace substrait
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::substrait::Extensions* Arena::CreateMaybeMessage<::io::substrait::Extensions>(Arena*);
template<> ::io::substrait::Extensions_Extension* Arena::CreateMaybeMessage<::io::substrait::Extensions_Extension>(Arena*);
template<> ::io::substrait::Extensions_ExtensionId* Arena::CreateMaybeMessage<::io::substrait::Extensions_ExtensionId>(Arena*);
template<> ::io::substrait::Extensions_Extension_FunctionExtension* Arena::CreateMaybeMessage<::io::substrait::Extensions_Extension_FunctionExtension>(Arena*);
template<> ::io::substrait::Extensions_Extension_TypeExtension* Arena::CreateMaybeMessage<::io::substrait::Extensions_Extension_TypeExtension>(Arena*);
template<> ::io::substrait::Extensions_FunctionId* Arena::CreateMaybeMessage<::io::substrait::Extensions_FunctionId>(Arena*);
template<> ::io::substrait::Extensions_Mapping* Arena::CreateMaybeMessage<::io::substrait::Extensions_Mapping>(Arena*);
template<> ::io::substrait::Extensions_Mapping_FunctionMapping* Arena::CreateMaybeMessage<::io::substrait::Extensions_Mapping_FunctionMapping>(Arena*);
template<> ::io::substrait::Extensions_Mapping_FunctionMapping_Option* Arena::CreateMaybeMessage<::io::substrait::Extensions_Mapping_FunctionMapping_Option>(Arena*);
template<> ::io::substrait::Extensions_Mapping_TypeMapping* Arena::CreateMaybeMessage<::io::substrait::Extensions_Mapping_TypeMapping>(Arena*);
template<> ::io::substrait::Extensions_TypeId* Arena::CreateMaybeMessage<::io::substrait::Extensions_TypeId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace substrait {

// ===================================================================

class Extensions_Extension_TypeExtension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Extension.TypeExtension) */ {
 public:
  inline Extensions_Extension_TypeExtension() : Extensions_Extension_TypeExtension(nullptr) {}
  ~Extensions_Extension_TypeExtension() override;
  explicit constexpr Extensions_Extension_TypeExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Extension_TypeExtension(const Extensions_Extension_TypeExtension& from);
  Extensions_Extension_TypeExtension(Extensions_Extension_TypeExtension&& from) noexcept
    : Extensions_Extension_TypeExtension() {
    *this = ::std::move(from);
  }

  inline Extensions_Extension_TypeExtension& operator=(const Extensions_Extension_TypeExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Extension_TypeExtension& operator=(Extensions_Extension_TypeExtension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Extension_TypeExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_Extension_TypeExtension* internal_default_instance() {
    return reinterpret_cast<const Extensions_Extension_TypeExtension*>(
               &_Extensions_Extension_TypeExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Extensions_Extension_TypeExtension& a, Extensions_Extension_TypeExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Extension_TypeExtension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Extension_TypeExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Extension_TypeExtension* New() const final {
    return CreateMaybeMessage<Extensions_Extension_TypeExtension>(nullptr);
  }

  Extensions_Extension_TypeExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Extension_TypeExtension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Extension_TypeExtension& from);
  void MergeFrom(const Extensions_Extension_TypeExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Extension_TypeExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Extension.TypeExtension";
  }
  protected:
  explicit Extensions_Extension_TypeExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGitUriFieldNumber = 1,
  };
  // string git_uri = 1;
  void clear_git_uri();
  const std::string& git_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_git_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_git_uri();
  std::string* release_git_uri();
  void set_allocated_git_uri(std::string* git_uri);
  private:
  const std::string& _internal_git_uri() const;
  void _internal_set_git_uri(const std::string& value);
  std::string* _internal_mutable_git_uri();
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Extension.TypeExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Extension_FunctionExtension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Extension.FunctionExtension) */ {
 public:
  inline Extensions_Extension_FunctionExtension() : Extensions_Extension_FunctionExtension(nullptr) {}
  ~Extensions_Extension_FunctionExtension() override;
  explicit constexpr Extensions_Extension_FunctionExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Extension_FunctionExtension(const Extensions_Extension_FunctionExtension& from);
  Extensions_Extension_FunctionExtension(Extensions_Extension_FunctionExtension&& from) noexcept
    : Extensions_Extension_FunctionExtension() {
    *this = ::std::move(from);
  }

  inline Extensions_Extension_FunctionExtension& operator=(const Extensions_Extension_FunctionExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Extension_FunctionExtension& operator=(Extensions_Extension_FunctionExtension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Extension_FunctionExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_Extension_FunctionExtension* internal_default_instance() {
    return reinterpret_cast<const Extensions_Extension_FunctionExtension*>(
               &_Extensions_Extension_FunctionExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Extensions_Extension_FunctionExtension& a, Extensions_Extension_FunctionExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Extension_FunctionExtension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Extension_FunctionExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Extension_FunctionExtension* New() const final {
    return CreateMaybeMessage<Extensions_Extension_FunctionExtension>(nullptr);
  }

  Extensions_Extension_FunctionExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Extension_FunctionExtension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Extension_FunctionExtension& from);
  void MergeFrom(const Extensions_Extension_FunctionExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Extension_FunctionExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Extension.FunctionExtension";
  }
  protected:
  explicit Extensions_Extension_FunctionExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGitUriFieldNumber = 1,
  };
  // string git_uri = 1;
  void clear_git_uri();
  const std::string& git_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_git_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_git_uri();
  std::string* release_git_uri();
  void set_allocated_git_uri(std::string* git_uri);
  private:
  const std::string& _internal_git_uri() const;
  void _internal_set_git_uri(const std::string& value);
  std::string* _internal_mutable_git_uri();
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Extension.FunctionExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Extension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Extension) */ {
 public:
  inline Extensions_Extension() : Extensions_Extension(nullptr) {}
  ~Extensions_Extension() override;
  explicit constexpr Extensions_Extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Extension(const Extensions_Extension& from);
  Extensions_Extension(Extensions_Extension&& from) noexcept
    : Extensions_Extension() {
    *this = ::std::move(from);
  }

  inline Extensions_Extension& operator=(const Extensions_Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Extension& operator=(Extensions_Extension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Extension& default_instance() {
    return *internal_default_instance();
  }
  enum ExtensionTypeCase {
    kTypeExtension = 2,
    kFunctionExtension = 3,
    EXTENSION_TYPE_NOT_SET = 0,
  };

  static inline const Extensions_Extension* internal_default_instance() {
    return reinterpret_cast<const Extensions_Extension*>(
               &_Extensions_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Extensions_Extension& a, Extensions_Extension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Extension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Extension* New() const final {
    return CreateMaybeMessage<Extensions_Extension>(nullptr);
  }

  Extensions_Extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Extension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Extension& from);
  void MergeFrom(const Extensions_Extension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Extension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Extension";
  }
  protected:
  explicit Extensions_Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Extensions_Extension_TypeExtension TypeExtension;
  typedef Extensions_Extension_FunctionExtension FunctionExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionIdFieldNumber = 1,
    kTypeExtensionFieldNumber = 2,
    kFunctionExtensionFieldNumber = 3,
  };
  // .io.substrait.Extensions.ExtensionId extension_id = 1;
  bool has_extension_id() const;
  private:
  bool _internal_has_extension_id() const;
  public:
  void clear_extension_id();
  const ::io::substrait::Extensions_ExtensionId& extension_id() const;
  ::io::substrait::Extensions_ExtensionId* release_extension_id();
  ::io::substrait::Extensions_ExtensionId* mutable_extension_id();
  void set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id);
  private:
  const ::io::substrait::Extensions_ExtensionId& _internal_extension_id() const;
  ::io::substrait::Extensions_ExtensionId* _internal_mutable_extension_id();
  public:
  void unsafe_arena_set_allocated_extension_id(
      ::io::substrait::Extensions_ExtensionId* extension_id);
  ::io::substrait::Extensions_ExtensionId* unsafe_arena_release_extension_id();

  // .io.substrait.Extensions.Extension.TypeExtension type_extension = 2;
  bool has_type_extension() const;
  private:
  bool _internal_has_type_extension() const;
  public:
  void clear_type_extension();
  const ::io::substrait::Extensions_Extension_TypeExtension& type_extension() const;
  ::io::substrait::Extensions_Extension_TypeExtension* release_type_extension();
  ::io::substrait::Extensions_Extension_TypeExtension* mutable_type_extension();
  void set_allocated_type_extension(::io::substrait::Extensions_Extension_TypeExtension* type_extension);
  private:
  const ::io::substrait::Extensions_Extension_TypeExtension& _internal_type_extension() const;
  ::io::substrait::Extensions_Extension_TypeExtension* _internal_mutable_type_extension();
  public:
  void unsafe_arena_set_allocated_type_extension(
      ::io::substrait::Extensions_Extension_TypeExtension* type_extension);
  ::io::substrait::Extensions_Extension_TypeExtension* unsafe_arena_release_type_extension();

  // .io.substrait.Extensions.Extension.FunctionExtension function_extension = 3;
  bool has_function_extension() const;
  private:
  bool _internal_has_function_extension() const;
  public:
  void clear_function_extension();
  const ::io::substrait::Extensions_Extension_FunctionExtension& function_extension() const;
  ::io::substrait::Extensions_Extension_FunctionExtension* release_function_extension();
  ::io::substrait::Extensions_Extension_FunctionExtension* mutable_function_extension();
  void set_allocated_function_extension(::io::substrait::Extensions_Extension_FunctionExtension* function_extension);
  private:
  const ::io::substrait::Extensions_Extension_FunctionExtension& _internal_function_extension() const;
  ::io::substrait::Extensions_Extension_FunctionExtension* _internal_mutable_function_extension();
  public:
  void unsafe_arena_set_allocated_function_extension(
      ::io::substrait::Extensions_Extension_FunctionExtension* function_extension);
  ::io::substrait::Extensions_Extension_FunctionExtension* unsafe_arena_release_function_extension();

  void clear_extension_type();
  ExtensionTypeCase extension_type_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Extension)
 private:
  class _Internal;
  void set_has_type_extension();
  void set_has_function_extension();

  inline bool has_extension_type() const;
  inline void clear_has_extension_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::substrait::Extensions_ExtensionId* extension_id_;
  union ExtensionTypeUnion {
    constexpr ExtensionTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::substrait::Extensions_Extension_TypeExtension* type_extension_;
    ::io::substrait::Extensions_Extension_FunctionExtension* function_extension_;
  } extension_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Mapping_TypeMapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Mapping.TypeMapping) */ {
 public:
  inline Extensions_Mapping_TypeMapping() : Extensions_Mapping_TypeMapping(nullptr) {}
  ~Extensions_Mapping_TypeMapping() override;
  explicit constexpr Extensions_Mapping_TypeMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Mapping_TypeMapping(const Extensions_Mapping_TypeMapping& from);
  Extensions_Mapping_TypeMapping(Extensions_Mapping_TypeMapping&& from) noexcept
    : Extensions_Mapping_TypeMapping() {
    *this = ::std::move(from);
  }

  inline Extensions_Mapping_TypeMapping& operator=(const Extensions_Mapping_TypeMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Mapping_TypeMapping& operator=(Extensions_Mapping_TypeMapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Mapping_TypeMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_Mapping_TypeMapping* internal_default_instance() {
    return reinterpret_cast<const Extensions_Mapping_TypeMapping*>(
               &_Extensions_Mapping_TypeMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Extensions_Mapping_TypeMapping& a, Extensions_Mapping_TypeMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Mapping_TypeMapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Mapping_TypeMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Mapping_TypeMapping* New() const final {
    return CreateMaybeMessage<Extensions_Mapping_TypeMapping>(nullptr);
  }

  Extensions_Mapping_TypeMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Mapping_TypeMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Mapping_TypeMapping& from);
  void MergeFrom(const Extensions_Mapping_TypeMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Mapping_TypeMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Mapping.TypeMapping";
  }
  protected:
  explicit Extensions_Mapping_TypeMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kTypeIdFieldNumber = 1,
    kExtensionIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .io.substrait.Extensions.TypeId type_id = 1;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  const ::io::substrait::Extensions_TypeId& type_id() const;
  ::io::substrait::Extensions_TypeId* release_type_id();
  ::io::substrait::Extensions_TypeId* mutable_type_id();
  void set_allocated_type_id(::io::substrait::Extensions_TypeId* type_id);
  private:
  const ::io::substrait::Extensions_TypeId& _internal_type_id() const;
  ::io::substrait::Extensions_TypeId* _internal_mutable_type_id();
  public:
  void unsafe_arena_set_allocated_type_id(
      ::io::substrait::Extensions_TypeId* type_id);
  ::io::substrait::Extensions_TypeId* unsafe_arena_release_type_id();

  // .io.substrait.Extensions.ExtensionId extension_id = 2;
  bool has_extension_id() const;
  private:
  bool _internal_has_extension_id() const;
  public:
  void clear_extension_id();
  const ::io::substrait::Extensions_ExtensionId& extension_id() const;
  ::io::substrait::Extensions_ExtensionId* release_extension_id();
  ::io::substrait::Extensions_ExtensionId* mutable_extension_id();
  void set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id);
  private:
  const ::io::substrait::Extensions_ExtensionId& _internal_extension_id() const;
  ::io::substrait::Extensions_ExtensionId* _internal_mutable_extension_id();
  public:
  void unsafe_arena_set_allocated_extension_id(
      ::io::substrait::Extensions_ExtensionId* extension_id);
  ::io::substrait::Extensions_ExtensionId* unsafe_arena_release_extension_id();

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Mapping.TypeMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::io::substrait::Extensions_TypeId* type_id_;
  ::io::substrait::Extensions_ExtensionId* extension_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Mapping_FunctionMapping_Option PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Mapping.FunctionMapping.Option) */ {
 public:
  inline Extensions_Mapping_FunctionMapping_Option() : Extensions_Mapping_FunctionMapping_Option(nullptr) {}
  ~Extensions_Mapping_FunctionMapping_Option() override;
  explicit constexpr Extensions_Mapping_FunctionMapping_Option(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Mapping_FunctionMapping_Option(const Extensions_Mapping_FunctionMapping_Option& from);
  Extensions_Mapping_FunctionMapping_Option(Extensions_Mapping_FunctionMapping_Option&& from) noexcept
    : Extensions_Mapping_FunctionMapping_Option() {
    *this = ::std::move(from);
  }

  inline Extensions_Mapping_FunctionMapping_Option& operator=(const Extensions_Mapping_FunctionMapping_Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Mapping_FunctionMapping_Option& operator=(Extensions_Mapping_FunctionMapping_Option&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Mapping_FunctionMapping_Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_Mapping_FunctionMapping_Option* internal_default_instance() {
    return reinterpret_cast<const Extensions_Mapping_FunctionMapping_Option*>(
               &_Extensions_Mapping_FunctionMapping_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Extensions_Mapping_FunctionMapping_Option& a, Extensions_Mapping_FunctionMapping_Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Mapping_FunctionMapping_Option* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Mapping_FunctionMapping_Option* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Mapping_FunctionMapping_Option* New() const final {
    return CreateMaybeMessage<Extensions_Mapping_FunctionMapping_Option>(nullptr);
  }

  Extensions_Mapping_FunctionMapping_Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Mapping_FunctionMapping_Option>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Mapping_FunctionMapping_Option& from);
  void MergeFrom(const Extensions_Mapping_FunctionMapping_Option& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Mapping_FunctionMapping_Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Mapping.FunctionMapping.Option";
  }
  protected:
  explicit Extensions_Mapping_FunctionMapping_Option(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Mapping.FunctionMapping.Option)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Mapping_FunctionMapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Mapping.FunctionMapping) */ {
 public:
  inline Extensions_Mapping_FunctionMapping() : Extensions_Mapping_FunctionMapping(nullptr) {}
  ~Extensions_Mapping_FunctionMapping() override;
  explicit constexpr Extensions_Mapping_FunctionMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Mapping_FunctionMapping(const Extensions_Mapping_FunctionMapping& from);
  Extensions_Mapping_FunctionMapping(Extensions_Mapping_FunctionMapping&& from) noexcept
    : Extensions_Mapping_FunctionMapping() {
    *this = ::std::move(from);
  }

  inline Extensions_Mapping_FunctionMapping& operator=(const Extensions_Mapping_FunctionMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Mapping_FunctionMapping& operator=(Extensions_Mapping_FunctionMapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Mapping_FunctionMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_Mapping_FunctionMapping* internal_default_instance() {
    return reinterpret_cast<const Extensions_Mapping_FunctionMapping*>(
               &_Extensions_Mapping_FunctionMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Extensions_Mapping_FunctionMapping& a, Extensions_Mapping_FunctionMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Mapping_FunctionMapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Mapping_FunctionMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Mapping_FunctionMapping* New() const final {
    return CreateMaybeMessage<Extensions_Mapping_FunctionMapping>(nullptr);
  }

  Extensions_Mapping_FunctionMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Mapping_FunctionMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Mapping_FunctionMapping& from);
  void MergeFrom(const Extensions_Mapping_FunctionMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Mapping_FunctionMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Mapping.FunctionMapping";
  }
  protected:
  explicit Extensions_Mapping_FunctionMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Extensions_Mapping_FunctionMapping_Option Option;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 5,
    kNameFieldNumber = 3,
    kFunctionIdFieldNumber = 1,
    kExtensionIdFieldNumber = 2,
  };
  // repeated .io.substrait.Extensions.Mapping.FunctionMapping.Option options = 5;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::io::substrait::Extensions_Mapping_FunctionMapping_Option* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping_FunctionMapping_Option >*
      mutable_options();
  private:
  const ::io::substrait::Extensions_Mapping_FunctionMapping_Option& _internal_options(int index) const;
  ::io::substrait::Extensions_Mapping_FunctionMapping_Option* _internal_add_options();
  public:
  const ::io::substrait::Extensions_Mapping_FunctionMapping_Option& options(int index) const;
  ::io::substrait::Extensions_Mapping_FunctionMapping_Option* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping_FunctionMapping_Option >&
      options() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .io.substrait.Extensions.FunctionId function_id = 1;
  bool has_function_id() const;
  private:
  bool _internal_has_function_id() const;
  public:
  void clear_function_id();
  const ::io::substrait::Extensions_FunctionId& function_id() const;
  ::io::substrait::Extensions_FunctionId* release_function_id();
  ::io::substrait::Extensions_FunctionId* mutable_function_id();
  void set_allocated_function_id(::io::substrait::Extensions_FunctionId* function_id);
  private:
  const ::io::substrait::Extensions_FunctionId& _internal_function_id() const;
  ::io::substrait::Extensions_FunctionId* _internal_mutable_function_id();
  public:
  void unsafe_arena_set_allocated_function_id(
      ::io::substrait::Extensions_FunctionId* function_id);
  ::io::substrait::Extensions_FunctionId* unsafe_arena_release_function_id();

  // .io.substrait.Extensions.ExtensionId extension_id = 2;
  bool has_extension_id() const;
  private:
  bool _internal_has_extension_id() const;
  public:
  void clear_extension_id();
  const ::io::substrait::Extensions_ExtensionId& extension_id() const;
  ::io::substrait::Extensions_ExtensionId* release_extension_id();
  ::io::substrait::Extensions_ExtensionId* mutable_extension_id();
  void set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id);
  private:
  const ::io::substrait::Extensions_ExtensionId& _internal_extension_id() const;
  ::io::substrait::Extensions_ExtensionId* _internal_mutable_extension_id();
  public:
  void unsafe_arena_set_allocated_extension_id(
      ::io::substrait::Extensions_ExtensionId* extension_id);
  ::io::substrait::Extensions_ExtensionId* unsafe_arena_release_extension_id();

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Mapping.FunctionMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping_FunctionMapping_Option > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::io::substrait::Extensions_FunctionId* function_id_;
  ::io::substrait::Extensions_ExtensionId* extension_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_Mapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.Mapping) */ {
 public:
  inline Extensions_Mapping() : Extensions_Mapping(nullptr) {}
  ~Extensions_Mapping() override;
  explicit constexpr Extensions_Mapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_Mapping(const Extensions_Mapping& from);
  Extensions_Mapping(Extensions_Mapping&& from) noexcept
    : Extensions_Mapping() {
    *this = ::std::move(from);
  }

  inline Extensions_Mapping& operator=(const Extensions_Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_Mapping& operator=(Extensions_Mapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_Mapping& default_instance() {
    return *internal_default_instance();
  }
  enum MappingTypeCase {
    kTypeMapping = 1,
    kFunctionMapping = 2,
    MAPPING_TYPE_NOT_SET = 0,
  };

  static inline const Extensions_Mapping* internal_default_instance() {
    return reinterpret_cast<const Extensions_Mapping*>(
               &_Extensions_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Extensions_Mapping& a, Extensions_Mapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_Mapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_Mapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_Mapping* New() const final {
    return CreateMaybeMessage<Extensions_Mapping>(nullptr);
  }

  Extensions_Mapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_Mapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_Mapping& from);
  void MergeFrom(const Extensions_Mapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_Mapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.Mapping";
  }
  protected:
  explicit Extensions_Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Extensions_Mapping_TypeMapping TypeMapping;
  typedef Extensions_Mapping_FunctionMapping FunctionMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeMappingFieldNumber = 1,
    kFunctionMappingFieldNumber = 2,
  };
  // .io.substrait.Extensions.Mapping.TypeMapping type_mapping = 1;
  bool has_type_mapping() const;
  private:
  bool _internal_has_type_mapping() const;
  public:
  void clear_type_mapping();
  const ::io::substrait::Extensions_Mapping_TypeMapping& type_mapping() const;
  ::io::substrait::Extensions_Mapping_TypeMapping* release_type_mapping();
  ::io::substrait::Extensions_Mapping_TypeMapping* mutable_type_mapping();
  void set_allocated_type_mapping(::io::substrait::Extensions_Mapping_TypeMapping* type_mapping);
  private:
  const ::io::substrait::Extensions_Mapping_TypeMapping& _internal_type_mapping() const;
  ::io::substrait::Extensions_Mapping_TypeMapping* _internal_mutable_type_mapping();
  public:
  void unsafe_arena_set_allocated_type_mapping(
      ::io::substrait::Extensions_Mapping_TypeMapping* type_mapping);
  ::io::substrait::Extensions_Mapping_TypeMapping* unsafe_arena_release_type_mapping();

  // .io.substrait.Extensions.Mapping.FunctionMapping function_mapping = 2;
  bool has_function_mapping() const;
  private:
  bool _internal_has_function_mapping() const;
  public:
  void clear_function_mapping();
  const ::io::substrait::Extensions_Mapping_FunctionMapping& function_mapping() const;
  ::io::substrait::Extensions_Mapping_FunctionMapping* release_function_mapping();
  ::io::substrait::Extensions_Mapping_FunctionMapping* mutable_function_mapping();
  void set_allocated_function_mapping(::io::substrait::Extensions_Mapping_FunctionMapping* function_mapping);
  private:
  const ::io::substrait::Extensions_Mapping_FunctionMapping& _internal_function_mapping() const;
  ::io::substrait::Extensions_Mapping_FunctionMapping* _internal_mutable_function_mapping();
  public:
  void unsafe_arena_set_allocated_function_mapping(
      ::io::substrait::Extensions_Mapping_FunctionMapping* function_mapping);
  ::io::substrait::Extensions_Mapping_FunctionMapping* unsafe_arena_release_function_mapping();

  void clear_mapping_type();
  MappingTypeCase mapping_type_case() const;
  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.Mapping)
 private:
  class _Internal;
  void set_has_type_mapping();
  void set_has_function_mapping();

  inline bool has_mapping_type() const;
  inline void clear_has_mapping_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MappingTypeUnion {
    constexpr MappingTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::substrait::Extensions_Mapping_TypeMapping* type_mapping_;
    ::io::substrait::Extensions_Mapping_FunctionMapping* function_mapping_;
  } mapping_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_ExtensionId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.ExtensionId) */ {
 public:
  inline Extensions_ExtensionId() : Extensions_ExtensionId(nullptr) {}
  ~Extensions_ExtensionId() override;
  explicit constexpr Extensions_ExtensionId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_ExtensionId(const Extensions_ExtensionId& from);
  Extensions_ExtensionId(Extensions_ExtensionId&& from) noexcept
    : Extensions_ExtensionId() {
    *this = ::std::move(from);
  }

  inline Extensions_ExtensionId& operator=(const Extensions_ExtensionId& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_ExtensionId& operator=(Extensions_ExtensionId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_ExtensionId& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_ExtensionId* internal_default_instance() {
    return reinterpret_cast<const Extensions_ExtensionId*>(
               &_Extensions_ExtensionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Extensions_ExtensionId& a, Extensions_ExtensionId& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_ExtensionId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_ExtensionId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_ExtensionId* New() const final {
    return CreateMaybeMessage<Extensions_ExtensionId>(nullptr);
  }

  Extensions_ExtensionId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_ExtensionId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_ExtensionId& from);
  void MergeFrom(const Extensions_ExtensionId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_ExtensionId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.ExtensionId";
  }
  protected:
  explicit Extensions_ExtensionId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.ExtensionId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_FunctionId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.FunctionId) */ {
 public:
  inline Extensions_FunctionId() : Extensions_FunctionId(nullptr) {}
  ~Extensions_FunctionId() override;
  explicit constexpr Extensions_FunctionId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_FunctionId(const Extensions_FunctionId& from);
  Extensions_FunctionId(Extensions_FunctionId&& from) noexcept
    : Extensions_FunctionId() {
    *this = ::std::move(from);
  }

  inline Extensions_FunctionId& operator=(const Extensions_FunctionId& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_FunctionId& operator=(Extensions_FunctionId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_FunctionId& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_FunctionId* internal_default_instance() {
    return reinterpret_cast<const Extensions_FunctionId*>(
               &_Extensions_FunctionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Extensions_FunctionId& a, Extensions_FunctionId& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_FunctionId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_FunctionId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_FunctionId* New() const final {
    return CreateMaybeMessage<Extensions_FunctionId>(nullptr);
  }

  Extensions_FunctionId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_FunctionId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_FunctionId& from);
  void MergeFrom(const Extensions_FunctionId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_FunctionId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.FunctionId";
  }
  protected:
  explicit Extensions_FunctionId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.FunctionId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions_TypeId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions.TypeId) */ {
 public:
  inline Extensions_TypeId() : Extensions_TypeId(nullptr) {}
  ~Extensions_TypeId() override;
  explicit constexpr Extensions_TypeId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions_TypeId(const Extensions_TypeId& from);
  Extensions_TypeId(Extensions_TypeId&& from) noexcept
    : Extensions_TypeId() {
    *this = ::std::move(from);
  }

  inline Extensions_TypeId& operator=(const Extensions_TypeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions_TypeId& operator=(Extensions_TypeId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions_TypeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions_TypeId* internal_default_instance() {
    return reinterpret_cast<const Extensions_TypeId*>(
               &_Extensions_TypeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Extensions_TypeId& a, Extensions_TypeId& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions_TypeId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions_TypeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions_TypeId* New() const final {
    return CreateMaybeMessage<Extensions_TypeId>(nullptr);
  }

  Extensions_TypeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions_TypeId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions_TypeId& from);
  void MergeFrom(const Extensions_TypeId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions_TypeId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions.TypeId";
  }
  protected:
  explicit Extensions_TypeId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions.TypeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Extensions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.substrait.Extensions) */ {
 public:
  inline Extensions() : Extensions(nullptr) {}
  ~Extensions() override;
  explicit constexpr Extensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extensions(const Extensions& from);
  Extensions(Extensions&& from) noexcept
    : Extensions() {
    *this = ::std::move(from);
  }

  inline Extensions& operator=(const Extensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extensions& operator=(Extensions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extensions* internal_default_instance() {
    return reinterpret_cast<const Extensions*>(
               &_Extensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Extensions& a, Extensions& b) {
    a.Swap(&b);
  }
  inline void Swap(Extensions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extensions* New() const final {
    return CreateMaybeMessage<Extensions>(nullptr);
  }

  Extensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extensions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extensions& from);
  void MergeFrom(const Extensions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.substrait.Extensions";
  }
  protected:
  explicit Extensions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Extensions_Extension Extension;
  typedef Extensions_Mapping Mapping;
  typedef Extensions_ExtensionId ExtensionId;
  typedef Extensions_FunctionId FunctionId;
  typedef Extensions_TypeId TypeId;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.substrait.Extensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Extensions_Extension_TypeExtension

// string git_uri = 1;
inline void Extensions_Extension_TypeExtension::clear_git_uri() {
  git_uri_.ClearToEmpty();
}
inline const std::string& Extensions_Extension_TypeExtension::git_uri() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Extension.TypeExtension.git_uri)
  return _internal_git_uri();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Extension_TypeExtension::set_git_uri(ArgT0&& arg0, ArgT... args) {
 
 git_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Extension.TypeExtension.git_uri)
}
inline std::string* Extensions_Extension_TypeExtension::mutable_git_uri() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Extension.TypeExtension.git_uri)
  return _internal_mutable_git_uri();
}
inline const std::string& Extensions_Extension_TypeExtension::_internal_git_uri() const {
  return git_uri_.Get();
}
inline void Extensions_Extension_TypeExtension::_internal_set_git_uri(const std::string& value) {
  
  git_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Extension_TypeExtension::_internal_mutable_git_uri() {
  
  return git_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Extension_TypeExtension::release_git_uri() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Extension.TypeExtension.git_uri)
  return git_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Extension_TypeExtension::set_allocated_git_uri(std::string* git_uri) {
  if (git_uri != nullptr) {
    
  } else {
    
  }
  git_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Extension.TypeExtension.git_uri)
}

// -------------------------------------------------------------------

// Extensions_Extension_FunctionExtension

// string git_uri = 1;
inline void Extensions_Extension_FunctionExtension::clear_git_uri() {
  git_uri_.ClearToEmpty();
}
inline const std::string& Extensions_Extension_FunctionExtension::git_uri() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Extension.FunctionExtension.git_uri)
  return _internal_git_uri();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Extension_FunctionExtension::set_git_uri(ArgT0&& arg0, ArgT... args) {
 
 git_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Extension.FunctionExtension.git_uri)
}
inline std::string* Extensions_Extension_FunctionExtension::mutable_git_uri() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Extension.FunctionExtension.git_uri)
  return _internal_mutable_git_uri();
}
inline const std::string& Extensions_Extension_FunctionExtension::_internal_git_uri() const {
  return git_uri_.Get();
}
inline void Extensions_Extension_FunctionExtension::_internal_set_git_uri(const std::string& value) {
  
  git_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Extension_FunctionExtension::_internal_mutable_git_uri() {
  
  return git_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Extension_FunctionExtension::release_git_uri() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Extension.FunctionExtension.git_uri)
  return git_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Extension_FunctionExtension::set_allocated_git_uri(std::string* git_uri) {
  if (git_uri != nullptr) {
    
  } else {
    
  }
  git_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Extension.FunctionExtension.git_uri)
}

// -------------------------------------------------------------------

// Extensions_Extension

// .io.substrait.Extensions.ExtensionId extension_id = 1;
inline bool Extensions_Extension::_internal_has_extension_id() const {
  return this != internal_default_instance() && extension_id_ != nullptr;
}
inline bool Extensions_Extension::has_extension_id() const {
  return _internal_has_extension_id();
}
inline void Extensions_Extension::clear_extension_id() {
  if (GetArena() == nullptr && extension_id_ != nullptr) {
    delete extension_id_;
  }
  extension_id_ = nullptr;
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Extension::_internal_extension_id() const {
  const ::io::substrait::Extensions_ExtensionId* p = extension_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Extensions_ExtensionId&>(
      ::io::substrait::_Extensions_ExtensionId_default_instance_);
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Extension::extension_id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Extension.extension_id)
  return _internal_extension_id();
}
inline void Extensions_Extension::unsafe_arena_set_allocated_extension_id(
    ::io::substrait::Extensions_ExtensionId* extension_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_id_);
  }
  extension_id_ = extension_id;
  if (extension_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Extension.extension_id)
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Extension::release_extension_id() {
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Extension::unsafe_arena_release_extension_id() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Extension.extension_id)
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Extension::_internal_mutable_extension_id() {
  
  if (extension_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Extensions_ExtensionId>(GetArena());
    extension_id_ = p;
  }
  return extension_id_;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Extension::mutable_extension_id() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Extension.extension_id)
  return _internal_mutable_extension_id();
}
inline void Extensions_Extension::set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extension_id_;
  }
  if (extension_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_id);
    if (message_arena != submessage_arena) {
      extension_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_id, submessage_arena);
    }
    
  } else {
    
  }
  extension_id_ = extension_id;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Extension.extension_id)
}

// .io.substrait.Extensions.Extension.TypeExtension type_extension = 2;
inline bool Extensions_Extension::_internal_has_type_extension() const {
  return extension_type_case() == kTypeExtension;
}
inline bool Extensions_Extension::has_type_extension() const {
  return _internal_has_type_extension();
}
inline void Extensions_Extension::set_has_type_extension() {
  _oneof_case_[0] = kTypeExtension;
}
inline void Extensions_Extension::clear_type_extension() {
  if (_internal_has_type_extension()) {
    if (GetArena() == nullptr) {
      delete extension_type_.type_extension_;
    }
    clear_has_extension_type();
  }
}
inline ::io::substrait::Extensions_Extension_TypeExtension* Extensions_Extension::release_type_extension() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Extension.type_extension)
  if (_internal_has_type_extension()) {
    clear_has_extension_type();
      ::io::substrait::Extensions_Extension_TypeExtension* temp = extension_type_.type_extension_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    extension_type_.type_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::Extensions_Extension_TypeExtension& Extensions_Extension::_internal_type_extension() const {
  return _internal_has_type_extension()
      ? *extension_type_.type_extension_
      : reinterpret_cast< ::io::substrait::Extensions_Extension_TypeExtension&>(::io::substrait::_Extensions_Extension_TypeExtension_default_instance_);
}
inline const ::io::substrait::Extensions_Extension_TypeExtension& Extensions_Extension::type_extension() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Extension.type_extension)
  return _internal_type_extension();
}
inline ::io::substrait::Extensions_Extension_TypeExtension* Extensions_Extension::unsafe_arena_release_type_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Extensions.Extension.type_extension)
  if (_internal_has_type_extension()) {
    clear_has_extension_type();
    ::io::substrait::Extensions_Extension_TypeExtension* temp = extension_type_.type_extension_;
    extension_type_.type_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extensions_Extension::unsafe_arena_set_allocated_type_extension(::io::substrait::Extensions_Extension_TypeExtension* type_extension) {
  clear_extension_type();
  if (type_extension) {
    set_has_type_extension();
    extension_type_.type_extension_ = type_extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Extension.type_extension)
}
inline ::io::substrait::Extensions_Extension_TypeExtension* Extensions_Extension::_internal_mutable_type_extension() {
  if (!_internal_has_type_extension()) {
    clear_extension_type();
    set_has_type_extension();
    extension_type_.type_extension_ = CreateMaybeMessage< ::io::substrait::Extensions_Extension_TypeExtension >(GetArena());
  }
  return extension_type_.type_extension_;
}
inline ::io::substrait::Extensions_Extension_TypeExtension* Extensions_Extension::mutable_type_extension() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Extension.type_extension)
  return _internal_mutable_type_extension();
}

// .io.substrait.Extensions.Extension.FunctionExtension function_extension = 3;
inline bool Extensions_Extension::_internal_has_function_extension() const {
  return extension_type_case() == kFunctionExtension;
}
inline bool Extensions_Extension::has_function_extension() const {
  return _internal_has_function_extension();
}
inline void Extensions_Extension::set_has_function_extension() {
  _oneof_case_[0] = kFunctionExtension;
}
inline void Extensions_Extension::clear_function_extension() {
  if (_internal_has_function_extension()) {
    if (GetArena() == nullptr) {
      delete extension_type_.function_extension_;
    }
    clear_has_extension_type();
  }
}
inline ::io::substrait::Extensions_Extension_FunctionExtension* Extensions_Extension::release_function_extension() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Extension.function_extension)
  if (_internal_has_function_extension()) {
    clear_has_extension_type();
      ::io::substrait::Extensions_Extension_FunctionExtension* temp = extension_type_.function_extension_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    extension_type_.function_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::Extensions_Extension_FunctionExtension& Extensions_Extension::_internal_function_extension() const {
  return _internal_has_function_extension()
      ? *extension_type_.function_extension_
      : reinterpret_cast< ::io::substrait::Extensions_Extension_FunctionExtension&>(::io::substrait::_Extensions_Extension_FunctionExtension_default_instance_);
}
inline const ::io::substrait::Extensions_Extension_FunctionExtension& Extensions_Extension::function_extension() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Extension.function_extension)
  return _internal_function_extension();
}
inline ::io::substrait::Extensions_Extension_FunctionExtension* Extensions_Extension::unsafe_arena_release_function_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Extensions.Extension.function_extension)
  if (_internal_has_function_extension()) {
    clear_has_extension_type();
    ::io::substrait::Extensions_Extension_FunctionExtension* temp = extension_type_.function_extension_;
    extension_type_.function_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extensions_Extension::unsafe_arena_set_allocated_function_extension(::io::substrait::Extensions_Extension_FunctionExtension* function_extension) {
  clear_extension_type();
  if (function_extension) {
    set_has_function_extension();
    extension_type_.function_extension_ = function_extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Extension.function_extension)
}
inline ::io::substrait::Extensions_Extension_FunctionExtension* Extensions_Extension::_internal_mutable_function_extension() {
  if (!_internal_has_function_extension()) {
    clear_extension_type();
    set_has_function_extension();
    extension_type_.function_extension_ = CreateMaybeMessage< ::io::substrait::Extensions_Extension_FunctionExtension >(GetArena());
  }
  return extension_type_.function_extension_;
}
inline ::io::substrait::Extensions_Extension_FunctionExtension* Extensions_Extension::mutable_function_extension() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Extension.function_extension)
  return _internal_mutable_function_extension();
}

inline bool Extensions_Extension::has_extension_type() const {
  return extension_type_case() != EXTENSION_TYPE_NOT_SET;
}
inline void Extensions_Extension::clear_has_extension_type() {
  _oneof_case_[0] = EXTENSION_TYPE_NOT_SET;
}
inline Extensions_Extension::ExtensionTypeCase Extensions_Extension::extension_type_case() const {
  return Extensions_Extension::ExtensionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Extensions_Mapping_TypeMapping

// .io.substrait.Extensions.TypeId type_id = 1;
inline bool Extensions_Mapping_TypeMapping::_internal_has_type_id() const {
  return this != internal_default_instance() && type_id_ != nullptr;
}
inline bool Extensions_Mapping_TypeMapping::has_type_id() const {
  return _internal_has_type_id();
}
inline void Extensions_Mapping_TypeMapping::clear_type_id() {
  if (GetArena() == nullptr && type_id_ != nullptr) {
    delete type_id_;
  }
  type_id_ = nullptr;
}
inline const ::io::substrait::Extensions_TypeId& Extensions_Mapping_TypeMapping::_internal_type_id() const {
  const ::io::substrait::Extensions_TypeId* p = type_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Extensions_TypeId&>(
      ::io::substrait::_Extensions_TypeId_default_instance_);
}
inline const ::io::substrait::Extensions_TypeId& Extensions_Mapping_TypeMapping::type_id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.TypeMapping.type_id)
  return _internal_type_id();
}
inline void Extensions_Mapping_TypeMapping::unsafe_arena_set_allocated_type_id(
    ::io::substrait::Extensions_TypeId* type_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_id_);
  }
  type_id_ = type_id;
  if (type_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.TypeMapping.type_id)
}
inline ::io::substrait::Extensions_TypeId* Extensions_Mapping_TypeMapping::release_type_id() {
  
  ::io::substrait::Extensions_TypeId* temp = type_id_;
  type_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Extensions_TypeId* Extensions_Mapping_TypeMapping::unsafe_arena_release_type_id() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.TypeMapping.type_id)
  
  ::io::substrait::Extensions_TypeId* temp = type_id_;
  type_id_ = nullptr;
  return temp;
}
inline ::io::substrait::Extensions_TypeId* Extensions_Mapping_TypeMapping::_internal_mutable_type_id() {
  
  if (type_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Extensions_TypeId>(GetArena());
    type_id_ = p;
  }
  return type_id_;
}
inline ::io::substrait::Extensions_TypeId* Extensions_Mapping_TypeMapping::mutable_type_id() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.TypeMapping.type_id)
  return _internal_mutable_type_id();
}
inline void Extensions_Mapping_TypeMapping::set_allocated_type_id(::io::substrait::Extensions_TypeId* type_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_id_;
  }
  if (type_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type_id);
    if (message_arena != submessage_arena) {
      type_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_id, submessage_arena);
    }
    
  } else {
    
  }
  type_id_ = type_id;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.TypeMapping.type_id)
}

// .io.substrait.Extensions.ExtensionId extension_id = 2;
inline bool Extensions_Mapping_TypeMapping::_internal_has_extension_id() const {
  return this != internal_default_instance() && extension_id_ != nullptr;
}
inline bool Extensions_Mapping_TypeMapping::has_extension_id() const {
  return _internal_has_extension_id();
}
inline void Extensions_Mapping_TypeMapping::clear_extension_id() {
  if (GetArena() == nullptr && extension_id_ != nullptr) {
    delete extension_id_;
  }
  extension_id_ = nullptr;
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Mapping_TypeMapping::_internal_extension_id() const {
  const ::io::substrait::Extensions_ExtensionId* p = extension_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Extensions_ExtensionId&>(
      ::io::substrait::_Extensions_ExtensionId_default_instance_);
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Mapping_TypeMapping::extension_id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.TypeMapping.extension_id)
  return _internal_extension_id();
}
inline void Extensions_Mapping_TypeMapping::unsafe_arena_set_allocated_extension_id(
    ::io::substrait::Extensions_ExtensionId* extension_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_id_);
  }
  extension_id_ = extension_id;
  if (extension_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.TypeMapping.extension_id)
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_TypeMapping::release_extension_id() {
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_TypeMapping::unsafe_arena_release_extension_id() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.TypeMapping.extension_id)
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_TypeMapping::_internal_mutable_extension_id() {
  
  if (extension_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Extensions_ExtensionId>(GetArena());
    extension_id_ = p;
  }
  return extension_id_;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_TypeMapping::mutable_extension_id() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.TypeMapping.extension_id)
  return _internal_mutable_extension_id();
}
inline void Extensions_Mapping_TypeMapping::set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extension_id_;
  }
  if (extension_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_id);
    if (message_arena != submessage_arena) {
      extension_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_id, submessage_arena);
    }
    
  } else {
    
  }
  extension_id_ = extension_id;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.TypeMapping.extension_id)
}

// string name = 3;
inline void Extensions_Mapping_TypeMapping::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Extensions_Mapping_TypeMapping::name() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.TypeMapping.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Mapping_TypeMapping::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Mapping.TypeMapping.name)
}
inline std::string* Extensions_Mapping_TypeMapping::mutable_name() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.TypeMapping.name)
  return _internal_mutable_name();
}
inline const std::string& Extensions_Mapping_TypeMapping::_internal_name() const {
  return name_.Get();
}
inline void Extensions_Mapping_TypeMapping::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Mapping_TypeMapping::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Mapping_TypeMapping::release_name() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.TypeMapping.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Mapping_TypeMapping::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.TypeMapping.name)
}

// -------------------------------------------------------------------

// Extensions_Mapping_FunctionMapping_Option

// string key = 1;
inline void Extensions_Mapping_FunctionMapping_Option::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Extensions_Mapping_FunctionMapping_Option::key() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.Option.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Mapping_FunctionMapping_Option::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Mapping.FunctionMapping.Option.key)
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::mutable_key() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.Option.key)
  return _internal_mutable_key();
}
inline const std::string& Extensions_Mapping_FunctionMapping_Option::_internal_key() const {
  return key_.Get();
}
inline void Extensions_Mapping_FunctionMapping_Option::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::release_key() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.FunctionMapping.Option.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Mapping_FunctionMapping_Option::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.Option.key)
}

// string value = 2;
inline void Extensions_Mapping_FunctionMapping_Option::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Extensions_Mapping_FunctionMapping_Option::value() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.Option.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Mapping_FunctionMapping_Option::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Mapping.FunctionMapping.Option.value)
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::mutable_value() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.Option.value)
  return _internal_mutable_value();
}
inline const std::string& Extensions_Mapping_FunctionMapping_Option::_internal_value() const {
  return value_.Get();
}
inline void Extensions_Mapping_FunctionMapping_Option::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping_Option::release_value() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.FunctionMapping.Option.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Mapping_FunctionMapping_Option::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.Option.value)
}

// -------------------------------------------------------------------

// Extensions_Mapping_FunctionMapping

// .io.substrait.Extensions.FunctionId function_id = 1;
inline bool Extensions_Mapping_FunctionMapping::_internal_has_function_id() const {
  return this != internal_default_instance() && function_id_ != nullptr;
}
inline bool Extensions_Mapping_FunctionMapping::has_function_id() const {
  return _internal_has_function_id();
}
inline void Extensions_Mapping_FunctionMapping::clear_function_id() {
  if (GetArena() == nullptr && function_id_ != nullptr) {
    delete function_id_;
  }
  function_id_ = nullptr;
}
inline const ::io::substrait::Extensions_FunctionId& Extensions_Mapping_FunctionMapping::_internal_function_id() const {
  const ::io::substrait::Extensions_FunctionId* p = function_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Extensions_FunctionId&>(
      ::io::substrait::_Extensions_FunctionId_default_instance_);
}
inline const ::io::substrait::Extensions_FunctionId& Extensions_Mapping_FunctionMapping::function_id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.function_id)
  return _internal_function_id();
}
inline void Extensions_Mapping_FunctionMapping::unsafe_arena_set_allocated_function_id(
    ::io::substrait::Extensions_FunctionId* function_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_id_);
  }
  function_id_ = function_id;
  if (function_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.function_id)
}
inline ::io::substrait::Extensions_FunctionId* Extensions_Mapping_FunctionMapping::release_function_id() {
  
  ::io::substrait::Extensions_FunctionId* temp = function_id_;
  function_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Extensions_FunctionId* Extensions_Mapping_FunctionMapping::unsafe_arena_release_function_id() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.FunctionMapping.function_id)
  
  ::io::substrait::Extensions_FunctionId* temp = function_id_;
  function_id_ = nullptr;
  return temp;
}
inline ::io::substrait::Extensions_FunctionId* Extensions_Mapping_FunctionMapping::_internal_mutable_function_id() {
  
  if (function_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Extensions_FunctionId>(GetArena());
    function_id_ = p;
  }
  return function_id_;
}
inline ::io::substrait::Extensions_FunctionId* Extensions_Mapping_FunctionMapping::mutable_function_id() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.function_id)
  return _internal_mutable_function_id();
}
inline void Extensions_Mapping_FunctionMapping::set_allocated_function_id(::io::substrait::Extensions_FunctionId* function_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete function_id_;
  }
  if (function_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function_id);
    if (message_arena != submessage_arena) {
      function_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_id, submessage_arena);
    }
    
  } else {
    
  }
  function_id_ = function_id;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.function_id)
}

// .io.substrait.Extensions.ExtensionId extension_id = 2;
inline bool Extensions_Mapping_FunctionMapping::_internal_has_extension_id() const {
  return this != internal_default_instance() && extension_id_ != nullptr;
}
inline bool Extensions_Mapping_FunctionMapping::has_extension_id() const {
  return _internal_has_extension_id();
}
inline void Extensions_Mapping_FunctionMapping::clear_extension_id() {
  if (GetArena() == nullptr && extension_id_ != nullptr) {
    delete extension_id_;
  }
  extension_id_ = nullptr;
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Mapping_FunctionMapping::_internal_extension_id() const {
  const ::io::substrait::Extensions_ExtensionId* p = extension_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::substrait::Extensions_ExtensionId&>(
      ::io::substrait::_Extensions_ExtensionId_default_instance_);
}
inline const ::io::substrait::Extensions_ExtensionId& Extensions_Mapping_FunctionMapping::extension_id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.extension_id)
  return _internal_extension_id();
}
inline void Extensions_Mapping_FunctionMapping::unsafe_arena_set_allocated_extension_id(
    ::io::substrait::Extensions_ExtensionId* extension_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_id_);
  }
  extension_id_ = extension_id;
  if (extension_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.extension_id)
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_FunctionMapping::release_extension_id() {
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_FunctionMapping::unsafe_arena_release_extension_id() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.FunctionMapping.extension_id)
  
  ::io::substrait::Extensions_ExtensionId* temp = extension_id_;
  extension_id_ = nullptr;
  return temp;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_FunctionMapping::_internal_mutable_extension_id() {
  
  if (extension_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::substrait::Extensions_ExtensionId>(GetArena());
    extension_id_ = p;
  }
  return extension_id_;
}
inline ::io::substrait::Extensions_ExtensionId* Extensions_Mapping_FunctionMapping::mutable_extension_id() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.extension_id)
  return _internal_mutable_extension_id();
}
inline void Extensions_Mapping_FunctionMapping::set_allocated_extension_id(::io::substrait::Extensions_ExtensionId* extension_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extension_id_;
  }
  if (extension_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_id);
    if (message_arena != submessage_arena) {
      extension_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_id, submessage_arena);
    }
    
  } else {
    
  }
  extension_id_ = extension_id;
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.extension_id)
}

// string name = 3;
inline void Extensions_Mapping_FunctionMapping::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Extensions_Mapping_FunctionMapping::name() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Extensions_Mapping_FunctionMapping::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.Mapping.FunctionMapping.name)
}
inline std::string* Extensions_Mapping_FunctionMapping::mutable_name() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.name)
  return _internal_mutable_name();
}
inline const std::string& Extensions_Mapping_FunctionMapping::_internal_name() const {
  return name_.Get();
}
inline void Extensions_Mapping_FunctionMapping::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Extensions_Mapping_FunctionMapping::release_name() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.FunctionMapping.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extensions_Mapping_FunctionMapping::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:io.substrait.Extensions.Mapping.FunctionMapping.name)
}

// repeated .io.substrait.Extensions.Mapping.FunctionMapping.Option options = 5;
inline int Extensions_Mapping_FunctionMapping::_internal_options_size() const {
  return options_.size();
}
inline int Extensions_Mapping_FunctionMapping::options_size() const {
  return _internal_options_size();
}
inline void Extensions_Mapping_FunctionMapping::clear_options() {
  options_.Clear();
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping_Option* Extensions_Mapping_FunctionMapping::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.FunctionMapping.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping_FunctionMapping_Option >*
Extensions_Mapping_FunctionMapping::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:io.substrait.Extensions.Mapping.FunctionMapping.options)
  return &options_;
}
inline const ::io::substrait::Extensions_Mapping_FunctionMapping_Option& Extensions_Mapping_FunctionMapping::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::io::substrait::Extensions_Mapping_FunctionMapping_Option& Extensions_Mapping_FunctionMapping::options(int index) const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.FunctionMapping.options)
  return _internal_options(index);
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping_Option* Extensions_Mapping_FunctionMapping::_internal_add_options() {
  return options_.Add();
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping_Option* Extensions_Mapping_FunctionMapping::add_options() {
  // @@protoc_insertion_point(field_add:io.substrait.Extensions.Mapping.FunctionMapping.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::substrait::Extensions_Mapping_FunctionMapping_Option >&
Extensions_Mapping_FunctionMapping::options() const {
  // @@protoc_insertion_point(field_list:io.substrait.Extensions.Mapping.FunctionMapping.options)
  return options_;
}

// -------------------------------------------------------------------

// Extensions_Mapping

// .io.substrait.Extensions.Mapping.TypeMapping type_mapping = 1;
inline bool Extensions_Mapping::_internal_has_type_mapping() const {
  return mapping_type_case() == kTypeMapping;
}
inline bool Extensions_Mapping::has_type_mapping() const {
  return _internal_has_type_mapping();
}
inline void Extensions_Mapping::set_has_type_mapping() {
  _oneof_case_[0] = kTypeMapping;
}
inline void Extensions_Mapping::clear_type_mapping() {
  if (_internal_has_type_mapping()) {
    if (GetArena() == nullptr) {
      delete mapping_type_.type_mapping_;
    }
    clear_has_mapping_type();
  }
}
inline ::io::substrait::Extensions_Mapping_TypeMapping* Extensions_Mapping::release_type_mapping() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.type_mapping)
  if (_internal_has_type_mapping()) {
    clear_has_mapping_type();
      ::io::substrait::Extensions_Mapping_TypeMapping* temp = mapping_type_.type_mapping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mapping_type_.type_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::Extensions_Mapping_TypeMapping& Extensions_Mapping::_internal_type_mapping() const {
  return _internal_has_type_mapping()
      ? *mapping_type_.type_mapping_
      : reinterpret_cast< ::io::substrait::Extensions_Mapping_TypeMapping&>(::io::substrait::_Extensions_Mapping_TypeMapping_default_instance_);
}
inline const ::io::substrait::Extensions_Mapping_TypeMapping& Extensions_Mapping::type_mapping() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.type_mapping)
  return _internal_type_mapping();
}
inline ::io::substrait::Extensions_Mapping_TypeMapping* Extensions_Mapping::unsafe_arena_release_type_mapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Extensions.Mapping.type_mapping)
  if (_internal_has_type_mapping()) {
    clear_has_mapping_type();
    ::io::substrait::Extensions_Mapping_TypeMapping* temp = mapping_type_.type_mapping_;
    mapping_type_.type_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extensions_Mapping::unsafe_arena_set_allocated_type_mapping(::io::substrait::Extensions_Mapping_TypeMapping* type_mapping) {
  clear_mapping_type();
  if (type_mapping) {
    set_has_type_mapping();
    mapping_type_.type_mapping_ = type_mapping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.type_mapping)
}
inline ::io::substrait::Extensions_Mapping_TypeMapping* Extensions_Mapping::_internal_mutable_type_mapping() {
  if (!_internal_has_type_mapping()) {
    clear_mapping_type();
    set_has_type_mapping();
    mapping_type_.type_mapping_ = CreateMaybeMessage< ::io::substrait::Extensions_Mapping_TypeMapping >(GetArena());
  }
  return mapping_type_.type_mapping_;
}
inline ::io::substrait::Extensions_Mapping_TypeMapping* Extensions_Mapping::mutable_type_mapping() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.type_mapping)
  return _internal_mutable_type_mapping();
}

// .io.substrait.Extensions.Mapping.FunctionMapping function_mapping = 2;
inline bool Extensions_Mapping::_internal_has_function_mapping() const {
  return mapping_type_case() == kFunctionMapping;
}
inline bool Extensions_Mapping::has_function_mapping() const {
  return _internal_has_function_mapping();
}
inline void Extensions_Mapping::set_has_function_mapping() {
  _oneof_case_[0] = kFunctionMapping;
}
inline void Extensions_Mapping::clear_function_mapping() {
  if (_internal_has_function_mapping()) {
    if (GetArena() == nullptr) {
      delete mapping_type_.function_mapping_;
    }
    clear_has_mapping_type();
  }
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping* Extensions_Mapping::release_function_mapping() {
  // @@protoc_insertion_point(field_release:io.substrait.Extensions.Mapping.function_mapping)
  if (_internal_has_function_mapping()) {
    clear_has_mapping_type();
      ::io::substrait::Extensions_Mapping_FunctionMapping* temp = mapping_type_.function_mapping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mapping_type_.function_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::substrait::Extensions_Mapping_FunctionMapping& Extensions_Mapping::_internal_function_mapping() const {
  return _internal_has_function_mapping()
      ? *mapping_type_.function_mapping_
      : reinterpret_cast< ::io::substrait::Extensions_Mapping_FunctionMapping&>(::io::substrait::_Extensions_Mapping_FunctionMapping_default_instance_);
}
inline const ::io::substrait::Extensions_Mapping_FunctionMapping& Extensions_Mapping::function_mapping() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.Mapping.function_mapping)
  return _internal_function_mapping();
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping* Extensions_Mapping::unsafe_arena_release_function_mapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.substrait.Extensions.Mapping.function_mapping)
  if (_internal_has_function_mapping()) {
    clear_has_mapping_type();
    ::io::substrait::Extensions_Mapping_FunctionMapping* temp = mapping_type_.function_mapping_;
    mapping_type_.function_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Extensions_Mapping::unsafe_arena_set_allocated_function_mapping(::io::substrait::Extensions_Mapping_FunctionMapping* function_mapping) {
  clear_mapping_type();
  if (function_mapping) {
    set_has_function_mapping();
    mapping_type_.function_mapping_ = function_mapping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.substrait.Extensions.Mapping.function_mapping)
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping* Extensions_Mapping::_internal_mutable_function_mapping() {
  if (!_internal_has_function_mapping()) {
    clear_mapping_type();
    set_has_function_mapping();
    mapping_type_.function_mapping_ = CreateMaybeMessage< ::io::substrait::Extensions_Mapping_FunctionMapping >(GetArena());
  }
  return mapping_type_.function_mapping_;
}
inline ::io::substrait::Extensions_Mapping_FunctionMapping* Extensions_Mapping::mutable_function_mapping() {
  // @@protoc_insertion_point(field_mutable:io.substrait.Extensions.Mapping.function_mapping)
  return _internal_mutable_function_mapping();
}

inline bool Extensions_Mapping::has_mapping_type() const {
  return mapping_type_case() != MAPPING_TYPE_NOT_SET;
}
inline void Extensions_Mapping::clear_has_mapping_type() {
  _oneof_case_[0] = MAPPING_TYPE_NOT_SET;
}
inline Extensions_Mapping::MappingTypeCase Extensions_Mapping::mapping_type_case() const {
  return Extensions_Mapping::MappingTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Extensions_ExtensionId

// uint32 id = 1;
inline void Extensions_ExtensionId::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extensions_ExtensionId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extensions_ExtensionId::id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.ExtensionId.id)
  return _internal_id();
}
inline void Extensions_ExtensionId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Extensions_ExtensionId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.ExtensionId.id)
}

// -------------------------------------------------------------------

// Extensions_FunctionId

// uint64 id = 1;
inline void Extensions_FunctionId::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Extensions_FunctionId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Extensions_FunctionId::id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.FunctionId.id)
  return _internal_id();
}
inline void Extensions_FunctionId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Extensions_FunctionId::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.FunctionId.id)
}

// -------------------------------------------------------------------

// Extensions_TypeId

// uint64 id = 1;
inline void Extensions_TypeId::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Extensions_TypeId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Extensions_TypeId::id() const {
  // @@protoc_insertion_point(field_get:io.substrait.Extensions.TypeId.id)
  return _internal_id();
}
inline void Extensions_TypeId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Extensions_TypeId::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:io.substrait.Extensions.TypeId.id)
}

// -------------------------------------------------------------------

// Extensions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto
